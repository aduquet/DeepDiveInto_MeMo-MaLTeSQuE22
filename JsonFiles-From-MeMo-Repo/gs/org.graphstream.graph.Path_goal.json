[
  {
    "signature": "getNodeCount()",
    "name": "getNodeCount",
    "containingClass": {
      "qualifiedName": "org.graphstream.graph.Path",
      "name": "Path",
      "isArray": false
    },
    "targetClass": "org.graphstream.graph.Path",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Returns the size of the path. Identical to #size().",
      "kind": "FreeText",
      "condition": "methodResultID==(receiverObjectClone.size())"
    }
  },
  {
    "signature": "getEachNode()",
    "name": "getEachNode",
    "containingClass": {
      "qualifiedName": "org.graphstream.graph.Path",
      "name": "Path",
      "isArray": false
    },
    "targetClass": "org.graphstream.graph.Path",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Iterable<? extends T>",
      "name": "java.lang.Iterable<? extends T>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "push(org.graphstream.graph.Node from, org.graphstream.graph.Edge edge)",
    "name": "push",
    "containingClass": {
      "qualifiedName": "org.graphstream.graph.Path",
      "name": "Path",
      "isArray": false
    },
    "targetClass": "org.graphstream.graph.Path",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.graphstream.graph.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "from"
      },
      {
        "type": {
          "qualifiedName": "org.graphstream.graph.Edge",
          "name": "Edge",
          "isArray": false
        },
        "name": "edge"
      }
    ],
    "equivalence": {
      "comment": "A synonym for #add(Edge).",
      "kind": "FreeText",
      "condition": "receiverObjectClone.add(args[1]);receiverObjectClone.equals(receiverObjectID)"
    }
  },
  {
    "signature": "getACopy()",
    "name": "getACopy",
    "containingClass": {
      "qualifiedName": "org.graphstream.graph.Path",
      "name": "Path",
      "isArray": false
    },
    "targetClass": "org.graphstream.graph.Path",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.graphstream.graph.Path",
      "name": "org.graphstream.graph.Path",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Get a copy of this path",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "contains(org.graphstream.graph.Node node)",
    "name": "contains",
    "containingClass": {
      "qualifiedName": "org.graphstream.graph.Path",
      "name": "Path",
      "isArray": false
    },
    "targetClass": "org.graphstream.graph.Path",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.graphstream.graph.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "node"
      }
    ],
    "equivalence": {
      "comment": "Says whether the path contains this node or not.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getNodePath()",
    "name": "getNodePath",
    "containingClass": {
      "qualifiedName": "org.graphstream.graph.Path",
      "name": "Path",
      "isArray": false
    },
    "targetClass": "org.graphstream.graph.Path",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List<org.graphstream.graph.Node>",
      "name": "java.util.List<org.graphstream.graph.Node>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Construct an return a list of nodes that represents the path.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "size()",
    "name": "size",
    "containingClass": {
      "qualifiedName": "org.graphstream.graph.Path",
      "name": "Path",
      "isArray": false
    },
    "targetClass": "org.graphstream.graph.Path",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Returns the size of the path",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "push(org.graphstream.graph.Edge edge)",
    "name": "push",
    "containingClass": {
      "qualifiedName": "org.graphstream.graph.Path",
      "name": "Path",
      "isArray": false
    },
    "targetClass": "org.graphstream.graph.Path",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.graphstream.graph.Edge",
          "name": "Edge",
          "isArray": false
        },
        "name": "edge"
      }
    ],
    "equivalence": {
      "comment": "A synonym for #add(Edge).",
      "kind": "FreeText",
      "condition": "receiverObjectClone.add(args[0]);receiverObjectClone.equals(receiverObjectID)"
    }
  },
  {
    "signature": "popEdge()",
    "name": "popEdge",
    "containingClass": {
      "qualifiedName": "org.graphstream.graph.Path",
      "name": "Path",
      "isArray": false
    },
    "targetClass": "org.graphstream.graph.Path",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.graphstream.graph.Edge",
      "name": "org.graphstream.graph.Edge",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "This methods pops the 2 stacks (edgePath and nodePath) and returns the removed edge.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getEdgePath()",
    "name": "getEdgePath",
    "containingClass": {
      "qualifiedName": "org.graphstream.graph.Path",
      "name": "Path",
      "isArray": false
    },
    "targetClass": "org.graphstream.graph.Path",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List<org.graphstream.graph.Edge>",
      "name": "java.util.List<org.graphstream.graph.Edge>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Returns the list of edges representing the path.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "equals(org.graphstream.graph.Path p)",
    "name": "equals",
    "containingClass": {
      "qualifiedName": "org.graphstream.graph.Path",
      "name": "Path",
      "isArray": false
    },
    "targetClass": "org.graphstream.graph.Path",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.graphstream.graph.Path",
          "name": "Path",
          "isArray": false
        },
        "name": "p"
      }
    ],
    "equivalence": {
      "comment": "Compare the content of the current path and the specified path to decide weather they are equal or not.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "peekNode()",
    "name": "peekNode",
    "containingClass": {
      "qualifiedName": "org.graphstream.graph.Path",
      "name": "Path",
      "isArray": false
    },
    "targetClass": "org.graphstream.graph.Path",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.graphstream.graph.Node",
      "name": "org.graphstream.graph.Node",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Looks at the node at the top of the stack without removing it from the stack.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toString()",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "org.graphstream.graph.Path",
      "name": "Path",
      "isArray": false
    },
    "targetClass": "org.graphstream.graph.Path",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Returns a String description of the path.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setRoot(org.graphstream.graph.Node root)",
    "name": "setRoot",
    "containingClass": {
      "qualifiedName": "org.graphstream.graph.Path",
      "name": "Path",
      "isArray": false
    },
    "targetClass": "org.graphstream.graph.Path",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.graphstream.graph.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "root"
      }
    ],
    "equivalence": {
      "comment": "Set the root (first node) of the path.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "add(org.graphstream.graph.Edge edge)",
    "name": "add",
    "containingClass": {
      "qualifiedName": "org.graphstream.graph.Path",
      "name": "Path",
      "isArray": false
    },
    "targetClass": "org.graphstream.graph.Path",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.graphstream.graph.Edge",
          "name": "Edge",
          "isArray": false
        },
        "name": "edge"
      }
    ],
    "equivalence": {
      "comment": "Method that adds an edge an a node to the path. The new edge to add is given.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getNodeIterator()",
    "name": "getNodeIterator",
    "containingClass": {
      "qualifiedName": "org.graphstream.graph.Path",
      "name": "Path",
      "isArray": false
    },
    "targetClass": "org.graphstream.graph.Path",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Iterator<T>",
      "name": "java.util.Iterator<T>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getEdgeSet()",
    "name": "getEdgeSet",
    "containingClass": {
      "qualifiedName": "org.graphstream.graph.Path",
      "name": "Path",
      "isArray": false
    },
    "targetClass": "org.graphstream.graph.Path",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Collection<T>",
      "name": "java.util.Collection<T>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "empty()",
    "name": "empty",
    "containingClass": {
      "qualifiedName": "org.graphstream.graph.Path",
      "name": "Path",
      "isArray": false
    },
    "targetClass": "org.graphstream.graph.Path",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Returns true if the path is empty.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "add(org.graphstream.graph.Node from, org.graphstream.graph.Edge edge)",
    "name": "add",
    "containingClass": {
      "qualifiedName": "org.graphstream.graph.Path",
      "name": "Path",
      "isArray": false
    },
    "targetClass": "org.graphstream.graph.Path",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.graphstream.graph.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "from"
      },
      {
        "type": {
          "qualifiedName": "org.graphstream.graph.Edge",
          "name": "Edge",
          "isArray": false
        },
        "name": "edge"
      }
    ],
    "equivalence": {
      "comment": "Method that adds a node (and an edge) to the path. Parameters are the start node : the one who already belong to the path or the first one if the path is empty. The other parameter is the the new edge to add.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "clear()",
    "name": "clear",
    "containingClass": {
      "qualifiedName": "org.graphstream.graph.Path",
      "name": "Path",
      "isArray": false
    },
    "targetClass": "org.graphstream.graph.Path",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Clears the path;",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "contains(org.graphstream.graph.Edge edge)",
    "name": "contains",
    "containingClass": {
      "qualifiedName": "org.graphstream.graph.Path",
      "name": "Path",
      "isArray": false
    },
    "targetClass": "org.graphstream.graph.Path",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.graphstream.graph.Edge",
          "name": "Edge",
          "isArray": false
        },
        "name": "edge"
      }
    ],
    "equivalence": {
      "comment": "Says whether the path contains this edge or not.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getEachEdge()",
    "name": "getEachEdge",
    "containingClass": {
      "qualifiedName": "org.graphstream.graph.Path",
      "name": "Path",
      "isArray": false
    },
    "targetClass": "org.graphstream.graph.Path",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Iterable<? extends T>",
      "name": "java.lang.Iterable<? extends T>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getPathWeight(java.lang.String characteristic)",
    "name": "getPathWeight",
    "containingClass": {
      "qualifiedName": "org.graphstream.graph.Path",
      "name": "Path",
      "isArray": false
    },
    "targetClass": "org.graphstream.graph.Path",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Double",
      "name": "java.lang.Double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "characteristic"
      }
    ],
    "equivalence": {
      "comment": "It returns the sum of the characteristic given value in the Edges of the path.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "org.graphstream.graph.Path()",
    "name": "org.graphstream.graph.Path",
    "containingClass": {
      "qualifiedName": "org.graphstream.graph.Path",
      "name": "Path",
      "isArray": false
    },
    "targetClass": "org.graphstream.graph.Path",
    "isVarArgs": false,
    "parameters": [],
    "equivalence": {
      "comment": "New empty path.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getEdgeCount()",
    "name": "getEdgeCount",
    "containingClass": {
      "qualifiedName": "org.graphstream.graph.Path",
      "name": "Path",
      "isArray": false
    },
    "targetClass": "org.graphstream.graph.Path",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "removeLoops()",
    "name": "removeLoops",
    "containingClass": {
      "qualifiedName": "org.graphstream.graph.Path",
      "name": "Path",
      "isArray": false
    },
    "targetClass": "org.graphstream.graph.Path",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Remove all parts of the path that start at a given node and pass a new at this node.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getRoot()",
    "name": "getRoot",
    "containingClass": {
      "qualifiedName": "org.graphstream.graph.Path",
      "name": "Path",
      "isArray": false
    },
    "targetClass": "org.graphstream.graph.Path",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.graphstream.graph.Node",
      "name": "org.graphstream.graph.Node",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Get the root (the first node) of the path.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "peekEdge()",
    "name": "peekEdge",
    "containingClass": {
      "qualifiedName": "org.graphstream.graph.Path",
      "name": "Path",
      "isArray": false
    },
    "targetClass": "org.graphstream.graph.Path",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.graphstream.graph.Edge",
      "name": "org.graphstream.graph.Edge",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Looks at the edge at the top of the stack without removing it from the stack.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "popNode()",
    "name": "popNode",
    "containingClass": {
      "qualifiedName": "org.graphstream.graph.Path",
      "name": "Path",
      "isArray": false
    },
    "targetClass": "org.graphstream.graph.Path",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.graphstream.graph.Node",
      "name": "org.graphstream.graph.Node",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "This methods pops the 2 stacks (edgePath and nodePath) and returns the removed node.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getEdgeIterator()",
    "name": "getEdgeIterator",
    "containingClass": {
      "qualifiedName": "org.graphstream.graph.Path",
      "name": "Path",
      "isArray": false
    },
    "targetClass": "org.graphstream.graph.Path",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Iterator<T>",
      "name": "java.util.Iterator<T>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getNodeSet()",
    "name": "getNodeSet",
    "containingClass": {
      "qualifiedName": "org.graphstream.graph.Path",
      "name": "Path",
      "isArray": false
    },
    "targetClass": "org.graphstream.graph.Path",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Collection<T>",
      "name": "java.util.Collection<T>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  }
]