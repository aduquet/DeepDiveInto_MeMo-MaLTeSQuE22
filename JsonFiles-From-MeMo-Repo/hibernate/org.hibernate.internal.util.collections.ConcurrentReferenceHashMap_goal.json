[
  {
    "signature": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap(int initialCapacity, float loadFactor, int concurrencyLevel, org.hibernate.internal.util.collections.ConcurrentReferenceHashMap$ReferenceType keyType, org.hibernate.internal.util.collections.ConcurrentReferenceHashMap$ReferenceType valueType, java.util.EnumSet<org.hibernate.internal.util.collections.ConcurrentReferenceHashMap$Option> options)",
    "name": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
    "containingClass": {
      "qualifiedName": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
      "name": "ConcurrentReferenceHashMap",
      "isArray": false
    },
    "targetClass": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "initialCapacity"
      },
      {
        "type": {
          "qualifiedName": "float",
          "name": "float",
          "isArray": false
        },
        "name": "loadFactor"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "concurrencyLevel"
      },
      {
        "type": {
          "qualifiedName": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap$ReferenceType",
          "name": "ReferenceType",
          "isArray": false
        },
        "name": "keyType"
      },
      {
        "type": {
          "qualifiedName": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap$ReferenceType",
          "name": "ReferenceType",
          "isArray": false
        },
        "name": "valueType"
      },
      {
        "type": {
          "qualifiedName": "java.util.EnumSet",
          "name": "EnumSet",
          "isArray": false
        },
        "name": "options"
      }
    ],
    "equivalence": {
      "member": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap(int initialCapacity, float loadFactor, int concurrencyLevel, org.hibernate.internal.util.collections.ConcurrentReferenceHashMap$ReferenceType keyType, org.hibernate.internal.util.collections.ConcurrentReferenceHashMap$ReferenceType valueType, java.util.EnumSet<org.hibernate.internal.util.collections.ConcurrentReferenceHashMap$Option> options)",
      "comment": "Creates a new, empty map with the specified initial capacity, reference types, load factor and concurrency level.  Behavioral changing options such as Option#IDENTITY_COMPARISONS can also be specified.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap(int initialCapacity, float loadFactor, int concurrencyLevel)",
    "name": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
    "containingClass": {
      "qualifiedName": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
      "name": "ConcurrentReferenceHashMap",
      "isArray": false
    },
    "targetClass": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "initialCapacity"
      },
      {
        "type": {
          "qualifiedName": "float",
          "name": "float",
          "isArray": false
        },
        "name": "loadFactor"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "concurrencyLevel"
      }
    ],
    "equivalence": {
      "member": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap(int initialCapacity, float loadFactor, int concurrencyLevel)",
      "comment": "Creates a new, empty map with the specified initial capacity, load factor and concurrency level.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap(int initialCapacity, float loadFactor)",
    "name": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
    "containingClass": {
      "qualifiedName": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
      "name": "ConcurrentReferenceHashMap",
      "isArray": false
    },
    "targetClass": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "initialCapacity"
      },
      {
        "type": {
          "qualifiedName": "float",
          "name": "float",
          "isArray": false
        },
        "name": "loadFactor"
      }
    ],
    "equivalence": {
      "member": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap(int initialCapacity, float loadFactor)",
      "comment": "Creates a new, empty map with the specified initial capacity and load factor and with the default reference types (weak keys, strong values), and concurrencyLevel (16).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap(int initialCapacity, org.hibernate.internal.util.collections.ConcurrentReferenceHashMap$ReferenceType keyType, org.hibernate.internal.util.collections.ConcurrentReferenceHashMap$ReferenceType valueType)",
    "name": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
    "containingClass": {
      "qualifiedName": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
      "name": "ConcurrentReferenceHashMap",
      "isArray": false
    },
    "targetClass": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "initialCapacity"
      },
      {
        "type": {
          "qualifiedName": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap$ReferenceType",
          "name": "ReferenceType",
          "isArray": false
        },
        "name": "keyType"
      },
      {
        "type": {
          "qualifiedName": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap$ReferenceType",
          "name": "ReferenceType",
          "isArray": false
        },
        "name": "valueType"
      }
    ],
    "equivalence": {
      "member": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap(int initialCapacity, org.hibernate.internal.util.collections.ConcurrentReferenceHashMap$ReferenceType keyType, org.hibernate.internal.util.collections.ConcurrentReferenceHashMap$ReferenceType valueType)",
      "comment": "Creates a new, empty map with the specified initial capacity, reference types and with default load factor (0.75) and concurrencyLevel (16).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap(int initialCapacity)",
    "name": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
    "containingClass": {
      "qualifiedName": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
      "name": "ConcurrentReferenceHashMap",
      "isArray": false
    },
    "targetClass": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "initialCapacity"
      }
    ],
    "equivalence": {
      "member": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap(int initialCapacity)",
      "comment": "Creates a new, empty map with the specified initial capacity, and with default reference types (weak keys, strong values), load factor (0.75) and concurrencyLevel (16).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap()",
    "name": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
    "containingClass": {
      "qualifiedName": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
      "name": "ConcurrentReferenceHashMap",
      "isArray": false
    },
    "targetClass": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
    "isVarArgs": false,
    "parameters": [],
    "equivalence": {
      "member": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap()",
      "comment": "Creates a new, empty map with a default initial capacity (16), reference types (weak keys, strong values), default load factor (0.75) and concurrencyLevel (16).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap(java.util.Map<? extends K, ? extends V> m)",
    "name": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
    "containingClass": {
      "qualifiedName": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
      "name": "ConcurrentReferenceHashMap",
      "isArray": false
    },
    "targetClass": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Map",
          "name": "Map",
          "isArray": false
        },
        "name": "m"
      }
    ],
    "equivalence": {
      "member": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap(java.util.Map<? extends K, ? extends V> m)",
      "comment": "Creates a new map with the same mappings as the given map. The map is created with a capacity of 1.5 times the number of mappings in the given map or 16 (whichever is greater), and a default load factor (0.75) and concurrencyLevel (16).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "segmentFor(int hash)",
    "name": "segmentFor",
    "containingClass": {
      "qualifiedName": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
      "name": "ConcurrentReferenceHashMap",
      "isArray": false
    },
    "targetClass": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap$Segment<K, V>",
      "name": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap$Segment<K, V>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "hash"
      }
    ],
    "equivalence": {
      "member": "segmentFor(int hash)",
      "comment": "Returns the segment that should be used for key with given hash",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "isEmpty()",
    "name": "isEmpty",
    "containingClass": {
      "qualifiedName": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
      "name": "ConcurrentReferenceHashMap",
      "isArray": false
    },
    "targetClass": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "isEmpty()",
      "comment": "Returns true if this map contains no key-value mappings.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "size()",
    "name": "size",
    "containingClass": {
      "qualifiedName": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
      "name": "ConcurrentReferenceHashMap",
      "isArray": false
    },
    "targetClass": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "size()",
      "comment": "Returns the number of key-value mappings in this map. If the map contains more than Integer.MAX_VALUE elements, returns Integer.MAX_VALUE.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "get(java.lang.Object key)",
    "name": "get",
    "containingClass": {
      "qualifiedName": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
      "name": "ConcurrentReferenceHashMap",
      "isArray": false
    },
    "targetClass": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "V",
      "name": "V",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "key"
      }
    ],
    "equivalence": {
      "member": "get(java.lang.Object key)",
      "comment": "Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.  More formally, if this map contains a mapping from a key k to a value v such that key.equals(k), then this method returns v; otherwise it returns null. (There can be at most one such mapping.)",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "containsKey(java.lang.Object key)",
    "name": "containsKey",
    "containingClass": {
      "qualifiedName": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
      "name": "ConcurrentReferenceHashMap",
      "isArray": false
    },
    "targetClass": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "key"
      }
    ],
    "equivalence": {
      "member": "containsKey(java.lang.Object key)",
      "comment": "Tests if the specified object is a key in this table.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "containsValue(java.lang.Object value)",
    "name": "containsValue",
    "containingClass": {
      "qualifiedName": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
      "name": "ConcurrentReferenceHashMap",
      "isArray": false
    },
    "targetClass": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "value"
      }
    ],
    "equivalence": {
      "member": "containsValue(java.lang.Object value)",
      "comment": "Returns true if this map maps one or more keys to the specified value. Note: This method requires a full internal traversal of the hash table, and so is much slower than method containsKey.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "contains(java.lang.Object value)",
    "name": "contains",
    "containingClass": {
      "qualifiedName": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
      "name": "ConcurrentReferenceHashMap",
      "isArray": false
    },
    "targetClass": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "value"
      }
    ],
    "equivalence": {
      "member": "contains(java.lang.Object value)",
      "comment": "Legacy method testing if some key maps into the specified value in this table. This method is identical in functionality to #containsValue, and exists solely to ensure full compatibility with class java.util.Hashtable, which supported this method prior to introduction of the Java Collections framework.",
      "kind": "FreeText",
      "condition": "methodResultID==(receiverObjectClone.containsValue(args[0]))"
    }
  },
  {
    "signature": "put(K key, V value)",
    "name": "put",
    "containingClass": {
      "qualifiedName": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
      "name": "ConcurrentReferenceHashMap",
      "isArray": false
    },
    "targetClass": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "V",
      "name": "V",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "key"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "value"
      }
    ],
    "equivalence": {
      "member": "put(K key, V value)",
      "comment": "Maps the specified key to the specified value in this table. Neither the key nor the value can be null.   The value can be retrieved by calling the get method with a key that is equal to the original key.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "putIfAbsent(K key, V value)",
    "name": "putIfAbsent",
    "containingClass": {
      "qualifiedName": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
      "name": "ConcurrentReferenceHashMap",
      "isArray": false
    },
    "targetClass": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "V",
      "name": "V",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "key"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "value"
      }
    ],
    "equivalence": {
      "member": "putIfAbsent(K key, V value)",
      "comment": "{@inheritDoc}",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "putAll(java.util.Map<? extends K, ? extends V> m)",
    "name": "putAll",
    "containingClass": {
      "qualifiedName": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
      "name": "ConcurrentReferenceHashMap",
      "isArray": false
    },
    "targetClass": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Map",
          "name": "Map",
          "isArray": false
        },
        "name": "m"
      }
    ],
    "equivalence": {
      "member": "putAll(java.util.Map<? extends K, ? extends V> m)",
      "comment": "Copies all of the mappings from the specified map to this one. These mappings replace any mappings that this map had for any of the keys currently in the specified map.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "remove(java.lang.Object key)",
    "name": "remove",
    "containingClass": {
      "qualifiedName": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
      "name": "ConcurrentReferenceHashMap",
      "isArray": false
    },
    "targetClass": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "V",
      "name": "V",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "key"
      }
    ],
    "equivalence": {
      "member": "remove(java.lang.Object key)",
      "comment": "Removes the key (and its corresponding value) from this map. This method does nothing if the key is not in the map.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "remove(java.lang.Object key, java.lang.Object value)",
    "name": "remove",
    "containingClass": {
      "qualifiedName": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
      "name": "ConcurrentReferenceHashMap",
      "isArray": false
    },
    "targetClass": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "key"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "value"
      }
    ],
    "equivalence": {
      "member": "remove(java.lang.Object key, java.lang.Object value)",
      "comment": "{@inheritDoc}",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "replace(K key, V oldValue, V newValue)",
    "name": "replace",
    "containingClass": {
      "qualifiedName": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
      "name": "ConcurrentReferenceHashMap",
      "isArray": false
    },
    "targetClass": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "key"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "oldValue"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "newValue"
      }
    ],
    "equivalence": {
      "member": "replace(K key, V oldValue, V newValue)",
      "comment": "{@inheritDoc}",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "replace(K key, V value)",
    "name": "replace",
    "containingClass": {
      "qualifiedName": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
      "name": "ConcurrentReferenceHashMap",
      "isArray": false
    },
    "targetClass": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "V",
      "name": "V",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "key"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "value"
      }
    ],
    "equivalence": {
      "member": "replace(K key, V value)",
      "comment": "{@inheritDoc}",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "clear()",
    "name": "clear",
    "containingClass": {
      "qualifiedName": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
      "name": "ConcurrentReferenceHashMap",
      "isArray": false
    },
    "targetClass": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "clear()",
      "comment": "Removes all of the mappings from this map.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "purgeStaleEntries()",
    "name": "purgeStaleEntries",
    "containingClass": {
      "qualifiedName": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
      "name": "ConcurrentReferenceHashMap",
      "isArray": false
    },
    "targetClass": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "purgeStaleEntries()",
      "comment": "Removes any stale entries whose keys have been finalized. Use of this method is normally not necessary since stale entries are automatically removed lazily, when blocking operations are required. However, there are some cases where this operation should be performed eagerly, such as cleaning up old references to a ClassLoader in a multi-classloader environment.  Note: this method will acquire locks, one at a time, across all segments of this table, so if it is to be used, it should be used sparingly.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "keySet()",
    "name": "keySet",
    "containingClass": {
      "qualifiedName": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
      "name": "ConcurrentReferenceHashMap",
      "isArray": false
    },
    "targetClass": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Set<K>",
      "name": "java.util.Set<K>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "keySet()",
      "comment": "Returns a Set view of the keys contained in this map. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. The set supports element removal, which removes the corresponding mapping from this map, via the Iterator.remove, Set.remove, removeAll, retainAll, and clear operations. It does not support the add or addAll operations.  The view's iterator is a \"weakly consistent\" iterator that will never throw java.util.ConcurrentModificationException, and guarantees to traverse elements as they existed upon construction of the iterator, and may (but is not guaranteed to) reflect any modifications subsequent to construction.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "values()",
    "name": "values",
    "containingClass": {
      "qualifiedName": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
      "name": "ConcurrentReferenceHashMap",
      "isArray": false
    },
    "targetClass": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Collection<V>",
      "name": "java.util.Collection<V>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "values()",
      "comment": "Returns a Collection view of the values contained in this map. The collection is backed by the map, so changes to the map are reflected in the collection, and vice-versa. The collection supports element removal, which removes the corresponding mapping from this map, via the Iterator.remove, Collection.remove, removeAll, retainAll, and clear operations. It does not support the add or addAll operations.  The view's iterator is a \"weakly consistent\" iterator that will never throw java.util.ConcurrentModificationException, and guarantees to traverse elements as they existed upon construction of the iterator, and may (but is not guaranteed to) reflect any modifications subsequent to construction.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "entrySet()",
    "name": "entrySet",
    "containingClass": {
      "qualifiedName": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
      "name": "ConcurrentReferenceHashMap",
      "isArray": false
    },
    "targetClass": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Set<java.util.Map$Entry<K, V>>",
      "name": "java.util.Set<java.util.Map$Entry<K, V>>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "entrySet()",
      "comment": "Returns a Set view of the mappings contained in this map. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. The set supports element removal, which removes the corresponding mapping from the map, via the Iterator.remove, Set.remove, removeAll, retainAll, and clear operations. It does not support the add or addAll operations.  The view's iterator is a \"weakly consistent\" iterator that will never throw java.util.ConcurrentModificationException, and guarantees to traverse elements as they existed upon construction of the iterator, and may (but is not guaranteed to) reflect any modifications subsequent to construction.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "keys()",
    "name": "keys",
    "containingClass": {
      "qualifiedName": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
      "name": "ConcurrentReferenceHashMap",
      "isArray": false
    },
    "targetClass": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Enumeration<K>",
      "name": "java.util.Enumeration<K>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "keys()",
      "comment": "Returns an enumeration of the keys in this table.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "elements()",
    "name": "elements",
    "containingClass": {
      "qualifiedName": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
      "name": "ConcurrentReferenceHashMap",
      "isArray": false
    },
    "targetClass": "org.hibernate.internal.util.collections.ConcurrentReferenceHashMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Enumeration<V>",
      "name": "java.util.Enumeration<V>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "elements()",
      "comment": "Returns an enumeration of the values in this table.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]