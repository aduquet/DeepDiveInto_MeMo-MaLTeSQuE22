[
  {
    "signature": "decodeComponent(java.lang.String s)",
    "name": "decodeComponent",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.rest.RestUtils",
      "name": "RestUtils",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.rest.RestUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "s"
      }
    ],
    "equivalence": {
      "comment": "Decodes a bit of an URL encoded by a browser.  This is equivalent to calling #decodeComponent(String, Charset) with the UTF-8 charset (recommended to comply with RFC 3986, Section 2).",
      "kind": "FreeText",
      "condition": "methodResultID.equals(receiverObjectID.decodeComponent(args[0], java.nio.charset.Charset.UTF_8))"
    }
  },
  {
    "signature": "checkCorsSettingForRegex(java.lang.String corsSetting)",
    "name": "checkCorsSettingForRegex",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.rest.RestUtils",
      "name": "RestUtils",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.rest.RestUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.regex.Pattern",
      "name": "java.util.regex.Pattern",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "corsSetting"
      }
    ],
    "equivalence": {
      "comment": "Determine if CORS setting is a regex",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "decodeQueryString(java.lang.String s, int fromIndex, java.util.Map<java.lang.String, java.lang.String> params)",
    "name": "decodeQueryString",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.rest.RestUtils",
      "name": "RestUtils",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.rest.RestUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "s"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "fromIndex"
      },
      {
        "type": {
          "qualifiedName": "java.util.Map",
          "name": "Map",
          "isArray": false
        },
        "name": "params"
      }
    ],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "decodeComponent(java.lang.String s, java.nio.charset.Charset charset)",
    "name": "decodeComponent",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.rest.RestUtils",
      "name": "RestUtils",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.rest.RestUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "s"
      },
      {
        "type": {
          "qualifiedName": "java.nio.charset.Charset",
          "name": "Charset",
          "isArray": false
        },
        "name": "charset"
      }
    ],
    "equivalence": {
      "comment": "Decodes a bit of an URL encoded by a browser.  The string is expected to be encoded as per RFC 3986, Section 2. This is the encoding used by JavaScript functions encodeURI and encodeURIComponent, but not escape. For example in this encoding, &eacute; (in Unicode U+00E9 or in UTF-8 0xC3 0xA9}) is encoded as {@code %C3%A9 or %c3%a9.  This is essentially equivalent to calling java.net.URLDecoder URLDecoder.java.net.URLDecoder#decode(String, String) except that it's over 2x faster and generates less garbage for the GC. Actually this function doesn't allocate any memory if there's nothing to decode, the argument itself is returned.",
      "kind": "FreeText",
      "condition": "methodResultID.equals(java.net.URLDecoder#decode(args[0], \"StandardCharsets.UTF_8\"))"
    }
  },
  {
    "signature": "corsSettingAsArray(java.lang.String corsSetting)",
    "name": "corsSettingAsArray",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.rest.RestUtils",
      "name": "RestUtils",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.rest.RestUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String[]",
      "name": "java.lang.String[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "corsSetting"
      }
    ],
    "equivalence": {
      "comment": "Return the CORS setting as an array of origins.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]