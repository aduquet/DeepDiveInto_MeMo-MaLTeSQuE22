[
  {
    "signature": "keyed(boolean keyed)",
    "name": "keyed",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
      "name": "IpRangeAggregationBuilder",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
      "name": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "keyed"
      }
    ],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "script(org.elasticsearch.script.Script script)",
    "name": "script",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
      "name": "IpRangeAggregationBuilder",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
      "name": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.elasticsearch.script.Script",
          "name": "Script",
          "isArray": false
        },
        "name": "script"
      }
    ],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "innerBuild(org.elasticsearch.search.internal.SearchContext context, org.elasticsearch.search.aggregations.support.ValuesSourceConfig<org.elasticsearch.search.aggregations.support.ValuesSource$Bytes> config, org.elasticsearch.search.aggregations.AggregatorFactory<?> parent, org.elasticsearch.search.aggregations.AggregatorFactories$Builder subFactoriesBuilder)",
    "name": "innerBuild",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
      "name": "IpRangeAggregationBuilder",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.elasticsearch.search.aggregations.support.ValuesSourceAggregatorFactory<org.elasticsearch.search.aggregations.support.ValuesSource$Bytes, ?>",
      "name": "org.elasticsearch.search.aggregations.support.ValuesSourceAggregatorFactory<org.elasticsearch.search.aggregations.support.ValuesSource$Bytes, ?>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.elasticsearch.search.internal.SearchContext",
          "name": "SearchContext",
          "isArray": false
        },
        "name": "context"
      },
      {
        "type": {
          "qualifiedName": "org.elasticsearch.search.aggregations.support.ValuesSourceConfig",
          "name": "ValuesSourceConfig",
          "isArray": false
        },
        "name": "config"
      },
      {
        "type": {
          "qualifiedName": "org.elasticsearch.search.aggregations.AggregatorFactory",
          "name": "AggregatorFactory",
          "isArray": false
        },
        "name": "parent"
      },
      {
        "type": {
          "qualifiedName": "org.elasticsearch.search.aggregations.AggregatorFactories$Builder",
          "name": "Builder",
          "isArray": false
        },
        "name": "subFactoriesBuilder"
      }
    ],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getType()",
    "name": "getType",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
      "name": "IpRangeAggregationBuilder",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder(java.lang.String name)",
    "name": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
      "name": "IpRangeAggregationBuilder",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "name"
      }
    ],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "keyed()",
    "name": "keyed",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
      "name": "IpRangeAggregationBuilder",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "innerWriteTo(org.elasticsearch.common.io.stream.StreamOutput out)",
    "name": "innerWriteTo",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
      "name": "IpRangeAggregationBuilder",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.elasticsearch.common.io.stream.StreamOutput",
          "name": "StreamOutput",
          "isArray": false
        },
        "name": "out"
      }
    ],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "addMaskRange(java.lang.String key, java.lang.String mask)",
    "name": "addMaskRange",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
      "name": "IpRangeAggregationBuilder",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
      "name": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "key"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "mask"
      }
    ],
    "equivalence": {
      "comment": "Add a new range to this aggregation using the CIDR notation.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "addUnboundedFrom(java.lang.String from)",
    "name": "addUnboundedFrom",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
      "name": "IpRangeAggregationBuilder",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
      "name": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "from"
      }
    ],
    "equivalence": {
      "comment": "Same as #addUnboundedFrom(String, String) but the key will be generated automatically.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "doXContentBody(org.elasticsearch.common.xcontent.XContentBuilder builder, org.elasticsearch.common.xcontent.ToXContent$Params params)",
    "name": "doXContentBody",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
      "name": "IpRangeAggregationBuilder",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.elasticsearch.common.xcontent.XContentBuilder",
      "name": "org.elasticsearch.common.xcontent.XContentBuilder",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.elasticsearch.common.xcontent.XContentBuilder",
          "name": "XContentBuilder",
          "isArray": false
        },
        "name": "builder"
      },
      {
        "type": {
          "qualifiedName": "org.elasticsearch.common.xcontent.ToXContent$Params",
          "name": "Params",
          "isArray": false
        },
        "name": "params"
      }
    ],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "addUnboundedFrom(java.lang.String key, java.lang.String from)",
    "name": "addUnboundedFrom",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
      "name": "IpRangeAggregationBuilder",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
      "name": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "key"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "from"
      }
    ],
    "equivalence": {
      "comment": "Same as #addRange(String, String, String) but there will be no upper bound.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "addMaskRange(java.lang.String mask)",
    "name": "addMaskRange",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
      "name": "IpRangeAggregationBuilder",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
      "name": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "mask"
      }
    ],
    "equivalence": {
      "comment": "Same as #addMaskRange(String, String) but uses the mask itself as a key.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "addRange(org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder$Range range)",
    "name": "addRange",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
      "name": "IpRangeAggregationBuilder",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
      "name": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder$Range",
          "name": "Range",
          "isArray": false
        },
        "name": "range"
      }
    ],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getRanges()",
    "name": "getRanges",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
      "name": "IpRangeAggregationBuilder",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List<org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder$Range>",
      "name": "java.util.List<org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder$Range>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "addRange(java.lang.String key, java.lang.String from, java.lang.String to)",
    "name": "addRange",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
      "name": "IpRangeAggregationBuilder",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
      "name": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "key"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "from"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "to"
      }
    ],
    "equivalence": {
      "comment": "Add a new range to this aggregation.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "addUnboundedTo(java.lang.String key, java.lang.String to)",
    "name": "addUnboundedTo",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
      "name": "IpRangeAggregationBuilder",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
      "name": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "key"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "to"
      }
    ],
    "equivalence": {
      "comment": "Same as #addRange(String, String, String) but there will be no lower bound.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder(org.elasticsearch.common.io.stream.StreamInput in)",
    "name": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
      "name": "IpRangeAggregationBuilder",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.elasticsearch.common.io.stream.StreamInput",
          "name": "StreamInput",
          "isArray": false
        },
        "name": "in"
      }
    ],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "innerEquals(java.lang.Object obj)",
    "name": "innerEquals",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
      "name": "IpRangeAggregationBuilder",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "obj"
      }
    ],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "addRange(java.lang.String from, java.lang.String to)",
    "name": "addRange",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
      "name": "IpRangeAggregationBuilder",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
      "name": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "from"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "to"
      }
    ],
    "equivalence": {
      "comment": "Same as #addRange(String, String, String) but the key will be automatically generated.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "parse(java.lang.String aggregationName, org.elasticsearch.common.xcontent.XContentParser parser)",
    "name": "parse",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
      "name": "IpRangeAggregationBuilder",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.elasticsearch.search.aggregations.AggregationBuilder",
      "name": "org.elasticsearch.search.aggregations.AggregationBuilder",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "aggregationName"
      },
      {
        "type": {
          "qualifiedName": "org.elasticsearch.common.xcontent.XContentParser",
          "name": "XContentParser",
          "isArray": false
        },
        "name": "parser"
      }
    ],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "innerHashCode()",
    "name": "innerHashCode",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
      "name": "IpRangeAggregationBuilder",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "addUnboundedTo(java.lang.String to)",
    "name": "addUnboundedTo",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
      "name": "IpRangeAggregationBuilder",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
      "name": "org.elasticsearch.search.aggregations.bucket.range.IpRangeAggregationBuilder",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "to"
      }
    ],
    "equivalence": {
      "comment": "Same as #addUnboundedTo(String, String) but the key will be generated automatically.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]