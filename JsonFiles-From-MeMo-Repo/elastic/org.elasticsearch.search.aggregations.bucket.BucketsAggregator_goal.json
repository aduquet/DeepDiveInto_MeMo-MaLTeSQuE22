[
  {
    "signature": "bucketAggregations(long bucket)",
    "name": "bucketAggregations",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.search.aggregations.bucket.BucketsAggregator",
      "name": "BucketsAggregator",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.search.aggregations.bucket.BucketsAggregator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.elasticsearch.search.aggregations.InternalAggregations",
      "name": "org.elasticsearch.search.aggregations.InternalAggregations",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "bucket"
      }
    ],
    "equivalence": {
      "comment": "Required method to build the child aggregations of the given bucket (identified by the bucket ordinal).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "maxBucketOrd()",
    "name": "maxBucketOrd",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.search.aggregations.bucket.BucketsAggregator",
      "name": "BucketsAggregator",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.search.aggregations.bucket.BucketsAggregator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Return an upper bound of the maximum bucket ordinal seen so far.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "close()",
    "name": "close",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.search.aggregations.bucket.BucketsAggregator",
      "name": "BucketsAggregator",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.search.aggregations.bucket.BucketsAggregator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "org.elasticsearch.search.aggregations.bucket.BucketsAggregator(java.lang.String name, org.elasticsearch.search.aggregations.AggregatorFactories factories, org.elasticsearch.search.internal.SearchContext context, org.elasticsearch.search.aggregations.Aggregator parent, java.util.List<org.elasticsearch.search.aggregations.pipeline.PipelineAggregator> pipelineAggregators, java.util.Map<java.lang.String, java.lang.Object> metaData)",
    "name": "org.elasticsearch.search.aggregations.bucket.BucketsAggregator",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.search.aggregations.bucket.BucketsAggregator",
      "name": "BucketsAggregator",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.search.aggregations.bucket.BucketsAggregator",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "name"
      },
      {
        "type": {
          "qualifiedName": "org.elasticsearch.search.aggregations.AggregatorFactories",
          "name": "AggregatorFactories",
          "isArray": false
        },
        "name": "factories"
      },
      {
        "type": {
          "qualifiedName": "org.elasticsearch.search.internal.SearchContext",
          "name": "SearchContext",
          "isArray": false
        },
        "name": "context"
      },
      {
        "type": {
          "qualifiedName": "org.elasticsearch.search.aggregations.Aggregator",
          "name": "Aggregator",
          "isArray": false
        },
        "name": "parent"
      },
      {
        "type": {
          "qualifiedName": "java.util.List",
          "name": "List",
          "isArray": false
        },
        "name": "pipelineAggregators"
      },
      {
        "type": {
          "qualifiedName": "java.util.Map",
          "name": "Map",
          "isArray": false
        },
        "name": "metaData"
      }
    ],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "collectBucket(org.elasticsearch.search.aggregations.LeafBucketCollector subCollector, int doc, long bucketOrd)",
    "name": "collectBucket",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.search.aggregations.bucket.BucketsAggregator",
      "name": "BucketsAggregator",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.search.aggregations.bucket.BucketsAggregator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.elasticsearch.search.aggregations.LeafBucketCollector",
          "name": "LeafBucketCollector",
          "isArray": false
        },
        "name": "subCollector"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "doc"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "bucketOrd"
      }
    ],
    "equivalence": {
      "comment": "Utility method to collect the given doc in the given bucket (identified by the bucket ordinal)",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getDocCounts()",
    "name": "getDocCounts",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.search.aggregations.bucket.BucketsAggregator",
      "name": "BucketsAggregator",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.search.aggregations.bucket.BucketsAggregator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.elasticsearch.common.util.IntArray",
      "name": "org.elasticsearch.common.util.IntArray",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "grow(long maxBucketOrd)",
    "name": "grow",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.search.aggregations.bucket.BucketsAggregator",
      "name": "BucketsAggregator",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.search.aggregations.bucket.BucketsAggregator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "maxBucketOrd"
      }
    ],
    "equivalence": {
      "comment": "Ensure there are at least maxBucketOrd buckets available.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "bucketDocCount(long bucketOrd)",
    "name": "bucketDocCount",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.search.aggregations.bucket.BucketsAggregator",
      "name": "BucketsAggregator",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.search.aggregations.bucket.BucketsAggregator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "bucketOrd"
      }
    ],
    "equivalence": {
      "comment": "Utility method to return the number of documents that fell in the given bucket (identified by the bucket ordinal)",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "collectExistingBucket(org.elasticsearch.search.aggregations.LeafBucketCollector subCollector, int doc, long bucketOrd)",
    "name": "collectExistingBucket",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.search.aggregations.bucket.BucketsAggregator",
      "name": "BucketsAggregator",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.search.aggregations.bucket.BucketsAggregator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.elasticsearch.search.aggregations.LeafBucketCollector",
          "name": "LeafBucketCollector",
          "isArray": false
        },
        "name": "subCollector"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "doc"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "bucketOrd"
      }
    ],
    "equivalence": {
      "comment": "Same as #collectBucket(LeafBucketCollector, int, long), but doesn't check if the docCounts needs to be re-sized.",
      "kind": "FreeText",
      "condition": "receiverObjectClone.collectBucket(args[0],args[1],args[2]); receiverObjectClone.equals(receiverObjectID)"
    }
  },
  {
    "signature": "incrementBucketDocCount(long bucketOrd, int inc)",
    "name": "incrementBucketDocCount",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.search.aggregations.bucket.BucketsAggregator",
      "name": "BucketsAggregator",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.search.aggregations.bucket.BucketsAggregator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "bucketOrd"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "inc"
      }
    ],
    "equivalence": {
      "comment": "Utility method to increment the doc counts of the given bucket (identified by the bucket ordinal)",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "bucketEmptyAggregations()",
    "name": "bucketEmptyAggregations",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.search.aggregations.bucket.BucketsAggregator",
      "name": "BucketsAggregator",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.search.aggregations.bucket.BucketsAggregator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.elasticsearch.search.aggregations.InternalAggregations",
      "name": "org.elasticsearch.search.aggregations.InternalAggregations",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Utility method to build empty aggregations of the sub aggregators.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]