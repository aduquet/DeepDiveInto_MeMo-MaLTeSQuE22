[
  {
    "signature": "org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder(org.elasticsearch.common.io.stream.StreamInput in)",
    "name": "org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder",
      "name": "RangeAggregationBuilder",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.elasticsearch.common.io.stream.StreamInput",
          "name": "StreamInput",
          "isArray": false
        },
        "name": "in"
      }
    ],
    "equivalence": {
      "comment": "Read from a stream.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "addUnboundedFrom(java.lang.String key, double from)",
    "name": "addUnboundedFrom",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder",
      "name": "RangeAggregationBuilder",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder",
      "name": "org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "key"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "from"
      }
    ],
    "equivalence": {
      "comment": "Add a new range with no upper bound.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "addRange(double from, double to)",
    "name": "addRange",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder",
      "name": "RangeAggregationBuilder",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder",
      "name": "org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "from"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "to"
      }
    ],
    "equivalence": {
      "comment": "Same as #addRange(String, double, double) but the key will be automatically generated based on from and to.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "parse(java.lang.String aggregationName, org.elasticsearch.common.xcontent.XContentParser parser)",
    "name": "parse",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder",
      "name": "RangeAggregationBuilder",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.elasticsearch.search.aggregations.AggregationBuilder",
      "name": "org.elasticsearch.search.aggregations.AggregationBuilder",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "aggregationName"
      },
      {
        "type": {
          "qualifiedName": "org.elasticsearch.common.xcontent.XContentParser",
          "name": "XContentParser",
          "isArray": false
        },
        "name": "parser"
      }
    ],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getType()",
    "name": "getType",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder",
      "name": "RangeAggregationBuilder",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder(java.lang.String name)",
    "name": "org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder",
      "name": "RangeAggregationBuilder",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "name"
      }
    ],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "addUnboundedFrom(double from)",
    "name": "addUnboundedFrom",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder",
      "name": "RangeAggregationBuilder",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder",
      "name": "org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "from"
      }
    ],
    "equivalence": {
      "comment": "Same as #addUnboundedFrom(String, double) but the key will be computed automatically.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "addUnboundedTo(double to)",
    "name": "addUnboundedTo",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder",
      "name": "RangeAggregationBuilder",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder",
      "name": "org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "to"
      }
    ],
    "equivalence": {
      "comment": "Same as #addUnboundedTo(String, double) but the key will be computed automatically.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "innerBuild(org.elasticsearch.search.internal.SearchContext context, org.elasticsearch.search.aggregations.support.ValuesSourceConfig<org.elasticsearch.search.aggregations.support.ValuesSource$Numeric> config, org.elasticsearch.search.aggregations.AggregatorFactory<?> parent, org.elasticsearch.search.aggregations.AggregatorFactories$Builder subFactoriesBuilder)",
    "name": "innerBuild",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder",
      "name": "RangeAggregationBuilder",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.elasticsearch.search.aggregations.bucket.range.RangeAggregatorFactory",
      "name": "org.elasticsearch.search.aggregations.bucket.range.RangeAggregatorFactory",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.elasticsearch.search.internal.SearchContext",
          "name": "SearchContext",
          "isArray": false
        },
        "name": "context"
      },
      {
        "type": {
          "qualifiedName": "org.elasticsearch.search.aggregations.support.ValuesSourceConfig",
          "name": "ValuesSourceConfig",
          "isArray": false
        },
        "name": "config"
      },
      {
        "type": {
          "qualifiedName": "org.elasticsearch.search.aggregations.AggregatorFactory",
          "name": "AggregatorFactory",
          "isArray": false
        },
        "name": "parent"
      },
      {
        "type": {
          "qualifiedName": "org.elasticsearch.search.aggregations.AggregatorFactories$Builder",
          "name": "Builder",
          "isArray": false
        },
        "name": "subFactoriesBuilder"
      }
    ],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "addRange(java.lang.String key, double from, double to)",
    "name": "addRange",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder",
      "name": "RangeAggregationBuilder",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder",
      "name": "org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "key"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "from"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "to"
      }
    ],
    "equivalence": {
      "comment": "Add a new range to this aggregation.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "addUnboundedTo(java.lang.String key, double to)",
    "name": "addUnboundedTo",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder",
      "name": "RangeAggregationBuilder",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder",
      "name": "org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "key"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "to"
      }
    ],
    "equivalence": {
      "comment": "Add a new range with no lower bound.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]