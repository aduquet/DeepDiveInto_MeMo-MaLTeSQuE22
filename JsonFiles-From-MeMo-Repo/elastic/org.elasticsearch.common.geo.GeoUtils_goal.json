[
  {
    "signature": "isValidLongitude(double longitude)",
    "name": "isValidLongitude",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.common.geo.GeoUtils",
      "name": "GeoUtils",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.common.geo.GeoUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "longitude"
      }
    ],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "normalizeLat(double lat)",
    "name": "normalizeLat",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.common.geo.GeoUtils",
      "name": "GeoUtils",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.common.geo.GeoUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "lat"
      }
    ],
    "equivalence": {
      "comment": "Normalize latitude to lie within the -90 to 90 (both inclusive) range.  Note: You should not normalize longitude and latitude separately, because when normalizing latitude it may be necessary to add a shift of 180&deg; in the longitude. For this purpose, you should call the #normalizePoint(GeoPoint) function.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "rectangleContainsPoint(org.apache.lucene.geo.Rectangle r, double lat, double lon)",
    "name": "rectangleContainsPoint",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.common.geo.GeoUtils",
      "name": "GeoUtils",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.common.geo.GeoUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.lucene.geo.Rectangle",
          "name": "Rectangle",
          "isArray": false
        },
        "name": "r"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "lat"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "lon"
      }
    ],
    "equivalence": {
      "comment": "todo: move this to lucene Rectangle class",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "quadTreeCellWidth(int level)",
    "name": "quadTreeCellWidth",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.common.geo.GeoUtils",
      "name": "GeoUtils",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.common.geo.GeoUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "level"
      }
    ],
    "equivalence": {
      "comment": "Calculate the width (in meters) of quadtree cells at a specific level",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "parseGeoPoint(org.elasticsearch.common.xcontent.XContentParser parser)",
    "name": "parseGeoPoint",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.common.geo.GeoUtils",
      "name": "GeoUtils",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.common.geo.GeoUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.elasticsearch.common.geo.GeoPoint",
      "name": "org.elasticsearch.common.geo.GeoPoint",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.elasticsearch.common.xcontent.XContentParser",
          "name": "XContentParser",
          "isArray": false
        },
        "name": "parser"
      }
    ],
    "equivalence": {
      "comment": "Parse a GeoPoint with a XContentParser:",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "parseGeoPoint(org.elasticsearch.common.xcontent.XContentParser parser, org.elasticsearch.common.geo.GeoPoint point)",
    "name": "parseGeoPoint",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.common.geo.GeoUtils",
      "name": "GeoUtils",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.common.geo.GeoUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.elasticsearch.common.geo.GeoPoint",
      "name": "org.elasticsearch.common.geo.GeoPoint",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.elasticsearch.common.xcontent.XContentParser",
          "name": "XContentParser",
          "isArray": false
        },
        "name": "parser"
      },
      {
        "type": {
          "qualifiedName": "org.elasticsearch.common.geo.GeoPoint",
          "name": "GeoPoint",
          "isArray": false
        },
        "name": "point"
      }
    ],
    "equivalence": {
      "comment": "Parse a GeoPoint with a XContentParser. A geopoint has one of the following forms:  <li>Object: <pre>{&quot;lat&quot;: <i><latitude></i>, &quot;lon&quot;: <i><longitude></i>}</pre></li> <li>String: <pre>&quot;<i><latitude></i>,<i><longitude></i>&quot;</pre></li> <li>Geohash: <pre>&quot;<i><geohash></i>&quot;</pre></li> <li>Array: <pre>[<i><longitude></i>,<i><latitude></i>]</pre></li>",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "distanceValues(org.elasticsearch.common.geo.GeoDistance distance, org.elasticsearch.common.unit.DistanceUnit unit, org.elasticsearch.index.fielddata.MultiGeoPointValues geoPointValues, org.elasticsearch.common.geo.GeoPoint... fromPoints)",
    "name": "distanceValues",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.common.geo.GeoUtils",
      "name": "GeoUtils",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.common.geo.GeoUtils",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "org.elasticsearch.index.fielddata.SortedNumericDoubleValues",
      "name": "org.elasticsearch.index.fielddata.SortedNumericDoubleValues",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.elasticsearch.common.geo.GeoDistance",
          "name": "GeoDistance",
          "isArray": false
        },
        "name": "distance"
      },
      {
        "type": {
          "qualifiedName": "org.elasticsearch.common.unit.DistanceUnit",
          "name": "DistanceUnit",
          "isArray": false
        },
        "name": "unit"
      },
      {
        "type": {
          "qualifiedName": "org.elasticsearch.index.fielddata.MultiGeoPointValues",
          "name": "MultiGeoPointValues",
          "isArray": false
        },
        "name": "geoPointValues"
      },
      {
        "type": {
          "qualifiedName": "[Lorg.elasticsearch.common.geo.GeoPoint;",
          "name": "GeoPoint[]",
          "isArray": true
        },
        "name": "fromPoints"
      }
    ],
    "equivalence": {
      "comment": "Return a SortedNumericDoubleValues instance that returns the distances to a list of geo-points for each document.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "quadTreeLevelsForPrecision(java.lang.String distance)",
    "name": "quadTreeLevelsForPrecision",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.common.geo.GeoUtils",
      "name": "GeoUtils",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.common.geo.GeoUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "distance"
      }
    ],
    "equivalence": {
      "comment": "Calculate the number of levels needed for a specific precision. QuadTree cells will not exceed the specified size (diagonal) of the precision.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "geoHashCellHeight(int level)",
    "name": "geoHashCellHeight",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.common.geo.GeoUtils",
      "name": "GeoUtils",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.common.geo.GeoUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "level"
      }
    ],
    "equivalence": {
      "comment": "Calculate the height (in meters) of geohash cells at a specific level",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "quadTreeLevelsForPrecision(double meters)",
    "name": "quadTreeLevelsForPrecision",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.common.geo.GeoUtils",
      "name": "GeoUtils",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.common.geo.GeoUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "meters"
      }
    ],
    "equivalence": {
      "comment": "Calculate the number of levels needed for a specific precision. Quadtree cells will not exceed the specified size (diagonal) of the precision.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "geoHashLevelsForPrecision(double meters)",
    "name": "geoHashLevelsForPrecision",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.common.geo.GeoUtils",
      "name": "GeoUtils",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.common.geo.GeoUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "meters"
      }
    ],
    "equivalence": {
      "comment": "Calculate the number of levels needed for a specific precision. GeoHash cells will not exceed the specified size (diagonal) of the precision.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "geoHashCellSize(int level)",
    "name": "geoHashCellSize",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.common.geo.GeoUtils",
      "name": "GeoUtils",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.common.geo.GeoUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "level"
      }
    ],
    "equivalence": {
      "comment": "Calculate the size (in meters) of geohash cells at a specific level",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "geoHashLevelsForPrecision(java.lang.String distance)",
    "name": "geoHashLevelsForPrecision",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.common.geo.GeoUtils",
      "name": "GeoUtils",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.common.geo.GeoUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "distance"
      }
    ],
    "equivalence": {
      "comment": "Calculate the number of levels needed for a specific precision. GeoHash cells will not exceed the specified size (diagonal) of the precision.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "planeDistance(double lat1, double lon1, double lat2, double lon2)",
    "name": "planeDistance",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.common.geo.GeoUtils",
      "name": "GeoUtils",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.common.geo.GeoUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "lat1"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "lon1"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "lat2"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "lon2"
      }
    ],
    "equivalence": {
      "comment": "Return the distance (in meters) between 2 lat,lon geo points using a simple tangential plane this provides a faster alternative to GeoUtils#arcDistance but is inaccurate for distances greater than 4 decimal degrees",
      "kind": "FreeText",
      "condition": "methodResultID==(org.elasticsearch.common.geo.GeoUtils.arcDistance(args[0],args[1],args[2],args[3]))"
    }
  },
  {
    "signature": "normalizePoint(double[] lonLat)",
    "name": "normalizePoint",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.common.geo.GeoUtils",
      "name": "GeoUtils",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.common.geo.GeoUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "lonLat"
      }
    ],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "parseGeoPoint(java.lang.String data, org.elasticsearch.common.geo.GeoPoint point)",
    "name": "parseGeoPoint",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.common.geo.GeoUtils",
      "name": "GeoUtils",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.common.geo.GeoUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.elasticsearch.common.geo.GeoPoint",
      "name": "org.elasticsearch.common.geo.GeoPoint",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "data"
      },
      {
        "type": {
          "qualifiedName": "org.elasticsearch.common.geo.GeoPoint",
          "name": "GeoPoint",
          "isArray": false
        },
        "name": "point"
      }
    ],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "quadTreeCellHeight(int level)",
    "name": "quadTreeCellHeight",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.common.geo.GeoUtils",
      "name": "GeoUtils",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.common.geo.GeoUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "level"
      }
    ],
    "equivalence": {
      "comment": "Calculate the height (in meters) of quadtree cells at a specific level",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "normalizePoint(org.elasticsearch.common.geo.GeoPoint point)",
    "name": "normalizePoint",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.common.geo.GeoUtils",
      "name": "GeoUtils",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.common.geo.GeoUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.elasticsearch.common.geo.GeoPoint",
          "name": "GeoPoint",
          "isArray": false
        },
        "name": "point"
      }
    ],
    "equivalence": {
      "comment": "Normalize the geo Point for its coordinates to lie within their respective normalized ranges.  Note: A shift of 180&deg; is applied in the longitude if necessary, in order to normalize properly the latitude.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "maxRadialDistanceMeters(double centerLat, double centerLon)",
    "name": "maxRadialDistanceMeters",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.common.geo.GeoUtils",
      "name": "GeoUtils",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.common.geo.GeoUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "centerLat"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "centerLon"
      }
    ],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "normalizePoint(org.elasticsearch.common.geo.GeoPoint point, boolean normLat, boolean normLon)",
    "name": "normalizePoint",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.common.geo.GeoUtils",
      "name": "GeoUtils",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.common.geo.GeoUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.elasticsearch.common.geo.GeoPoint",
          "name": "GeoPoint",
          "isArray": false
        },
        "name": "point"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "normLat"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "normLon"
      }
    ],
    "equivalence": {
      "comment": "Normalize the geo Point for the given coordinates to lie within their respective normalized ranges.  You can control which coordinate gets normalized with the two flags.  Note: A shift of 180&deg; is applied in the longitude if necessary, in order to normalize properly the latitude. If normalizing latitude but not longitude, it is assumed that the longitude is in the form x+k*360, with x in ]-180;180], and k is meaningful to the application. Therefore x will be adjusted while keeping k preserved.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "quadTreeCellSize(int level)",
    "name": "quadTreeCellSize",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.common.geo.GeoUtils",
      "name": "GeoUtils",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.common.geo.GeoUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "level"
      }
    ],
    "equivalence": {
      "comment": "Calculate the size (in meters) of quadtree cells at a specific level",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "arcDistance(double lat1, double lon1, double lat2, double lon2)",
    "name": "arcDistance",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.common.geo.GeoUtils",
      "name": "GeoUtils",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.common.geo.GeoUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "lat1"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "lon1"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "lat2"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "lon2"
      }
    ],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "normalizeLon(double lon)",
    "name": "normalizeLon",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.common.geo.GeoUtils",
      "name": "GeoUtils",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.common.geo.GeoUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "lon"
      }
    ],
    "equivalence": {
      "comment": "Normalize longitude to lie within the -180 (exclusive) to 180 (inclusive) range.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "geoHashCellWidth(int level)",
    "name": "geoHashCellWidth",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.common.geo.GeoUtils",
      "name": "GeoUtils",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.common.geo.GeoUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "level"
      }
    ],
    "equivalence": {
      "comment": "Calculate the width (in meters) of geohash cells at a specific level",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "isValidLatitude(double latitude)",
    "name": "isValidLatitude",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.common.geo.GeoUtils",
      "name": "GeoUtils",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.common.geo.GeoUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "latitude"
      }
    ],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "normalizePoint(double[] lonLat, boolean normLon, boolean normLat)",
    "name": "normalizePoint",
    "containingClass": {
      "qualifiedName": "org.elasticsearch.common.geo.GeoUtils",
      "name": "GeoUtils",
      "isArray": false
    },
    "targetClass": "org.elasticsearch.common.geo.GeoUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "lonLat"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "normLon"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "normLat"
      }
    ],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  }
]