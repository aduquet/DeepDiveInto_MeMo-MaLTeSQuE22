[
  {
    "signature": "getGlobal()",
    "name": "getGlobal",
    "containingClass": {
      "qualifiedName": "com.google.gwt.regexp.shared.RegExp",
      "name": "RegExp",
      "isArray": false
    },
    "targetClass": "com.google.gwt.regexp.shared.RegExp",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Returns whether the regular expression captures all occurrences of the pattern.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "compile(java.lang.String pattern, java.lang.String flags)",
    "name": "compile",
    "containingClass": {
      "qualifiedName": "com.google.gwt.regexp.shared.RegExp",
      "name": "RegExp",
      "isArray": false
    },
    "targetClass": "com.google.gwt.regexp.shared.RegExp",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.gwt.regexp.shared.RegExp",
      "name": "com.google.gwt.regexp.shared.RegExp",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "pattern"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "flags"
      }
    ],
    "equivalence": {
      "comment": "Creates a regular expression object from a pattern using the given flags.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "split(java.lang.String input)",
    "name": "split",
    "containingClass": {
      "qualifiedName": "com.google.gwt.regexp.shared.RegExp",
      "name": "RegExp",
      "isArray": false
    },
    "targetClass": "com.google.gwt.regexp.shared.RegExp",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.gwt.regexp.shared.SplitResult",
      "name": "com.google.gwt.regexp.shared.SplitResult",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "input"
      }
    ],
    "equivalence": {
      "comment": "Splits the input string around matches of the regular expression. If the regular expression is completely empty, splits the input string into its constituent characters. If the regular expression is not empty but matches an empty string, the results are not well defined.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "exec(java.lang.String input)",
    "name": "exec",
    "containingClass": {
      "qualifiedName": "com.google.gwt.regexp.shared.RegExp",
      "name": "RegExp",
      "isArray": false
    },
    "targetClass": "com.google.gwt.regexp.shared.RegExp",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.gwt.regexp.shared.MatchResult",
      "name": "com.google.gwt.regexp.shared.MatchResult",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "input"
      }
    ],
    "equivalence": {
      "comment": "Applies the regular expression to the given string. This call affects the value returned by #getLastIndex() if the global flag is set.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "split(java.lang.String input, int limit)",
    "name": "split",
    "containingClass": {
      "qualifiedName": "com.google.gwt.regexp.shared.RegExp",
      "name": "RegExp",
      "isArray": false
    },
    "targetClass": "com.google.gwt.regexp.shared.RegExp",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.gwt.regexp.shared.SplitResult",
      "name": "com.google.gwt.regexp.shared.SplitResult",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "input"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "limit"
      }
    ],
    "equivalence": {
      "comment": "Splits the input string around matches of the regular expression. If the regular expression is completely empty, splits the input string into its constituent characters. If the regular expression is not empty but matches an empty string, the results are not well defined. Note: There are some browser inconsistencies with this implementation, as it is delegated to the browser, and no browser follows the spec completely. A major difference is that IE will exclude empty strings in the result.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getIgnoreCase()",
    "name": "getIgnoreCase",
    "containingClass": {
      "qualifiedName": "com.google.gwt.regexp.shared.RegExp",
      "name": "RegExp",
      "isArray": false
    },
    "targetClass": "com.google.gwt.regexp.shared.RegExp",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Returns whether the regular expression ignores case.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setLastIndex(int lastIndex)",
    "name": "setLastIndex",
    "containingClass": {
      "qualifiedName": "com.google.gwt.regexp.shared.RegExp",
      "name": "RegExp",
      "isArray": false
    },
    "targetClass": "com.google.gwt.regexp.shared.RegExp",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "lastIndex"
      }
    ],
    "equivalence": {
      "comment": "Sets the zero-based position at which to start the next match.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getLastIndex()",
    "name": "getLastIndex",
    "containingClass": {
      "qualifiedName": "com.google.gwt.regexp.shared.RegExp",
      "name": "RegExp",
      "isArray": false
    },
    "targetClass": "com.google.gwt.regexp.shared.RegExp",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Returns the zero-based position at which to start the next match. The return value is not defined if the global flag is not set. After a call to #exec(String) or #test(String), this method returns the next position following the most recent match. @see #getGlobal()",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "replace(java.lang.String input, java.lang.String replacement)",
    "name": "replace",
    "containingClass": {
      "qualifiedName": "com.google.gwt.regexp.shared.RegExp",
      "name": "RegExp",
      "isArray": false
    },
    "targetClass": "com.google.gwt.regexp.shared.RegExp",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "input"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "replacement"
      }
    ],
    "equivalence": {
      "comment": "Returns the input string with the part(s) matching the regular expression replaced with the replacement string. If the global flag is set, replaces all matches of the regular expression. Otherwise, replaces the first match of the regular expression. As per Javascript semantics, backslashes in the replacement string get no special treatment, but the replacement string can use the following special patterns:  <li>$1, $2, ... $99 - inserts the n'th group matched by the regular expression. <li>$& - inserts the entire string matched by the regular expression. <li>$$ - inserts a $.  Note: $` and $' are *not* supported in the pure Java implementation, and throw an exception.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getMultiline()",
    "name": "getMultiline",
    "containingClass": {
      "qualifiedName": "com.google.gwt.regexp.shared.RegExp",
      "name": "RegExp",
      "isArray": false
    },
    "targetClass": "com.google.gwt.regexp.shared.RegExp",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Returns whether '$' and '^' match line returns ('\\n' and '\\r') in addition to the beginning or end of the string.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getSource()",
    "name": "getSource",
    "containingClass": {
      "qualifiedName": "com.google.gwt.regexp.shared.RegExp",
      "name": "RegExp",
      "isArray": false
    },
    "targetClass": "com.google.gwt.regexp.shared.RegExp",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Returns the pattern string of the regular expression.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "test(java.lang.String input)",
    "name": "test",
    "containingClass": {
      "qualifiedName": "com.google.gwt.regexp.shared.RegExp",
      "name": "RegExp",
      "isArray": false
    },
    "targetClass": "com.google.gwt.regexp.shared.RegExp",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "input"
      }
    ],
    "equivalence": {
      "comment": "Determines if the regular expression matches the given string. This call affects the value returned by #getLastIndex() if the global flag is set. Equivalent to: exec(input) != null",
      "kind": "FreeText",
      "condition": "methodResultID==( receiverObjectClone.exec(args[0]) != null )"
    }
  },
  {
    "signature": "compile(java.lang.String pattern)",
    "name": "compile",
    "containingClass": {
      "qualifiedName": "com.google.gwt.regexp.shared.RegExp",
      "name": "RegExp",
      "isArray": false
    },
    "targetClass": "com.google.gwt.regexp.shared.RegExp",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.gwt.regexp.shared.RegExp",
      "name": "com.google.gwt.regexp.shared.RegExp",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "pattern"
      }
    ],
    "equivalence": {
      "comment": "Creates a regular expression object from a pattern with no flags.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]