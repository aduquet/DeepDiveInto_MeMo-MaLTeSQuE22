[
  {
    "signature": "count(java.lang.Object element)",
    "name": "count",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.TreeMultiset",
      "name": "TreeMultiset",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.TreeMultiset",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "element",
        "nullable": true
      }
    ],
    "equivalence": {
      "member": "count(java.lang.Object element)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "com.google.common.collect.TreeMultiset(java.util.Comparator<? super E> comparator)",
    "name": "com.google.common.collect.TreeMultiset",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.TreeMultiset",
      "name": "TreeMultiset",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.TreeMultiset",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Comparator",
          "name": "Comparator",
          "isArray": false
        },
        "name": "comparator"
      }
    ],
    "equivalence": {
      "member": "com.google.common.collect.TreeMultiset(java.util.Comparator<? super E> comparator)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setCount(E element, int oldCount, int newCount)",
    "name": "setCount",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.TreeMultiset",
      "name": "TreeMultiset",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.TreeMultiset",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "element",
        "nullable": true
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "oldCount"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "newCount"
      }
    ],
    "equivalence": {
      "member": "setCount(E element, int oldCount, int newCount)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "size()",
    "name": "size",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.TreeMultiset",
      "name": "TreeMultiset",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.TreeMultiset",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "size()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "remove(java.lang.Object element, int occurrences)",
    "name": "remove",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.TreeMultiset",
      "name": "TreeMultiset",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.TreeMultiset",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "element",
        "nullable": true
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "occurrences"
      }
    ],
    "equivalence": {
      "member": "remove(java.lang.Object element, int occurrences)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "tailMultiset(E lowerBound, com.google.common.collect.BoundType boundType)",
    "name": "tailMultiset",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.TreeMultiset",
      "name": "TreeMultiset",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.TreeMultiset",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.SortedMultiset<E>",
      "name": "com.google.common.collect.SortedMultiset<E>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "lowerBound",
        "nullable": true
      },
      {
        "type": {
          "qualifiedName": "com.google.common.collect.BoundType",
          "name": "BoundType",
          "isArray": false
        },
        "name": "boundType"
      }
    ],
    "equivalence": {
      "member": "tailMultiset(E lowerBound, com.google.common.collect.BoundType boundType)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "distinctElements()",
    "name": "distinctElements",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.TreeMultiset",
      "name": "TreeMultiset",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.TreeMultiset",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "distinctElements()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "headMultiset(E upperBound, com.google.common.collect.BoundType boundType)",
    "name": "headMultiset",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.TreeMultiset",
      "name": "TreeMultiset",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.TreeMultiset",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.SortedMultiset<E>",
      "name": "com.google.common.collect.SortedMultiset<E>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "upperBound",
        "nullable": true
      },
      {
        "type": {
          "qualifiedName": "com.google.common.collect.BoundType",
          "name": "BoundType",
          "isArray": false
        },
        "name": "boundType"
      }
    ],
    "equivalence": {
      "member": "headMultiset(E upperBound, com.google.common.collect.BoundType boundType)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setCount(E element, int count)",
    "name": "setCount",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.TreeMultiset",
      "name": "TreeMultiset",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.TreeMultiset",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "element",
        "nullable": true
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "count"
      }
    ],
    "equivalence": {
      "member": "setCount(E element, int count)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "add(E element, int occurrences)",
    "name": "add",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.TreeMultiset",
      "name": "TreeMultiset",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.TreeMultiset",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "element",
        "nullable": true
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "occurrences"
      }
    ],
    "equivalence": {
      "member": "add(E element, int occurrences)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "create(java.util.Comparator<? super E> comparator)",
    "name": "create",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.TreeMultiset",
      "name": "TreeMultiset",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.TreeMultiset",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.TreeMultiset<E>",
      "name": "com.google.common.collect.TreeMultiset<E>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Comparator",
          "name": "Comparator",
          "isArray": false
        },
        "name": "comparator",
        "nullable": true
      }
    ],
    "equivalence": {
      "member": "create(java.util.Comparator<? super E> comparator)",
      "comment": "Creates a new, empty multiset, sorted according to the specified comparator. All elements inserted into the multiset must be mutually comparable by the specified comparator: comparator.compare(e1, e2) must not throw a ClassCastException for any elements e1 and e2 in the multiset. If the user attempts to add an element to the multiset that violates this constraint, the add(Object) call will throw a ClassCastException.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "entryIterator()",
    "name": "entryIterator",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.TreeMultiset",
      "name": "TreeMultiset",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.TreeMultiset",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Iterator<com.google.common.collect.Multiset$Entry<E>>",
      "name": "java.util.Iterator<com.google.common.collect.Multiset$Entry<E>>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "entryIterator()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "create(java.lang.Iterable<? extends E> elements)",
    "name": "create",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.TreeMultiset",
      "name": "TreeMultiset",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.TreeMultiset",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.TreeMultiset<E>",
      "name": "com.google.common.collect.TreeMultiset<E>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "elements"
      }
    ],
    "equivalence": {
      "member": "create(java.lang.Iterable<? extends E> elements)",
      "comment": "Creates an empty multiset containing the given initial elements, sorted according to the elements' natural order. This implementation is highly efficient when elements is itself a Multiset. The type specification is <E extends Comparable>, instead of the more specific <E extends Comparable<? super E>>, to support classes defined without generics.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "descendingEntryIterator()",
    "name": "descendingEntryIterator",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.TreeMultiset",
      "name": "TreeMultiset",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.TreeMultiset",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Iterator<com.google.common.collect.Multiset$Entry<E>>",
      "name": "java.util.Iterator<com.google.common.collect.Multiset$Entry<E>>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "descendingEntryIterator()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "com.google.common.collect.TreeMultiset(com.google.common.collect.TreeMultiset$Reference<com.google.common.collect.TreeMultiset$AvlNode<E>> rootReference, com.google.common.collect.GeneralRange<E> range, com.google.common.collect.TreeMultiset$AvlNode<E> endLink)",
    "name": "com.google.common.collect.TreeMultiset",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.TreeMultiset",
      "name": "TreeMultiset",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.TreeMultiset",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.collect.TreeMultiset$Reference",
          "name": "Reference",
          "isArray": false
        },
        "name": "rootReference"
      },
      {
        "type": {
          "qualifiedName": "com.google.common.collect.GeneralRange",
          "name": "GeneralRange",
          "isArray": false
        },
        "name": "range"
      },
      {
        "type": {
          "qualifiedName": "com.google.common.collect.TreeMultiset$AvlNode",
          "name": "AvlNode",
          "isArray": false
        },
        "name": "endLink"
      }
    ],
    "equivalence": {
      "member": "com.google.common.collect.TreeMultiset(com.google.common.collect.TreeMultiset$Reference<com.google.common.collect.TreeMultiset$AvlNode<E>> rootReference, com.google.common.collect.GeneralRange<E> range, com.google.common.collect.TreeMultiset$AvlNode<E> endLink)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "create()",
    "name": "create",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.TreeMultiset",
      "name": "TreeMultiset",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.TreeMultiset",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.TreeMultiset<E>",
      "name": "com.google.common.collect.TreeMultiset<E>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "create()",
      "comment": "Creates a new, empty multiset, sorted according to the elements' natural order. All elements inserted into the multiset must implement the Comparable interface. Furthermore, all such elements must be mutually comparable: e1.compareTo(e2) must not throw a ClassCastException for any elements e1 and e2 in the multiset. If the user attempts to add an element to the multiset that violates this constraint (for example, the user attempts to add a string element to a set whose elements are integers), the add(Object) call will throw a ClassCastException. The type specification is <E extends Comparable>, instead of the more specific <E extends Comparable<? super E>>, to support classes defined without generics.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "distinctElements(com.google.common.collect.TreeMultiset$AvlNode<?> node)",
    "name": "distinctElements",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.TreeMultiset",
      "name": "TreeMultiset",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.TreeMultiset",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.collect.TreeMultiset$AvlNode",
          "name": "AvlNode",
          "isArray": false
        },
        "name": "node",
        "nullable": true
      }
    ],
    "equivalence": {
      "member": "distinctElements(com.google.common.collect.TreeMultiset$AvlNode<?> node)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  }
]