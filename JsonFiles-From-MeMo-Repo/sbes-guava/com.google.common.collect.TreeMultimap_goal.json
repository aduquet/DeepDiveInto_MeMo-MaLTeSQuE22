[
  {
    "signature": "create()",
    "name": "create",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.TreeMultimap",
      "name": "TreeMultimap",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.TreeMultimap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.TreeMultimap<K, V>",
      "name": "com.google.common.collect.TreeMultimap<K, V>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "create()",
      "comment": "Creates an empty TreeMultimap ordered by the natural ordering of its keys and values.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "unmodifiableCollectionSubclass(java.util.Collection<V> collection)",
    "name": "unmodifiableCollectionSubclass",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.TreeMultimap",
      "name": "TreeMultimap",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.TreeMultimap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Collection<V>",
      "name": "java.util.Collection<V>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "collection"
      }
    ],
    "equivalence": {
      "member": "unmodifiableCollectionSubclass(java.util.Collection<V> collection)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "keyComparator()",
    "name": "keyComparator",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.TreeMultimap",
      "name": "TreeMultimap",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.TreeMultimap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Comparator<? super K>",
      "name": "java.util.Comparator<? super K>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "keyComparator()",
      "comment": "Returns the comparator that orders the multimap keys.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "wrapCollection(K key, java.util.Collection<V> collection)",
    "name": "wrapCollection",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.TreeMultimap",
      "name": "TreeMultimap",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.TreeMultimap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Collection<V>",
      "name": "java.util.Collection<V>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "key"
      },
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "collection"
      }
    ],
    "equivalence": {
      "member": "wrapCollection(K key, java.util.Collection<V> collection)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "asMap()",
    "name": "asMap",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.TreeMultimap",
      "name": "TreeMultimap",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.TreeMultimap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.NavigableMap<K, java.util.Collection<V>>",
      "name": "java.util.NavigableMap<K, java.util.Collection<V>>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "asMap()",
      "comment": "{@inheritDoc} Because a TreeMultimap has unique sorted keys, this method returns a NavigableMap, instead of the java.util.Map specified in the Multimap interface.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "createKeySet()",
    "name": "createKeySet",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.TreeMultimap",
      "name": "TreeMultimap",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.TreeMultimap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.NavigableSet<K>",
      "name": "java.util.NavigableSet<K>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "createKeySet()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "create(com.google.common.collect.Multimap<? extends K, ? extends V> multimap)",
    "name": "create",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.TreeMultimap",
      "name": "TreeMultimap",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.TreeMultimap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.TreeMultimap<K, V>",
      "name": "com.google.common.collect.TreeMultimap<K, V>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.collect.Multimap",
          "name": "Multimap",
          "isArray": false
        },
        "name": "multimap"
      }
    ],
    "equivalence": {
      "member": "create(com.google.common.collect.Multimap<? extends K, ? extends V> multimap)",
      "comment": "Constructs a TreeMultimap, ordered by the natural ordering of its keys and values, with the same mappings as the specified multimap.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "valueComparator()",
    "name": "valueComparator",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.TreeMultimap",
      "name": "TreeMultimap",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.TreeMultimap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Comparator<? super V>",
      "name": "java.util.Comparator<? super V>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "valueComparator()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "create(java.util.Comparator<? super K> keyComparator, java.util.Comparator<? super V> valueComparator)",
    "name": "create",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.TreeMultimap",
      "name": "TreeMultimap",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.TreeMultimap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.TreeMultimap<K, V>",
      "name": "com.google.common.collect.TreeMultimap<K, V>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Comparator",
          "name": "Comparator",
          "isArray": false
        },
        "name": "keyComparator"
      },
      {
        "type": {
          "qualifiedName": "java.util.Comparator",
          "name": "Comparator",
          "isArray": false
        },
        "name": "valueComparator"
      }
    ],
    "equivalence": {
      "member": "create(java.util.Comparator<? super K> keyComparator, java.util.Comparator<? super V> valueComparator)",
      "comment": "Creates an empty TreeMultimap instance using explicit comparators. Neither comparator may be null; use Ordering#natural() to specify natural order.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "com.google.common.collect.TreeMultimap(java.util.Comparator<? super K> keyComparator, java.util.Comparator<? super V> valueComparator)",
    "name": "com.google.common.collect.TreeMultimap",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.TreeMultimap",
      "name": "TreeMultimap",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.TreeMultimap",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Comparator",
          "name": "Comparator",
          "isArray": false
        },
        "name": "keyComparator"
      },
      {
        "type": {
          "qualifiedName": "java.util.Comparator",
          "name": "Comparator",
          "isArray": false
        },
        "name": "valueComparator"
      }
    ],
    "equivalence": {
      "member": "com.google.common.collect.TreeMultimap(java.util.Comparator<? super K> keyComparator, java.util.Comparator<? super V> valueComparator)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "backingMap()",
    "name": "backingMap",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.TreeMultimap",
      "name": "TreeMultimap",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.TreeMultimap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.NavigableMap<K, java.util.Collection<V>>",
      "name": "java.util.NavigableMap<K, java.util.Collection<V>>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "backingMap()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "get(K key)",
    "name": "get",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.TreeMultimap",
      "name": "TreeMultimap",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.TreeMultimap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.NavigableSet<V>",
      "name": "java.util.NavigableSet<V>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "key",
        "nullable": true
      }
    ],
    "equivalence": {
      "member": "get(K key)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "createAsMap()",
    "name": "createAsMap",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.TreeMultimap",
      "name": "TreeMultimap",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.TreeMultimap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.NavigableMap<K, java.util.Collection<V>>",
      "name": "java.util.NavigableMap<K, java.util.Collection<V>>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "createAsMap()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "createCollection()",
    "name": "createCollection",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.TreeMultimap",
      "name": "TreeMultimap",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.TreeMultimap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.SortedSet<V>",
      "name": "java.util.SortedSet<V>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "createCollection()",
      "comment": "{@inheritDoc} Creates an empty TreeSet for a collection of values for one key.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "createCollection(K key)",
    "name": "createCollection",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.TreeMultimap",
      "name": "TreeMultimap",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.TreeMultimap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Collection<V>",
      "name": "java.util.Collection<V>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "key",
        "nullable": true
      }
    ],
    "equivalence": {
      "member": "createCollection(K key)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "keySet()",
    "name": "keySet",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.TreeMultimap",
      "name": "TreeMultimap",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.TreeMultimap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.NavigableSet<K>",
      "name": "java.util.NavigableSet<K>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "keySet()",
      "comment": "{@inheritDoc} Because a TreeMultimap has unique sorted keys, this method returns a NavigableSet, instead of the java.util.Set specified in the Multimap interface.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]