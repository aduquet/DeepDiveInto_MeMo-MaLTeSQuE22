[
  {
    "signature": "replaceValues(K key, java.lang.Iterable<? extends V> values)",
    "name": "replaceValues",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.AbstractMapBasedMultimap",
      "name": "AbstractMapBasedMultimap",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.AbstractMapBasedMultimap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Collection<V>",
      "name": "java.util.Collection<V>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "key",
        "nullable": true
      },
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "values"
      }
    ],
    "equivalence": {
      "member": "replaceValues(K key, java.lang.Iterable<? extends V> values)",
      "comment": "{@inheritDoc} The returned collection is immutable.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "get(K key)",
    "name": "get",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.AbstractMapBasedMultimap",
      "name": "AbstractMapBasedMultimap",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.AbstractMapBasedMultimap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Collection<V>",
      "name": "java.util.Collection<V>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "key",
        "nullable": true
      }
    ],
    "equivalence": {
      "member": "get(K key)",
      "comment": "{@inheritDoc} The returned collection is not serializable.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setMap(java.util.Map<K, java.util.Collection<V>> map)",
    "name": "setMap",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.AbstractMapBasedMultimap",
      "name": "AbstractMapBasedMultimap",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.AbstractMapBasedMultimap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Map",
          "name": "Map",
          "isArray": false
        },
        "name": "map"
      }
    ],
    "equivalence": {
      "member": "setMap(java.util.Map<K, java.util.Collection<V>> map)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "entries()",
    "name": "entries",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.AbstractMapBasedMultimap",
      "name": "AbstractMapBasedMultimap",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.AbstractMapBasedMultimap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Collection<java.util.Map$Entry<K, V>>",
      "name": "java.util.Collection<java.util.Map$Entry<K, V>>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "entries()",
      "comment": "{@inheritDoc} The iterator generated by the returned collection traverses the values for one key, followed by the values of a second key, and so on. Each entry is an immutable snapshot of a key-value mapping in the multimap, taken at the time the entry is returned by a method call to the collection or its iterator.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "wrapCollection(K key, java.util.Collection<V> collection)",
    "name": "wrapCollection",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.AbstractMapBasedMultimap",
      "name": "AbstractMapBasedMultimap",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.AbstractMapBasedMultimap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Collection<V>",
      "name": "java.util.Collection<V>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "key",
        "nullable": true
      },
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "collection"
      }
    ],
    "equivalence": {
      "member": "wrapCollection(K key, java.util.Collection<V> collection)",
      "comment": "Generates a decorated collection that remains consistent with the values in the multimap for the provided key. Changes to the multimap may alter the returned collection, and vice versa.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "entryIterator()",
    "name": "entryIterator",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.AbstractMapBasedMultimap",
      "name": "AbstractMapBasedMultimap",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.AbstractMapBasedMultimap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Iterator<java.util.Map$Entry<K, V>>",
      "name": "java.util.Iterator<java.util.Map$Entry<K, V>>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "entryIterator()",
      "comment": "Returns an iterator across all key-value map entries, used by entries().iterator() and values().iterator(). The default behavior, which traverses the values for one key, the values for a second key, and so on, suffices for most AbstractMapBasedMultimap implementations.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "createCollection()",
    "name": "createCollection",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.AbstractMapBasedMultimap",
      "name": "AbstractMapBasedMultimap",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.AbstractMapBasedMultimap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Collection<V>",
      "name": "java.util.Collection<V>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "createCollection()",
      "comment": "Creates the collection of values for a single key. Collections with weak, soft, or phantom references are not supported. Each call to createCollection should create a new instance. The returned collection class determines whether duplicate key-value pairs are allowed.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "unmodifiableCollectionSubclass(java.util.Collection<V> collection)",
    "name": "unmodifiableCollectionSubclass",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.AbstractMapBasedMultimap",
      "name": "AbstractMapBasedMultimap",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.AbstractMapBasedMultimap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Collection<V>",
      "name": "java.util.Collection<V>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "collection"
      }
    ],
    "equivalence": {
      "member": "unmodifiableCollectionSubclass(java.util.Collection<V> collection)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "createKeySet()",
    "name": "createKeySet",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.AbstractMapBasedMultimap",
      "name": "AbstractMapBasedMultimap",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.AbstractMapBasedMultimap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Set<K>",
      "name": "java.util.Set<K>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "createKeySet()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "createAsMap()",
    "name": "createAsMap",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.AbstractMapBasedMultimap",
      "name": "AbstractMapBasedMultimap",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.AbstractMapBasedMultimap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Map<K, java.util.Collection<V>>",
      "name": "java.util.Map<K, java.util.Collection<V>>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "createAsMap()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "createUnmodifiableEmptyCollection()",
    "name": "createUnmodifiableEmptyCollection",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.AbstractMapBasedMultimap",
      "name": "AbstractMapBasedMultimap",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.AbstractMapBasedMultimap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Collection<V>",
      "name": "java.util.Collection<V>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "createUnmodifiableEmptyCollection()",
      "comment": "Creates an unmodifiable, empty collection of values. This is used in #removeAll on an empty key.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "size()",
    "name": "size",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.AbstractMapBasedMultimap",
      "name": "AbstractMapBasedMultimap",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.AbstractMapBasedMultimap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "size()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "values()",
    "name": "values",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.AbstractMapBasedMultimap",
      "name": "AbstractMapBasedMultimap",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.AbstractMapBasedMultimap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Collection<V>",
      "name": "java.util.Collection<V>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "values()",
      "comment": "{@inheritDoc} The iterator generated by the returned collection traverses the values for one key, followed by the values of a second key, and so on.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "removeAll(java.lang.Object key)",
    "name": "removeAll",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.AbstractMapBasedMultimap",
      "name": "AbstractMapBasedMultimap",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.AbstractMapBasedMultimap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Collection<V>",
      "name": "java.util.Collection<V>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "key",
        "nullable": true
      }
    ],
    "equivalence": {
      "member": "removeAll(java.lang.Object key)",
      "comment": "{@inheritDoc} The returned collection is immutable.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "valueIterator()",
    "name": "valueIterator",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.AbstractMapBasedMultimap",
      "name": "AbstractMapBasedMultimap",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.AbstractMapBasedMultimap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Iterator<V>",
      "name": "java.util.Iterator<V>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "valueIterator()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "clear()",
    "name": "clear",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.AbstractMapBasedMultimap",
      "name": "AbstractMapBasedMultimap",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.AbstractMapBasedMultimap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "clear()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "com.google.common.collect.AbstractMapBasedMultimap(java.util.Map<K, java.util.Collection<V>> map)",
    "name": "com.google.common.collect.AbstractMapBasedMultimap",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.AbstractMapBasedMultimap",
      "name": "AbstractMapBasedMultimap",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.AbstractMapBasedMultimap",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Map",
          "name": "Map",
          "isArray": false
        },
        "name": "map"
      }
    ],
    "equivalence": {
      "member": "com.google.common.collect.AbstractMapBasedMultimap(java.util.Map<K, java.util.Collection<V>> map)",
      "comment": "Creates a new multimap that uses the provided map.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "backingMap()",
    "name": "backingMap",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.AbstractMapBasedMultimap",
      "name": "AbstractMapBasedMultimap",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.AbstractMapBasedMultimap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Map<K, java.util.Collection<V>>",
      "name": "java.util.Map<K, java.util.Collection<V>>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "backingMap()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "containsKey(java.lang.Object key)",
    "name": "containsKey",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.AbstractMapBasedMultimap",
      "name": "AbstractMapBasedMultimap",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.AbstractMapBasedMultimap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "key",
        "nullable": true
      }
    ],
    "equivalence": {
      "member": "containsKey(java.lang.Object key)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "put(K key, V value)",
    "name": "put",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.AbstractMapBasedMultimap",
      "name": "AbstractMapBasedMultimap",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.AbstractMapBasedMultimap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "key",
        "nullable": true
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "value",
        "nullable": true
      }
    ],
    "equivalence": {
      "member": "put(K key, V value)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "createCollection(K key)",
    "name": "createCollection",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.AbstractMapBasedMultimap",
      "name": "AbstractMapBasedMultimap",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.AbstractMapBasedMultimap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Collection<V>",
      "name": "java.util.Collection<V>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "key",
        "nullable": true
      }
    ],
    "equivalence": {
      "member": "createCollection(K key)",
      "comment": "Creates the collection of values for an explicitly provided key. By default, it simply calls #createCollection(), which is the correct behavior for most implementations. The LinkedHashMultimap class overrides it.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]