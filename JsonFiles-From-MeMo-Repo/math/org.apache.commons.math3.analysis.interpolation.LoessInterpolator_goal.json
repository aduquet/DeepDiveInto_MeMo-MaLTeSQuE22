[
  {
    "signature": "org.apache.commons.math3.analysis.interpolation.LoessInterpolator()",
    "name": "org.apache.commons.math3.analysis.interpolation.LoessInterpolator",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.analysis.interpolation.LoessInterpolator",
      "name": "LoessInterpolator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.analysis.interpolation.LoessInterpolator",
    "isVarArgs": false,
    "parameters": [],
    "equivalence": {
      "comment": "Constructs a new LoessInterpolator with a bandwidth of #DEFAULT_BANDWIDTH, #DEFAULT_ROBUSTNESS_ITERS robustness iterations and an accuracy of {#link #DEFAULT_ACCURACY}. See #LoessInterpolator(double, int, double) for an explanation of the parameters.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "smooth(double[] xval, double[] yval)",
    "name": "smooth",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.analysis.interpolation.LoessInterpolator",
      "name": "LoessInterpolator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.analysis.interpolation.LoessInterpolator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double[]",
      "name": "double[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "xval"
      },
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "yval"
      }
    ],
    "equivalence": {
      "comment": "Compute a loess fit on the data at the original abscissae.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "org.apache.commons.math3.analysis.interpolation.LoessInterpolator(double bandwidth, int robustnessIters)",
    "name": "org.apache.commons.math3.analysis.interpolation.LoessInterpolator",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.analysis.interpolation.LoessInterpolator",
      "name": "LoessInterpolator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.analysis.interpolation.LoessInterpolator",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "bandwidth"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "robustnessIters"
      }
    ],
    "equivalence": {
      "comment": "Construct a new LoessInterpolator with given bandwidth and number of robustness iterations.  Calling this constructor is equivalent to calling {link #LoessInterpolator(double, int, double) LoessInterpolator(bandwidth, robustnessIters, LoessInterpolator.DEFAULT_ACCURACY)",
      "kind": "FreeText",
      "condition": "methodResultID.equals(new LoessInterpolator(args[0], args[1], LoessInterpolator.DEFAULT_ACCURACY))"
    }
  },
  {
    "signature": "org.apache.commons.math3.analysis.interpolation.LoessInterpolator(double bandwidth, int robustnessIters, double accuracy)",
    "name": "org.apache.commons.math3.analysis.interpolation.LoessInterpolator",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.analysis.interpolation.LoessInterpolator",
      "name": "LoessInterpolator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.analysis.interpolation.LoessInterpolator",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "bandwidth"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "robustnessIters"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "accuracy"
      }
    ],
    "equivalence": {
      "comment": "Construct a new LoessInterpolator with given bandwidth, number of robustness iterations and accuracy.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "interpolate(double[] xval, double[] yval)",
    "name": "interpolate",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.analysis.interpolation.LoessInterpolator",
      "name": "LoessInterpolator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.analysis.interpolation.LoessInterpolator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction",
      "name": "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "xval"
      },
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "yval"
      }
    ],
    "equivalence": {
      "comment": "Compute an interpolating function by performing a loess fit on the data at the original abscissae and then building a cubic spline with a org.apache.commons.math3.analysis.interpolation.SplineInterpolator on the resulting fit.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "smooth(double[] xval, double[] yval, double[] weights)",
    "name": "smooth",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.analysis.interpolation.LoessInterpolator",
      "name": "LoessInterpolator",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.analysis.interpolation.LoessInterpolator",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double[]",
      "name": "double[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "xval"
      },
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "yval"
      },
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "weights"
      }
    ],
    "equivalence": {
      "comment": "Compute a weighted loess fit on the data at the original abscissae.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]