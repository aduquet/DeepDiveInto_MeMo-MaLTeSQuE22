[
  {
    "signature": "mapAdd(double d)",
    "name": "mapAdd",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "RealVector",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.linear.RealVector",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "org.apache.commons.math3.linear.RealVector",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "d"
      }
    ],
    "equivalence": {
      "comment": "Add a value to each entry. Returns a new vector. Does not change instance data.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor visitor)",
    "name": "walkInDefaultOrder",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "RealVector",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.linear.RealVector",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.linear.RealVectorPreservingVisitor",
          "name": "RealVectorPreservingVisitor",
          "isArray": false
        },
        "name": "visitor"
      }
    ],
    "equivalence": {
      "comment": "Visits (but does not alter) all entries of this vector in default order (increasing index).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "mapSubtract(double d)",
    "name": "mapSubtract",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "RealVector",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.linear.RealVector",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "org.apache.commons.math3.linear.RealVector",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "d"
      }
    ],
    "equivalence": {
      "comment": "Subtract a value from each entry. Returns a new vector. Does not change instance data.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "mapDivideToSelf(double d)",
    "name": "mapDivideToSelf",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "RealVector",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.linear.RealVector",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "org.apache.commons.math3.linear.RealVector",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "d"
      }
    ],
    "equivalence": {
      "comment": "Divide each entry by the argument. The instance is changed in-place.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "mapDivide(double d)",
    "name": "mapDivide",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "RealVector",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.linear.RealVector",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "org.apache.commons.math3.linear.RealVector",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "d"
      }
    ],
    "equivalence": {
      "comment": "Divide each entry by the argument. Returns a new vector. Does not change instance data.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "checkVectorDimensions(int n)",
    "name": "checkVectorDimensions",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "RealVector",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.linear.RealVector",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "equivalence": {
      "comment": "Check if instance dimension is equal to some expected value.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "combineToSelf(double a, double b, org.apache.commons.math3.linear.RealVector y)",
    "name": "combineToSelf",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "RealVector",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.linear.RealVector",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "org.apache.commons.math3.linear.RealVector",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "b"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.linear.RealVector",
          "name": "RealVector",
          "isArray": false
        },
        "name": "y"
      }
    ],
    "equivalence": {
      "comment": "Updates this with the linear combination of this and y.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "mapAddToSelf(double d)",
    "name": "mapAddToSelf",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "RealVector",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.linear.RealVector",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "org.apache.commons.math3.linear.RealVector",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "d"
      }
    ],
    "equivalence": {
      "comment": "Add a value to each entry. The instance is changed in-place.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "checkIndices(int start, int end)",
    "name": "checkIndices",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "RealVector",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.linear.RealVector",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "start"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "end"
      }
    ],
    "equivalence": {
      "comment": "Checks that the indices of a subvector are valid.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor visitor, int start, int end)",
    "name": "walkInOptimizedOrder",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "RealVector",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.linear.RealVector",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.linear.RealVectorPreservingVisitor",
          "name": "RealVectorPreservingVisitor",
          "isArray": false
        },
        "name": "visitor"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "start"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "end"
      }
    ],
    "equivalence": {
      "comment": "Visits (but does not alter) some entries of this vector in optimized order. The order in which the entries are visited is selected so as to lead to the most efficient implementation; it might depend on the concrete implementation of this abstract class.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor visitor, int start, int end)",
    "name": "walkInOptimizedOrder",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "RealVector",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.linear.RealVector",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.linear.RealVectorChangingVisitor",
          "name": "RealVectorChangingVisitor",
          "isArray": false
        },
        "name": "visitor"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "start"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "end"
      }
    ],
    "equivalence": {
      "comment": "Visits (and possibly change) some entries of this vector in optimized order. The order in which the entries are visited is selected so as to lead to the most efficient implementation; it might depend on the concrete implementation of this abstract class.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setEntry(int index, double value)",
    "name": "setEntry",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "RealVector",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.linear.RealVector",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "value"
      }
    ],
    "equivalence": {
      "comment": "Set a single element.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "combine(double a, double b, org.apache.commons.math3.linear.RealVector y)",
    "name": "combine",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "RealVector",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.linear.RealVector",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "org.apache.commons.math3.linear.RealVector",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "b"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.linear.RealVector",
          "name": "RealVector",
          "isArray": false
        },
        "name": "y"
      }
    ],
    "equivalence": {
      "comment": "Returns a new vector representing a * this + b * y, the linear combination of this and y. Returns a new vector. Does not change instance data.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "append(org.apache.commons.math3.linear.RealVector v)",
    "name": "append",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "RealVector",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.linear.RealVector",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "org.apache.commons.math3.linear.RealVector",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.linear.RealVector",
          "name": "RealVector",
          "isArray": false
        },
        "name": "v"
      }
    ],
    "equivalence": {
      "comment": "Construct a new vector by appending a vector to this vector.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "unitize()",
    "name": "unitize",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "RealVector",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.linear.RealVector",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Converts this vector into a unit vector. The instance itself is changed by this method.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getL1Distance(org.apache.commons.math3.linear.RealVector v)",
    "name": "getL1Distance",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "RealVector",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.linear.RealVector",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.linear.RealVector",
          "name": "RealVector",
          "isArray": false
        },
        "name": "v"
      }
    ],
    "equivalence": {
      "comment": "Distance between two vectors. This method computes the distance consistent with L<sub>1</sub> norm, i.e. the sum of the absolute values of the elements differences.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction function)",
    "name": "mapToSelf",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "RealVector",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.linear.RealVector",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "org.apache.commons.math3.linear.RealVector",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.analysis.UnivariateFunction",
          "name": "UnivariateFunction",
          "isArray": false
        },
        "name": "function"
      }
    ],
    "equivalence": {
      "comment": "Acts as if it is implemented as:  Entry e = null; for(Iterator<Entry> it = iterator(); it.hasNext(); e = it.next()) { e.setValue(function.value(e.getValue())); }  Entries of this vector are modified in-place by this method.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getDimension()",
    "name": "getDimension",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "RealVector",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.linear.RealVector",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Returns the size of the vector.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "copy()",
    "name": "copy",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "RealVector",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.linear.RealVector",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "org.apache.commons.math3.linear.RealVector",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Returns a (deep) copy of this vector.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getNorm()",
    "name": "getNorm",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "RealVector",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.linear.RealVector",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Returns the L2 norm of the vector. <p>The L2 norm is the root of the sum of the squared elements.</p>",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor visitor, int start, int end)",
    "name": "walkInDefaultOrder",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "RealVector",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.linear.RealVector",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.linear.RealVectorChangingVisitor",
          "name": "RealVectorChangingVisitor",
          "isArray": false
        },
        "name": "visitor"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "start"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "end"
      }
    ],
    "equivalence": {
      "comment": "Visits (and possibly alters) some entries of this vector in default order (increasing index).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "isNaN()",
    "name": "isNaN",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "RealVector",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.linear.RealVector",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Check whether any coordinate of this vector is NaN.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getMaxValue()",
    "name": "getMaxValue",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "RealVector",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.linear.RealVector",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Get the value of the maximum entry.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "subtract(org.apache.commons.math3.linear.RealVector v)",
    "name": "subtract",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "RealVector",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.linear.RealVector",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "org.apache.commons.math3.linear.RealVector",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.linear.RealVector",
          "name": "RealVector",
          "isArray": false
        },
        "name": "v"
      }
    ],
    "equivalence": {
      "comment": "Subtract v from this vector. Returns a new vector. Does not change instance data.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getDistance(org.apache.commons.math3.linear.RealVector v)",
    "name": "getDistance",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "RealVector",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.linear.RealVector",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.linear.RealVector",
          "name": "RealVector",
          "isArray": false
        },
        "name": "v"
      }
    ],
    "equivalence": {
      "comment": "Distance between two vectors. This method computes the distance consistent with the L<sub>2</sub> norm, i.e. the square root of the sum of element differences, or Euclidean distance.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "projection(org.apache.commons.math3.linear.RealVector v)",
    "name": "projection",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "RealVector",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.linear.RealVector",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "org.apache.commons.math3.linear.RealVector",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.linear.RealVector",
          "name": "RealVector",
          "isArray": false
        },
        "name": "v"
      }
    ],
    "equivalence": {
      "comment": "Find the orthogonal projection of this vector onto another vector.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "set(double value)",
    "name": "set",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "RealVector",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.linear.RealVector",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "value"
      }
    ],
    "equivalence": {
      "comment": "Set all elements to a single value.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getEntry(int index)",
    "name": "getEntry",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "RealVector",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.linear.RealVector",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      }
    ],
    "equivalence": {
      "comment": "Return the entry at the specified index.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor visitor)",
    "name": "walkInOptimizedOrder",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "RealVector",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.linear.RealVector",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.linear.RealVectorChangingVisitor",
          "name": "RealVectorChangingVisitor",
          "isArray": false
        },
        "name": "visitor"
      }
    ],
    "equivalence": {
      "comment": "Visits (and possibly alters) all entries of this vector in optimized order. The order in which the entries are visited is selected so as to lead to the most efficient implementation; it might depend on the concrete implementation of this abstract class.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getMinValue()",
    "name": "getMinValue",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "RealVector",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.linear.RealVector",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Get the value of the minimum entry.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "append(double d)",
    "name": "append",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "RealVector",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.linear.RealVector",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "org.apache.commons.math3.linear.RealVector",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "d"
      }
    ],
    "equivalence": {
      "comment": "Construct a new vector by appending a double to this vector.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "checkIndex(int index)",
    "name": "checkIndex",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "RealVector",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.linear.RealVector",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      }
    ],
    "equivalence": {
      "comment": "Check if an index is valid.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "sparseIterator()",
    "name": "sparseIterator",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "RealVector",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.linear.RealVector",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Iterator<org.apache.commons.math3.linear.RealVector$Entry>",
      "name": "java.util.Iterator<org.apache.commons.math3.linear.RealVector$Entry>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Create a sparse iterator over the vector, which may omit some entries. The ommitted entries are either exact zeroes (for dense implementations) or are the entries which are not stored (for real sparse vectors). No guarantees are made about order of iteration. Note: derived classes are required to return an Iterator that returns non-null Entry objects as long as Iterator#hasNext() returns true.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor visitor)",
    "name": "walkInDefaultOrder",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "RealVector",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.linear.RealVector",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.linear.RealVectorChangingVisitor",
          "name": "RealVectorChangingVisitor",
          "isArray": false
        },
        "name": "visitor"
      }
    ],
    "equivalence": {
      "comment": "Visits (and possibly alters) all entries of this vector in default order (increasing index).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor visitor, int start, int end)",
    "name": "walkInDefaultOrder",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "RealVector",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.linear.RealVector",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.linear.RealVectorPreservingVisitor",
          "name": "RealVectorPreservingVisitor",
          "isArray": false
        },
        "name": "visitor"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "start"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "end"
      }
    ],
    "equivalence": {
      "comment": "Visits (but does not alter) some entries of this vector in default order (increasing index).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "add(org.apache.commons.math3.linear.RealVector v)",
    "name": "add",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "RealVector",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.linear.RealVector",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "org.apache.commons.math3.linear.RealVector",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.linear.RealVector",
          "name": "RealVector",
          "isArray": false
        },
        "name": "v"
      }
    ],
    "equivalence": {
      "comment": "Compute the sum of this vector and v. Returns a new vector. Does not change instance data.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "hashCode()",
    "name": "hashCode",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "RealVector",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.linear.RealVector",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "{@inheritDoc}. This method must be overriden by concrete subclasses of RealVector (current implementation throws an exception).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "unmodifiableRealVector(org.apache.commons.math3.linear.RealVector v)",
    "name": "unmodifiableRealVector",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "RealVector",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.linear.RealVector",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "org.apache.commons.math3.linear.RealVector",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.linear.RealVector",
          "name": "RealVector",
          "isArray": false
        },
        "name": "v"
      }
    ],
    "equivalence": {
      "comment": "Returns an unmodifiable view of the specified vector. The returned vector has read-only access. An attempt to modify it will result in a MathUnsupportedOperationException. However, the returned vector is not immutable, since any modification of v will also change the returned view. For example, in the following piece of code  RealVector v = new ArrayRealVector(2); RealVector w = RealVector.unmodifiableRealVector(v); v.setEntry(0, 1.2); v.setEntry(1, -3.4);  the changes will be seen in the w view of v.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setSubVector(int index, org.apache.commons.math3.linear.RealVector v)",
    "name": "setSubVector",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "RealVector",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.linear.RealVector",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.linear.RealVector",
          "name": "RealVector",
          "isArray": false
        },
        "name": "v"
      }
    ],
    "equivalence": {
      "comment": "Set a sequence of consecutive elements.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "ebeMultiply(org.apache.commons.math3.linear.RealVector v)",
    "name": "ebeMultiply",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "RealVector",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.linear.RealVector",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "org.apache.commons.math3.linear.RealVector",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.linear.RealVector",
          "name": "RealVector",
          "isArray": false
        },
        "name": "v"
      }
    ],
    "equivalence": {
      "comment": "Element-by-element multiplication.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getMaxIndex()",
    "name": "getMaxIndex",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "RealVector",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.linear.RealVector",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Get the index of the maximum entry.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "isInfinite()",
    "name": "isInfinite",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "RealVector",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.linear.RealVector",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Check whether any coordinate of this vector is infinite and none are NaN.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "ebeDivide(org.apache.commons.math3.linear.RealVector v)",
    "name": "ebeDivide",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "RealVector",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.linear.RealVector",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "org.apache.commons.math3.linear.RealVector",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.linear.RealVector",
          "name": "RealVector",
          "isArray": false
        },
        "name": "v"
      }
    ],
    "equivalence": {
      "comment": "Element-by-element division.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "mapMultiply(double d)",
    "name": "mapMultiply",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "RealVector",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.linear.RealVector",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "org.apache.commons.math3.linear.RealVector",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "d"
      }
    ],
    "equivalence": {
      "comment": "Multiply each entry by the argument. Returns a new vector. Does not change instance data.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor visitor)",
    "name": "walkInOptimizedOrder",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "RealVector",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.linear.RealVector",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.linear.RealVectorPreservingVisitor",
          "name": "RealVectorPreservingVisitor",
          "isArray": false
        },
        "name": "visitor"
      }
    ],
    "equivalence": {
      "comment": "Visits (but does not alter) all entries of this vector in optimized order. The order in which the entries are visited is selected so as to lead to the most efficient implementation; it might depend on the concrete implementation of this abstract class.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "checkVectorDimensions(org.apache.commons.math3.linear.RealVector v)",
    "name": "checkVectorDimensions",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "RealVector",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.linear.RealVector",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.linear.RealVector",
          "name": "RealVector",
          "isArray": false
        },
        "name": "v"
      }
    ],
    "equivalence": {
      "comment": "Check if instance and specified vectors have the same dimension.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "outerProduct(org.apache.commons.math3.linear.RealVector v)",
    "name": "outerProduct",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "RealVector",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.linear.RealVector",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.linear.RealMatrix",
      "name": "org.apache.commons.math3.linear.RealMatrix",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.linear.RealVector",
          "name": "RealVector",
          "isArray": false
        },
        "name": "v"
      }
    ],
    "equivalence": {
      "comment": "Compute the outer product.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "map(org.apache.commons.math3.analysis.UnivariateFunction function)",
    "name": "map",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "RealVector",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.linear.RealVector",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "org.apache.commons.math3.linear.RealVector",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.analysis.UnivariateFunction",
          "name": "UnivariateFunction",
          "isArray": false
        },
        "name": "function"
      }
    ],
    "equivalence": {
      "comment": "Acts as if implemented as:  return copy().mapToSelf(function);  Returns a new vector. Does not change instance data.",
      "kind": "FreeText",
      "condition": "methodResultID.equals(copy().mapToSelf(args[0]))"
    }
  },
  {
    "signature": "mapMultiplyToSelf(double d)",
    "name": "mapMultiplyToSelf",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "RealVector",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.linear.RealVector",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "org.apache.commons.math3.linear.RealVector",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "d"
      }
    ],
    "equivalence": {
      "comment": "Multiply each entry. The instance is changed in-place.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "addToEntry(int index, double increment)",
    "name": "addToEntry",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "RealVector",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.linear.RealVector",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "increment"
      }
    ],
    "equivalence": {
      "comment": "Change an entry at the specified index.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getMinIndex()",
    "name": "getMinIndex",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "RealVector",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.linear.RealVector",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Get the index of the minimum entry.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getL1Norm()",
    "name": "getL1Norm",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "RealVector",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.linear.RealVector",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Returns the L1 norm of the vector. <p>The L1 norm is the sum of the absolute values of the elements.</p>",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getLInfDistance(org.apache.commons.math3.linear.RealVector v)",
    "name": "getLInfDistance",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "RealVector",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.linear.RealVector",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.linear.RealVector",
          "name": "RealVector",
          "isArray": false
        },
        "name": "v"
      }
    ],
    "equivalence": {
      "comment": "Distance between two vectors. This method computes the distance consistent with L<sub>&infin;</sub> norm, i.e. the max of the absolute values of element differences.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "mapSubtractToSelf(double d)",
    "name": "mapSubtractToSelf",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "RealVector",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.linear.RealVector",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "org.apache.commons.math3.linear.RealVector",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "d"
      }
    ],
    "equivalence": {
      "comment": "Subtract a value from each entry. The instance is changed in-place.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toArray()",
    "name": "toArray",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "RealVector",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.linear.RealVector",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double[]",
      "name": "double[]",
      "isArray": true
    },
    "parameters": [],
    "equivalence": {
      "comment": "Convert the vector to an array of {@code double}s. The array is independent from this vector data: the elements are copied.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "equals(java.lang.Object other)",
    "name": "equals",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "RealVector",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.linear.RealVector",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "other"
      }
    ],
    "equivalence": {
      "comment": "Test for the equality of two real vectors. If all coordinates of two real vectors are exactly the same, and none are NaN, the two real vectors are considered to be equal. NaN coordinates are considered to affect globally the vector and be equals to each other - i.e, if either (or all) coordinates of the real vector are equal to NaN, the real vector is equal to a vector with all NaN coordinates.   This method <em>must</em> be overriden by concrete subclasses of RealVector (the current implementation throws an exception).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "dotProduct(org.apache.commons.math3.linear.RealVector v)",
    "name": "dotProduct",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "RealVector",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.linear.RealVector",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.linear.RealVector",
          "name": "RealVector",
          "isArray": false
        },
        "name": "v"
      }
    ],
    "equivalence": {
      "comment": "Compute the dot product of this vector with v.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getLInfNorm()",
    "name": "getLInfNorm",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "RealVector",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.linear.RealVector",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Returns the L&infin; norm of the vector. <p>The L&infin; norm is the max of the absolute values of the elements.</p>",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "iterator()",
    "name": "iterator",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "RealVector",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.linear.RealVector",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Iterator<org.apache.commons.math3.linear.RealVector$Entry>",
      "name": "java.util.Iterator<org.apache.commons.math3.linear.RealVector$Entry>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Generic dense iterator. Iteration is in increasing order of the vector index. Note: derived classes are required to return an Iterator that returns non-null Entry objects as long as Iterator#hasNext() returns true.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getSubVector(int index, int n)",
    "name": "getSubVector",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "RealVector",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.linear.RealVector",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "org.apache.commons.math3.linear.RealVector",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "equivalence": {
      "comment": "Get a subvector from consecutive elements.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "cosine(org.apache.commons.math3.linear.RealVector v)",
    "name": "cosine",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "RealVector",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.linear.RealVector",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.linear.RealVector",
          "name": "RealVector",
          "isArray": false
        },
        "name": "v"
      }
    ],
    "equivalence": {
      "comment": "Computes the cosine of the angle between this vector and the argument.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "unitVector()",
    "name": "unitVector",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "RealVector",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.linear.RealVector",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.linear.RealVector",
      "name": "org.apache.commons.math3.linear.RealVector",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Creates a unit vector pointing in the direction of this vector. The instance is not changed by this method.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]