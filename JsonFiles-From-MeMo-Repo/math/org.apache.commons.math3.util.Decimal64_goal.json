[
  {
    "signature": "abs()",
    "name": "abs",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "org.apache.commons.math3.util.Decimal64",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "compareTo(org.apache.commons.math3.util.Decimal64 o)",
    "name": "compareTo",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.util.Decimal64",
          "name": "Decimal64",
          "isArray": false
        },
        "name": "o"
      }
    ],
    "equivalence": {
      "comment": "{@inheritDoc} The current implementation returns the same value as  new Double(this.doubleValue()).compareTo(new Double(o.doubleValue()))  @see Double#compareTo(Double)",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "cbrt()",
    "name": "cbrt",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "org.apache.commons.math3.util.Decimal64",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "pow(int n)",
    "name": "pow",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "org.apache.commons.math3.util.Decimal64",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "log1p()",
    "name": "log1p",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "org.apache.commons.math3.util.Decimal64",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "hashCode()",
    "name": "hashCode",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "{@inheritDoc} The current implementation returns the same value as new Double(this.doubleValue()).hashCode() @see Double#hashCode()",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "sqrt()",
    "name": "sqrt",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "org.apache.commons.math3.util.Decimal64",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "pow(double p)",
    "name": "pow",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "org.apache.commons.math3.util.Decimal64",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "p"
      }
    ],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "sin()",
    "name": "sin",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "org.apache.commons.math3.util.Decimal64",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "multiply(int n)",
    "name": "multiply",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "org.apache.commons.math3.util.Decimal64",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "equivalence": {
      "comment": "{@inheritDoc} The current implementation strictly enforces this.multiply(n).equals(new Decimal64(n * this.doubleValue())).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "atan()",
    "name": "atan",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "org.apache.commons.math3.util.Decimal64",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "cos()",
    "name": "cos",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "org.apache.commons.math3.util.Decimal64",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "org.apache.commons.math3.util.Decimal64(double x)",
    "name": "org.apache.commons.math3.util.Decimal64",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "x"
      }
    ],
    "equivalence": {
      "comment": "Creates a new instance of this class.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "asinh()",
    "name": "asinh",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "org.apache.commons.math3.util.Decimal64",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "hypot(org.apache.commons.math3.util.Decimal64 y)",
    "name": "hypot",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "org.apache.commons.math3.util.Decimal64",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.util.Decimal64",
          "name": "Decimal64",
          "isArray": false
        },
        "name": "y"
      }
    ],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "divide(org.apache.commons.math3.util.Decimal64 a)",
    "name": "divide",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "org.apache.commons.math3.util.Decimal64",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.util.Decimal64",
          "name": "Decimal64",
          "isArray": false
        },
        "name": "a"
      }
    ],
    "equivalence": {
      "comment": "{@inheritDoc} The current implementation strictly enforces this.divide(a).equals(new Decimal64(this.doubleValue() / a.doubleValue())).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "divide(double a)",
    "name": "divide",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "org.apache.commons.math3.util.Decimal64",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "a"
      }
    ],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "reciprocal()",
    "name": "reciprocal",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "org.apache.commons.math3.util.Decimal64",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "{@inheritDoc} The current implementation strictly enforces this.reciprocal().equals(new Decimal64(1.0 / this.doubleValue())).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "longValue()",
    "name": "longValue",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "{@inheritDoc} The current implementation performs casting to a long.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "ceil()",
    "name": "ceil",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "org.apache.commons.math3.util.Decimal64",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "scalb(int n)",
    "name": "scalb",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "org.apache.commons.math3.util.Decimal64",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "subtract(org.apache.commons.math3.util.Decimal64 a)",
    "name": "subtract",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "org.apache.commons.math3.util.Decimal64",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.util.Decimal64",
          "name": "Decimal64",
          "isArray": false
        },
        "name": "a"
      }
    ],
    "equivalence": {
      "comment": "{@inheritDoc} The current implementation strictly enforces this.subtract(a).equals(new Decimal64(this.doubleValue() - a.doubleValue())).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "subtract(double a)",
    "name": "subtract",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "org.apache.commons.math3.util.Decimal64",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "a"
      }
    ],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "equals(java.lang.Object obj)",
    "name": "equals",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "obj"
      }
    ],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "log10()",
    "name": "log10",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "org.apache.commons.math3.util.Decimal64",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "floatValue()",
    "name": "floatValue",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "float",
      "name": "float",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "{@inheritDoc} The current implementation performs casting to a float.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "byteValue()",
    "name": "byteValue",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "byte",
      "name": "byte",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "{@inheritDoc} The current implementation performs casting to a byte.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "floor()",
    "name": "floor",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "org.apache.commons.math3.util.Decimal64",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "signum()",
    "name": "signum",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "org.apache.commons.math3.util.Decimal64",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toString()",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "{@inheritDoc} The returned String is equal to Double.toString(this.doubleValue()) @see Double#toString(double)",
      "kind": "FreeText",
      "condition": "methodResultID.equals(Double.toString(this.doubleValue()))"
    }
  },
  {
    "signature": "rint()",
    "name": "rint",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "org.apache.commons.math3.util.Decimal64",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "rootN(int n)",
    "name": "rootN",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "org.apache.commons.math3.util.Decimal64",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "round()",
    "name": "round",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "multiply(org.apache.commons.math3.util.Decimal64 a)",
    "name": "multiply",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "org.apache.commons.math3.util.Decimal64",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.util.Decimal64",
          "name": "Decimal64",
          "isArray": false
        },
        "name": "a"
      }
    ],
    "equivalence": {
      "comment": "{@inheritDoc} The current implementation strictly enforces this.multiply(a).equals(new Decimal64(this.doubleValue() * a.doubleValue())).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "multiply(double a)",
    "name": "multiply",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "org.apache.commons.math3.util.Decimal64",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "a"
      }
    ],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "tanh()",
    "name": "tanh",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "org.apache.commons.math3.util.Decimal64",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "linearCombination(org.apache.commons.math3.util.Decimal64[] a, org.apache.commons.math3.util.Decimal64[] b)",
    "name": "linearCombination",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "org.apache.commons.math3.util.Decimal64",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Lorg.apache.commons.math3.util.Decimal64;",
          "name": "Decimal64[]",
          "isArray": true
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "[Lorg.apache.commons.math3.util.Decimal64;",
          "name": "Decimal64[]",
          "isArray": true
        },
        "name": "b"
      }
    ],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "linearCombination(double[] a, org.apache.commons.math3.util.Decimal64[] b)",
    "name": "linearCombination",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "org.apache.commons.math3.util.Decimal64",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "[Lorg.apache.commons.math3.util.Decimal64;",
          "name": "Decimal64[]",
          "isArray": true
        },
        "name": "b"
      }
    ],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "atan2(org.apache.commons.math3.util.Decimal64 x)",
    "name": "atan2",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "org.apache.commons.math3.util.Decimal64",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.util.Decimal64",
          "name": "Decimal64",
          "isArray": false
        },
        "name": "x"
      }
    ],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "shortValue()",
    "name": "shortValue",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "short",
      "name": "short",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "{@inheritDoc} The current implementation performs casting to a short.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "linearCombination(org.apache.commons.math3.util.Decimal64 a1, org.apache.commons.math3.util.Decimal64 b1, org.apache.commons.math3.util.Decimal64 a2, org.apache.commons.math3.util.Decimal64 b2, org.apache.commons.math3.util.Decimal64 a3, org.apache.commons.math3.util.Decimal64 b3)",
    "name": "linearCombination",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "org.apache.commons.math3.util.Decimal64",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.util.Decimal64",
          "name": "Decimal64",
          "isArray": false
        },
        "name": "a1"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.util.Decimal64",
          "name": "Decimal64",
          "isArray": false
        },
        "name": "b1"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.util.Decimal64",
          "name": "Decimal64",
          "isArray": false
        },
        "name": "a2"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.util.Decimal64",
          "name": "Decimal64",
          "isArray": false
        },
        "name": "b2"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.util.Decimal64",
          "name": "Decimal64",
          "isArray": false
        },
        "name": "a3"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.util.Decimal64",
          "name": "Decimal64",
          "isArray": false
        },
        "name": "b3"
      }
    ],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "linearCombination(double a1, org.apache.commons.math3.util.Decimal64 b1, double a2, org.apache.commons.math3.util.Decimal64 b2, double a3, org.apache.commons.math3.util.Decimal64 b3)",
    "name": "linearCombination",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "org.apache.commons.math3.util.Decimal64",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "a1"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.util.Decimal64",
          "name": "Decimal64",
          "isArray": false
        },
        "name": "b1"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "a2"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.util.Decimal64",
          "name": "Decimal64",
          "isArray": false
        },
        "name": "b2"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "a3"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.util.Decimal64",
          "name": "Decimal64",
          "isArray": false
        },
        "name": "b3"
      }
    ],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "linearCombination(org.apache.commons.math3.util.Decimal64 a1, org.apache.commons.math3.util.Decimal64 b1, org.apache.commons.math3.util.Decimal64 a2, org.apache.commons.math3.util.Decimal64 b2, org.apache.commons.math3.util.Decimal64 a3, org.apache.commons.math3.util.Decimal64 b3, org.apache.commons.math3.util.Decimal64 a4, org.apache.commons.math3.util.Decimal64 b4)",
    "name": "linearCombination",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "org.apache.commons.math3.util.Decimal64",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.util.Decimal64",
          "name": "Decimal64",
          "isArray": false
        },
        "name": "a1"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.util.Decimal64",
          "name": "Decimal64",
          "isArray": false
        },
        "name": "b1"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.util.Decimal64",
          "name": "Decimal64",
          "isArray": false
        },
        "name": "a2"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.util.Decimal64",
          "name": "Decimal64",
          "isArray": false
        },
        "name": "b2"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.util.Decimal64",
          "name": "Decimal64",
          "isArray": false
        },
        "name": "a3"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.util.Decimal64",
          "name": "Decimal64",
          "isArray": false
        },
        "name": "b3"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.util.Decimal64",
          "name": "Decimal64",
          "isArray": false
        },
        "name": "a4"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.util.Decimal64",
          "name": "Decimal64",
          "isArray": false
        },
        "name": "b4"
      }
    ],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "linearCombination(double a1, org.apache.commons.math3.util.Decimal64 b1, double a2, org.apache.commons.math3.util.Decimal64 b2, double a3, org.apache.commons.math3.util.Decimal64 b3, double a4, org.apache.commons.math3.util.Decimal64 b4)",
    "name": "linearCombination",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "org.apache.commons.math3.util.Decimal64",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "a1"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.util.Decimal64",
          "name": "Decimal64",
          "isArray": false
        },
        "name": "b1"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "a2"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.util.Decimal64",
          "name": "Decimal64",
          "isArray": false
        },
        "name": "b2"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "a3"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.util.Decimal64",
          "name": "Decimal64",
          "isArray": false
        },
        "name": "b3"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "a4"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.util.Decimal64",
          "name": "Decimal64",
          "isArray": false
        },
        "name": "b4"
      }
    ],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getField()",
    "name": "getField",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.Field<org.apache.commons.math3.util.Decimal64>",
      "name": "org.apache.commons.math3.Field<org.apache.commons.math3.util.Decimal64>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "exp()",
    "name": "exp",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "org.apache.commons.math3.util.Decimal64",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "doubleValue()",
    "name": "doubleValue",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "pow(org.apache.commons.math3.util.Decimal64 e)",
    "name": "pow",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "org.apache.commons.math3.util.Decimal64",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.util.Decimal64",
          "name": "Decimal64",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "linearCombination(org.apache.commons.math3.util.Decimal64 a1, org.apache.commons.math3.util.Decimal64 b1, org.apache.commons.math3.util.Decimal64 a2, org.apache.commons.math3.util.Decimal64 b2)",
    "name": "linearCombination",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "org.apache.commons.math3.util.Decimal64",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.util.Decimal64",
          "name": "Decimal64",
          "isArray": false
        },
        "name": "a1"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.util.Decimal64",
          "name": "Decimal64",
          "isArray": false
        },
        "name": "b1"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.util.Decimal64",
          "name": "Decimal64",
          "isArray": false
        },
        "name": "a2"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.util.Decimal64",
          "name": "Decimal64",
          "isArray": false
        },
        "name": "b2"
      }
    ],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "linearCombination(double a1, org.apache.commons.math3.util.Decimal64 b1, double a2, org.apache.commons.math3.util.Decimal64 b2)",
    "name": "linearCombination",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "org.apache.commons.math3.util.Decimal64",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "a1"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.util.Decimal64",
          "name": "Decimal64",
          "isArray": false
        },
        "name": "b1"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "a2"
      },
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.util.Decimal64",
          "name": "Decimal64",
          "isArray": false
        },
        "name": "b2"
      }
    ],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "add(org.apache.commons.math3.util.Decimal64 a)",
    "name": "add",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "org.apache.commons.math3.util.Decimal64",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.util.Decimal64",
          "name": "Decimal64",
          "isArray": false
        },
        "name": "a"
      }
    ],
    "equivalence": {
      "comment": "{@inheritDoc} The current implementation strictly enforces this.add(a).equals(new Decimal64(this.doubleValue() + a.doubleValue())).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "add(double a)",
    "name": "add",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "org.apache.commons.math3.util.Decimal64",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "a"
      }
    ],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "acosh()",
    "name": "acosh",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "org.apache.commons.math3.util.Decimal64",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "log()",
    "name": "log",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "org.apache.commons.math3.util.Decimal64",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "asin()",
    "name": "asin",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "org.apache.commons.math3.util.Decimal64",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getReal()",
    "name": "getReal",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "intValue()",
    "name": "intValue",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "{@inheritDoc} The current implementation performs casting to a int.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "isInfinite()",
    "name": "isInfinite",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Returns true if this double precision number is infinite (Double#POSITIVE_INFINITY or Double#NEGATIVE_INFINITY).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "acos()",
    "name": "acos",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "org.apache.commons.math3.util.Decimal64",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "sinh()",
    "name": "sinh",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "org.apache.commons.math3.util.Decimal64",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "isNaN()",
    "name": "isNaN",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Returns true if this double precision number is Not-a-Number ({@code NaN}), false otherwise.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "tan()",
    "name": "tan",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "org.apache.commons.math3.util.Decimal64",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "atanh()",
    "name": "atanh",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "org.apache.commons.math3.util.Decimal64",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "cosh()",
    "name": "cosh",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "org.apache.commons.math3.util.Decimal64",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "expm1()",
    "name": "expm1",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "org.apache.commons.math3.util.Decimal64",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "negate()",
    "name": "negate",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "org.apache.commons.math3.util.Decimal64",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "{@inheritDoc} The current implementation strictly enforces this.negate().equals(new Decimal64(-this.doubleValue())).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "remainder(double a)",
    "name": "remainder",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "org.apache.commons.math3.util.Decimal64",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "a"
      }
    ],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "remainder(org.apache.commons.math3.util.Decimal64 a)",
    "name": "remainder",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "org.apache.commons.math3.util.Decimal64",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.util.Decimal64",
          "name": "Decimal64",
          "isArray": false
        },
        "name": "a"
      }
    ],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "copySign(org.apache.commons.math3.util.Decimal64 sign)",
    "name": "copySign",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "org.apache.commons.math3.util.Decimal64",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.apache.commons.math3.util.Decimal64",
          "name": "Decimal64",
          "isArray": false
        },
        "name": "sign"
      }
    ],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "copySign(double sign)",
    "name": "copySign",
    "containingClass": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "Decimal64",
      "isArray": false
    },
    "targetClass": "org.apache.commons.math3.util.Decimal64",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.apache.commons.math3.util.Decimal64",
      "name": "org.apache.commons.math3.util.Decimal64",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "sign"
      }
    ],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  }
]