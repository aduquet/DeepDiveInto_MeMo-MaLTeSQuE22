[
  {
    "signature": "java.lang.reflect.Field(java.lang.Class<?> declaringClass, java.lang.String name, java.lang.Class<?> type, int modifiers, int slot, java.lang.String signature, byte[] annotations)",
    "name": "java.lang.reflect.Field",
    "containingClass": {
      "qualifiedName": "java.lang.reflect.Field",
      "name": "Field",
      "isArray": false
    },
    "targetClass": "java.lang.reflect.Field",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Class",
          "name": "Class",
          "isArray": false
        },
        "name": "declaringClass"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "name"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Class",
          "name": "Class",
          "isArray": false
        },
        "name": "type"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "modifiers"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "slot"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "signature"
      },
      {
        "type": {
          "qualifiedName": "[B",
          "name": "byte[]",
          "isArray": true
        },
        "name": "annotations"
      }
    ],
    "equivalence": {
      "member": "java.lang.reflect.Field(java.lang.Class<?> declaringClass, java.lang.String name, java.lang.Class<?> type, int modifiers, int slot, java.lang.String signature, byte[] annotations)",
      "comment": "Package-private constructor used by ReflectAccess to enable instantiation of these objects in Java code from the java.lang package via sun.reflect.LangReflectAccess.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "copy()",
    "name": "copy",
    "containingClass": {
      "qualifiedName": "java.lang.reflect.Field",
      "name": "Field",
      "isArray": false
    },
    "targetClass": "java.lang.reflect.Field",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.reflect.Field",
      "name": "java.lang.reflect.Field",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "copy()",
      "comment": "Package-private routine (exposed to java.lang.Class via ReflectAccess) which returns a copy of this Field. The copy's \"root\" field points to this Field.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getDeclaringClass()",
    "name": "getDeclaringClass",
    "containingClass": {
      "qualifiedName": "java.lang.reflect.Field",
      "name": "Field",
      "isArray": false
    },
    "targetClass": "java.lang.reflect.Field",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Class<?>",
      "name": "java.lang.Class<?>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "getDeclaringClass()",
      "comment": "Returns the Class object representing the class or interface that declares the field represented by this Field object.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getName()",
    "name": "getName",
    "containingClass": {
      "qualifiedName": "java.lang.reflect.Field",
      "name": "Field",
      "isArray": false
    },
    "targetClass": "java.lang.reflect.Field",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "getName()",
      "comment": "Returns the name of the field represented by this Field object.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getModifiers()",
    "name": "getModifiers",
    "containingClass": {
      "qualifiedName": "java.lang.reflect.Field",
      "name": "Field",
      "isArray": false
    },
    "targetClass": "java.lang.reflect.Field",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "getModifiers()",
      "comment": "Returns the Java language modifiers for the field represented by this Field object, as an integer. The Modifier class should be used to decode the modifiers. @see Modifier",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "isEnumConstant()",
    "name": "isEnumConstant",
    "containingClass": {
      "qualifiedName": "java.lang.reflect.Field",
      "name": "Field",
      "isArray": false
    },
    "targetClass": "java.lang.reflect.Field",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "isEnumConstant()",
      "comment": "Returns true if this field represents an element of an enumerated type; returns false otherwise.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "isSynthetic()",
    "name": "isSynthetic",
    "containingClass": {
      "qualifiedName": "java.lang.reflect.Field",
      "name": "Field",
      "isArray": false
    },
    "targetClass": "java.lang.reflect.Field",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "isSynthetic()",
      "comment": "Returns true if this field is a synthetic field; returns false otherwise.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getType()",
    "name": "getType",
    "containingClass": {
      "qualifiedName": "java.lang.reflect.Field",
      "name": "Field",
      "isArray": false
    },
    "targetClass": "java.lang.reflect.Field",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Class<?>",
      "name": "java.lang.Class<?>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "getType()",
      "comment": "Returns a Class object that identifies the declared type for the field represented by this Field object.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getGenericType()",
    "name": "getGenericType",
    "containingClass": {
      "qualifiedName": "java.lang.reflect.Field",
      "name": "Field",
      "isArray": false
    },
    "targetClass": "java.lang.reflect.Field",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.reflect.Type",
      "name": "java.lang.reflect.Type",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "getGenericType()",
      "comment": "Returns a Type object that represents the declared type for the field represented by this Field object. If the Type is a parameterized type, the Type object returned must accurately reflect the actual type parameters used in the source code. If the type of the underlying field is a type variable or a parameterized type, it is created. Otherwise, it is resolved.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "equals(java.lang.Object obj)",
    "name": "equals",
    "containingClass": {
      "qualifiedName": "java.lang.reflect.Field",
      "name": "Field",
      "isArray": false
    },
    "targetClass": "java.lang.reflect.Field",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "obj"
      }
    ],
    "equivalence": {
      "member": "equals(java.lang.Object obj)",
      "comment": "Compares this Field against the specified object. Returns true if the objects are the same. Two Field objects are the same if they were declared by the same class and have the same name and type.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "hashCode()",
    "name": "hashCode",
    "containingClass": {
      "qualifiedName": "java.lang.reflect.Field",
      "name": "Field",
      "isArray": false
    },
    "targetClass": "java.lang.reflect.Field",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "hashCode()",
      "comment": "Returns a hashcode for this Field. This is computed as the exclusive-or of the hashcodes for the underlying field's declaring class name and its name.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toString()",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "java.lang.reflect.Field",
      "name": "Field",
      "isArray": false
    },
    "targetClass": "java.lang.reflect.Field",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "toString()",
      "comment": "Returns a string describing this Field. The format is the access modifiers for the field, if any, followed by the field type, followed by a space, followed by the fully-qualified name of the class declaring the field, followed by a period, followed by the name of the field. For example:  public static final int java.lang.Thread.MIN_PRIORITY private int java.io.FileDescriptor.fd  The modifiers are placed in canonical order as specified by \"The Java Language Specification\". This is public, protected or private first, and then other modifiers in the following order: static, final, transient, volatile.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toGenericString()",
    "name": "toGenericString",
    "containingClass": {
      "qualifiedName": "java.lang.reflect.Field",
      "name": "Field",
      "isArray": false
    },
    "targetClass": "java.lang.reflect.Field",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "toGenericString()",
      "comment": "Returns a string describing this Field, including its generic type. The format is the access modifiers for the field, if any, followed by the generic field type, followed by a space, followed by the fully-qualified name of the class declaring the field, followed by a period, followed by the name of the field. The modifiers are placed in canonical order as specified by \"The Java Language Specification\". This is public, protected or private first, and then other modifiers in the following order: static, final, transient, volatile.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "get(java.lang.Object obj)",
    "name": "get",
    "containingClass": {
      "qualifiedName": "java.lang.reflect.Field",
      "name": "Field",
      "isArray": false
    },
    "targetClass": "java.lang.reflect.Field",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Object",
      "name": "java.lang.Object",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "obj"
      }
    ],
    "equivalence": {
      "member": "get(java.lang.Object obj)",
      "comment": "Returns the value of the field represented by this Field, on the specified object. The value is automatically wrapped in an object if it has a primitive type. The underlying field's value is obtained as follows: If the underlying field is a static field, the obj argument is ignored; it may be null. Otherwise, the underlying field is an instance field. If the specified obj argument is null, the method throws a NullPointerException. If the specified object is not an instance of the class or interface declaring the underlying field, the method throws an IllegalArgumentException. If this Field object is enforcing Java language access control, and the underlying field is inaccessible, the method throws an IllegalAccessException. If the underlying field is static, the class that declared the field is initialized if it has not already been initialized. Otherwise, the value is retrieved from the underlying instance or static field. If the field has a primitive type, the value is wrapped in an object before being returned, otherwise it is returned as is. If the field is hidden in the type of obj, the field's value is obtained according to the preceding rules.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getBoolean(java.lang.Object obj)",
    "name": "getBoolean",
    "containingClass": {
      "qualifiedName": "java.lang.reflect.Field",
      "name": "Field",
      "isArray": false
    },
    "targetClass": "java.lang.reflect.Field",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "obj"
      }
    ],
    "equivalence": {
      "member": "getBoolean(java.lang.Object obj)",
      "comment": "Gets the value of a static or instance boolean field.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getByte(java.lang.Object obj)",
    "name": "getByte",
    "containingClass": {
      "qualifiedName": "java.lang.reflect.Field",
      "name": "Field",
      "isArray": false
    },
    "targetClass": "java.lang.reflect.Field",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "byte",
      "name": "byte",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "obj"
      }
    ],
    "equivalence": {
      "member": "getByte(java.lang.Object obj)",
      "comment": "Gets the value of a static or instance byte field.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getChar(java.lang.Object obj)",
    "name": "getChar",
    "containingClass": {
      "qualifiedName": "java.lang.reflect.Field",
      "name": "Field",
      "isArray": false
    },
    "targetClass": "java.lang.reflect.Field",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "char",
      "name": "char",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "obj"
      }
    ],
    "equivalence": {
      "member": "getChar(java.lang.Object obj)",
      "comment": "Gets the value of a static or instance field of type char or of another primitive type convertible to type char via a widening conversion.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getShort(java.lang.Object obj)",
    "name": "getShort",
    "containingClass": {
      "qualifiedName": "java.lang.reflect.Field",
      "name": "Field",
      "isArray": false
    },
    "targetClass": "java.lang.reflect.Field",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "short",
      "name": "short",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "obj"
      }
    ],
    "equivalence": {
      "member": "getShort(java.lang.Object obj)",
      "comment": "Gets the value of a static or instance field of type short or of another primitive type convertible to type short via a widening conversion.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getInt(java.lang.Object obj)",
    "name": "getInt",
    "containingClass": {
      "qualifiedName": "java.lang.reflect.Field",
      "name": "Field",
      "isArray": false
    },
    "targetClass": "java.lang.reflect.Field",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "obj"
      }
    ],
    "equivalence": {
      "member": "getInt(java.lang.Object obj)",
      "comment": "Gets the value of a static or instance field of type int or of another primitive type convertible to type int via a widening conversion.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getLong(java.lang.Object obj)",
    "name": "getLong",
    "containingClass": {
      "qualifiedName": "java.lang.reflect.Field",
      "name": "Field",
      "isArray": false
    },
    "targetClass": "java.lang.reflect.Field",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "obj"
      }
    ],
    "equivalence": {
      "member": "getLong(java.lang.Object obj)",
      "comment": "Gets the value of a static or instance field of type long or of another primitive type convertible to type long via a widening conversion.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getFloat(java.lang.Object obj)",
    "name": "getFloat",
    "containingClass": {
      "qualifiedName": "java.lang.reflect.Field",
      "name": "Field",
      "isArray": false
    },
    "targetClass": "java.lang.reflect.Field",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "float",
      "name": "float",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "obj"
      }
    ],
    "equivalence": {
      "member": "getFloat(java.lang.Object obj)",
      "comment": "Gets the value of a static or instance field of type float or of another primitive type convertible to type float via a widening conversion.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getDouble(java.lang.Object obj)",
    "name": "getDouble",
    "containingClass": {
      "qualifiedName": "java.lang.reflect.Field",
      "name": "Field",
      "isArray": false
    },
    "targetClass": "java.lang.reflect.Field",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "obj"
      }
    ],
    "equivalence": {
      "member": "getDouble(java.lang.Object obj)",
      "comment": "Gets the value of a static or instance field of type double or of another primitive type convertible to type double via a widening conversion.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "set(java.lang.Object obj, java.lang.Object value)",
    "name": "set",
    "containingClass": {
      "qualifiedName": "java.lang.reflect.Field",
      "name": "Field",
      "isArray": false
    },
    "targetClass": "java.lang.reflect.Field",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "obj"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "value"
      }
    ],
    "equivalence": {
      "member": "set(java.lang.Object obj, java.lang.Object value)",
      "comment": "Sets the field represented by this Field object on the specified object argument to the specified new value. The new value is automatically unwrapped if the underlying field has a primitive type. The operation proceeds as follows: If the underlying field is static, the obj argument is ignored; it may be null. Otherwise the underlying field is an instance field. If the specified object argument is null, the method throws a NullPointerException. If the specified object argument is not an instance of the class or interface declaring the underlying field, the method throws an IllegalArgumentException. If this Field object is enforcing Java language access control, and the underlying field is inaccessible, the method throws an IllegalAccessException. If the underlying field is final, the method throws an IllegalAccessException unless setAccessible(true) has succeeded for this Field object and the field is non-static. Setting a final field in this way is meaningful only during deserialization or reconstruction of instances of classes with blank final fields, before they are made available for access by other parts of a program. Use in any other context may have unpredictable effects, including cases in which other parts of a program continue to use the original value of this field. If the underlying field is of a primitive type, an unwrapping conversion is attempted to convert the new value to a value of a primitive type. If this attempt fails, the method throws an IllegalArgumentException. If, after possible unwrapping, the new value cannot be converted to the type of the underlying field by an identity or widening conversion, the method throws an IllegalArgumentException. If the underlying field is static, the class that declared the field is initialized if it has not already been initialized. The field is set to the possibly unwrapped and widened new value. If the field is hidden in the type of obj, the field's value is set according to the preceding rules.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setBoolean(java.lang.Object obj, boolean z)",
    "name": "setBoolean",
    "containingClass": {
      "qualifiedName": "java.lang.reflect.Field",
      "name": "Field",
      "isArray": false
    },
    "targetClass": "java.lang.reflect.Field",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "obj"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "z"
      }
    ],
    "equivalence": {
      "member": "setBoolean(java.lang.Object obj, boolean z)",
      "comment": "Sets the value of a field as a boolean on the specified object. This method is equivalent to set(obj, zObj), where zObj is a Boolean object and zObj.booleanValue() == z.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setByte(java.lang.Object obj, byte b)",
    "name": "setByte",
    "containingClass": {
      "qualifiedName": "java.lang.reflect.Field",
      "name": "Field",
      "isArray": false
    },
    "targetClass": "java.lang.reflect.Field",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "obj"
      },
      {
        "type": {
          "qualifiedName": "byte",
          "name": "byte",
          "isArray": false
        },
        "name": "b"
      }
    ],
    "equivalence": {
      "member": "setByte(java.lang.Object obj, byte b)",
      "comment": "Sets the value of a field as a byte on the specified object. This method is equivalent to set(obj, bObj), where bObj is a Byte object and bObj.byteValue() == b.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setChar(java.lang.Object obj, char c)",
    "name": "setChar",
    "containingClass": {
      "qualifiedName": "java.lang.reflect.Field",
      "name": "Field",
      "isArray": false
    },
    "targetClass": "java.lang.reflect.Field",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "obj"
      },
      {
        "type": {
          "qualifiedName": "char",
          "name": "char",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "equivalence": {
      "member": "setChar(java.lang.Object obj, char c)",
      "comment": "Sets the value of a field as a char on the specified object. This method is equivalent to set(obj, cObj), where cObj is a Character object and cObj.charValue() == c.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setShort(java.lang.Object obj, short s)",
    "name": "setShort",
    "containingClass": {
      "qualifiedName": "java.lang.reflect.Field",
      "name": "Field",
      "isArray": false
    },
    "targetClass": "java.lang.reflect.Field",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "obj"
      },
      {
        "type": {
          "qualifiedName": "short",
          "name": "short",
          "isArray": false
        },
        "name": "s"
      }
    ],
    "equivalence": {
      "member": "setShort(java.lang.Object obj, short s)",
      "comment": "Sets the value of a field as a short on the specified object. This method is equivalent to set(obj, sObj), where sObj is a Short object and sObj.shortValue() == s.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setInt(java.lang.Object obj, int i)",
    "name": "setInt",
    "containingClass": {
      "qualifiedName": "java.lang.reflect.Field",
      "name": "Field",
      "isArray": false
    },
    "targetClass": "java.lang.reflect.Field",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "obj"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "i"
      }
    ],
    "equivalence": {
      "member": "setInt(java.lang.Object obj, int i)",
      "comment": "Sets the value of a field as an int on the specified object. This method is equivalent to set(obj, iObj), where iObj is a Integer object and iObj.intValue() == i.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setLong(java.lang.Object obj, long l)",
    "name": "setLong",
    "containingClass": {
      "qualifiedName": "java.lang.reflect.Field",
      "name": "Field",
      "isArray": false
    },
    "targetClass": "java.lang.reflect.Field",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "obj"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "l"
      }
    ],
    "equivalence": {
      "member": "setLong(java.lang.Object obj, long l)",
      "comment": "Sets the value of a field as a long on the specified object. This method is equivalent to set(obj, lObj), where lObj is a Long object and lObj.longValue() == l.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setFloat(java.lang.Object obj, float f)",
    "name": "setFloat",
    "containingClass": {
      "qualifiedName": "java.lang.reflect.Field",
      "name": "Field",
      "isArray": false
    },
    "targetClass": "java.lang.reflect.Field",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "obj"
      },
      {
        "type": {
          "qualifiedName": "float",
          "name": "float",
          "isArray": false
        },
        "name": "f"
      }
    ],
    "equivalence": {
      "member": "setFloat(java.lang.Object obj, float f)",
      "comment": "Sets the value of a field as a float on the specified object. This method is equivalent to set(obj, fObj), where fObj is a Float object and fObj.floatValue() == f.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setDouble(java.lang.Object obj, double d)",
    "name": "setDouble",
    "containingClass": {
      "qualifiedName": "java.lang.reflect.Field",
      "name": "Field",
      "isArray": false
    },
    "targetClass": "java.lang.reflect.Field",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "obj"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "d"
      }
    ],
    "equivalence": {
      "member": "setDouble(java.lang.Object obj, double d)",
      "comment": "Sets the value of a field as a double on the specified object. This method is equivalent to set(obj, dObj), where dObj is a Double object and dObj.doubleValue() == d.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getAnnotation(java.lang.Class<T> annotationClass)",
    "name": "getAnnotation",
    "containingClass": {
      "qualifiedName": "java.lang.reflect.Field",
      "name": "Field",
      "isArray": false
    },
    "targetClass": "java.lang.reflect.Field",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "T",
      "name": "T",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Class",
          "name": "Class",
          "isArray": false
        },
        "name": "annotationClass"
      }
    ],
    "equivalence": {
      "member": "getAnnotation(java.lang.Class<T> annotationClass)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getAnnotationsByType(java.lang.Class<T> annotationClass)",
    "name": "getAnnotationsByType",
    "containingClass": {
      "qualifiedName": "java.lang.reflect.Field",
      "name": "Field",
      "isArray": false
    },
    "targetClass": "java.lang.reflect.Field",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "T[]",
      "name": "T[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Class",
          "name": "Class",
          "isArray": false
        },
        "name": "annotationClass"
      }
    ],
    "equivalence": {
      "member": "getAnnotationsByType(java.lang.Class<T> annotationClass)",
      "comment": "{@inheritDoc}",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getDeclaredAnnotations()",
    "name": "getDeclaredAnnotations",
    "containingClass": {
      "qualifiedName": "java.lang.reflect.Field",
      "name": "Field",
      "isArray": false
    },
    "targetClass": "java.lang.reflect.Field",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.annotation.Annotation[]",
      "name": "java.lang.annotation.Annotation[]",
      "isArray": true
    },
    "parameters": [],
    "equivalence": {
      "member": "getDeclaredAnnotations()",
      "comment": "{@inheritDoc}",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getAnnotatedType()",
    "name": "getAnnotatedType",
    "containingClass": {
      "qualifiedName": "java.lang.reflect.Field",
      "name": "Field",
      "isArray": false
    },
    "targetClass": "java.lang.reflect.Field",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.reflect.AnnotatedType",
      "name": "java.lang.reflect.AnnotatedType",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "getAnnotatedType()",
      "comment": "Returns an AnnotatedType object that represents the use of a type to specify the declared type of the field represented by this Field.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]