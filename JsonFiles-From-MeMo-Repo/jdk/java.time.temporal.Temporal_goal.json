[
  {
    "signature": "isSupported(java.time.temporal.TemporalUnit unit)",
    "name": "isSupported",
    "containingClass": {
      "qualifiedName": "java.time.temporal.Temporal",
      "name": "Temporal",
      "isArray": false
    },
    "targetClass": "java.time.temporal.Temporal",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.temporal.TemporalUnit",
          "name": "TemporalUnit",
          "isArray": false
        },
        "name": "unit"
      }
    ],
    "equivalence": {
      "member": "isSupported(java.time.temporal.TemporalUnit unit)",
      "comment": "Checks if the specified unit is supported.  This checks if the specified unit can be added to, or subtracted from, this date-time. If false, then calling the #plus(long, TemporalUnit) and #minus(long, TemporalUnit) minus methods will throw an exception. @implSpec Implementations must check and handle all units defined in ChronoUnit. If the unit is supported, then true must be returned, otherwise false must be returned.  If the field is not a ChronoUnit, then the result of this method is obtained by invoking TemporalUnit.isSupportedBy(Temporal) passing this as the argument.  Implementations must ensure that no observable state is altered when this read-only method is invoked.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "with(java.time.temporal.TemporalAdjuster adjuster)",
    "name": "with",
    "containingClass": {
      "qualifiedName": "java.time.temporal.Temporal",
      "name": "Temporal",
      "isArray": false
    },
    "targetClass": "java.time.temporal.Temporal",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.temporal.Temporal",
      "name": "java.time.temporal.Temporal",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.temporal.TemporalAdjuster",
          "name": "TemporalAdjuster",
          "isArray": false
        },
        "name": "adjuster"
      }
    ],
    "equivalence": {
      "member": "with(java.time.temporal.TemporalAdjuster adjuster)",
      "comment": "Returns an adjusted object of the same type as this object with the adjustment made.  This adjusts this date-time according to the rules of the specified adjuster. A simple adjuster might simply set the one of the fields, such as the year field. A more complex adjuster might set the date to the last day of the month. A selection of common adjustments is provided in TemporalAdjuster. These include finding the \"last day of the month\" and \"next Wednesday\". The adjuster is responsible for handling special cases, such as the varying lengths of month and leap years.  Some example code indicating how and why this method is used:  date = date.with(Month.JULY); // most key classes implement TemporalAdjuster date = date.with(lastDayOfMonth()); // static import from Adjusters date = date.with(next(WEDNESDAY)); // static import from Adjusters and DayOfWeek  @implSpec  Implementations must not alter either this object or the specified temporal object. Instead, an adjusted copy of the original must be returned. This provides equivalent, safe behavior for immutable and mutable implementations.  The default implementation must behave equivalent to this code:  return adjuster.adjustInto(this);",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "with(java.time.temporal.TemporalField field, long newValue)",
    "name": "with",
    "containingClass": {
      "qualifiedName": "java.time.temporal.Temporal",
      "name": "Temporal",
      "isArray": false
    },
    "targetClass": "java.time.temporal.Temporal",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.temporal.Temporal",
      "name": "java.time.temporal.Temporal",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.temporal.TemporalField",
          "name": "TemporalField",
          "isArray": false
        },
        "name": "field"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "newValue"
      }
    ],
    "equivalence": {
      "member": "with(java.time.temporal.TemporalField field, long newValue)",
      "comment": "Returns an object of the same type as this object with the specified field altered.  This returns a new object based on this one with the value for the specified field changed. For example, on a LocalDate, this could be used to set the year, month or day-of-month. The returned object will have the same observable type as this object.  In some cases, changing a field is not fully defined. For example, if the target object is a date representing the 31st January, then changing the month to February would be unclear. In cases like this, the field is responsible for resolving the result. Typically it will choose the previous valid date, which would be the last valid day of February in this example. @implSpec Implementations must check and handle all fields defined in ChronoField. If the field is supported, then the adjustment must be performed. If unsupported, then an UnsupportedTemporalTypeException must be thrown.  If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.adjustInto(Temporal, long) passing this as the first argument.  Implementations must not alter this object. Instead, an adjusted copy of the original must be returned. This provides equivalent, safe behavior for immutable and mutable implementations.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "plus(java.time.temporal.TemporalAmount amount)",
    "name": "plus",
    "containingClass": {
      "qualifiedName": "java.time.temporal.Temporal",
      "name": "Temporal",
      "isArray": false
    },
    "targetClass": "java.time.temporal.Temporal",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.temporal.Temporal",
      "name": "java.time.temporal.Temporal",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.temporal.TemporalAmount",
          "name": "TemporalAmount",
          "isArray": false
        },
        "name": "amount"
      }
    ],
    "equivalence": {
      "member": "plus(java.time.temporal.TemporalAmount amount)",
      "comment": "Returns an object of the same type as this object with an amount added.  This adjusts this temporal, adding according to the rules of the specified amount. The amount is typically a java.time.Period but may be any other type implementing the TemporalAmount interface, such as java.time.Duration.  Some example code indicating how and why this method is used:  date = date.plus(period); // add a Period instance date = date.plus(duration); // add a Duration instance date = date.plus(workingDays(6)); // example user-written workingDays method   Note that calling plus followed by minus is not guaranteed to return the same date-time. @implSpec  Implementations must not alter either this object or the specified temporal object. Instead, an adjusted copy of the original must be returned. This provides equivalent, safe behavior for immutable and mutable implementations.  The default implementation must behave equivalent to this code:  return amount.addTo(this);",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "plus(long amountToAdd, java.time.temporal.TemporalUnit unit)",
    "name": "plus",
    "containingClass": {
      "qualifiedName": "java.time.temporal.Temporal",
      "name": "Temporal",
      "isArray": false
    },
    "targetClass": "java.time.temporal.Temporal",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.temporal.Temporal",
      "name": "java.time.temporal.Temporal",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "amountToAdd"
      },
      {
        "type": {
          "qualifiedName": "java.time.temporal.TemporalUnit",
          "name": "TemporalUnit",
          "isArray": false
        },
        "name": "unit"
      }
    ],
    "equivalence": {
      "member": "plus(long amountToAdd, java.time.temporal.TemporalUnit unit)",
      "comment": "Returns an object of the same type as this object with the specified period added.  This method returns a new object based on this one with the specified period added. For example, on a LocalDate, this could be used to add a number of years, months or days. The returned object will have the same observable type as this object.  In some cases, changing a field is not fully defined. For example, if the target object is a date representing the 31st January, then adding one month would be unclear. In cases like this, the field is responsible for resolving the result. Typically it will choose the previous valid date, which would be the last valid day of February in this example. @implSpec Implementations must check and handle all units defined in ChronoUnit. If the unit is supported, then the addition must be performed. If unsupported, then an UnsupportedTemporalTypeException must be thrown.  If the unit is not a ChronoUnit, then the result of this method is obtained by invoking TemporalUnit.addTo(Temporal, long) passing this as the first argument.  Implementations must not alter this object. Instead, an adjusted copy of the original must be returned. This provides equivalent, safe behavior for immutable and mutable implementations.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "minus(java.time.temporal.TemporalAmount amount)",
    "name": "minus",
    "containingClass": {
      "qualifiedName": "java.time.temporal.Temporal",
      "name": "Temporal",
      "isArray": false
    },
    "targetClass": "java.time.temporal.Temporal",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.temporal.Temporal",
      "name": "java.time.temporal.Temporal",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.temporal.TemporalAmount",
          "name": "TemporalAmount",
          "isArray": false
        },
        "name": "amount"
      }
    ],
    "equivalence": {
      "member": "minus(java.time.temporal.TemporalAmount amount)",
      "comment": "Returns an object of the same type as this object with an amount subtracted.  This adjusts this temporal, subtracting according to the rules of the specified amount. The amount is typically a java.time.Period but may be any other type implementing the TemporalAmount interface, such as java.time.Duration.  Some example code indicating how and why this method is used:  date = date.minus(period); // subtract a Period instance date = date.minus(duration); // subtract a Duration instance date = date.minus(workingDays(6)); // example user-written workingDays method   Note that calling plus followed by minus is not guaranteed to return the same date-time. @implSpec  Implementations must not alter either this object or the specified temporal object. Instead, an adjusted copy of the original must be returned. This provides equivalent, safe behavior for immutable and mutable implementations.  The default implementation must behave equivalent to this code:  return amount.subtractFrom(this);",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "minus(long amountToSubtract, java.time.temporal.TemporalUnit unit)",
    "name": "minus",
    "containingClass": {
      "qualifiedName": "java.time.temporal.Temporal",
      "name": "Temporal",
      "isArray": false
    },
    "targetClass": "java.time.temporal.Temporal",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.temporal.Temporal",
      "name": "java.time.temporal.Temporal",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "amountToSubtract"
      },
      {
        "type": {
          "qualifiedName": "java.time.temporal.TemporalUnit",
          "name": "TemporalUnit",
          "isArray": false
        },
        "name": "unit"
      }
    ],
    "equivalence": {
      "member": "minus(long amountToSubtract, java.time.temporal.TemporalUnit unit)",
      "comment": "Returns an object of the same type as this object with the specified period subtracted.  This method returns a new object based on this one with the specified period subtracted. For example, on a LocalDate, this could be used to subtract a number of years, months or days. The returned object will have the same observable type as this object.  In some cases, changing a field is not fully defined. For example, if the target object is a date representing the 31st March, then subtracting one month would be unclear. In cases like this, the field is responsible for resolving the result. Typically it will choose the previous valid date, which would be the last valid day of February in this example. @implSpec Implementations must behave in a manor equivalent to the default method behavior.  Implementations must not alter this object. Instead, an adjusted copy of the original must be returned. This provides equivalent, safe behavior for immutable and mutable implementations.  The default implementation must behave equivalent to this code:  return (amountToSubtract == Long.MIN_VALUE ? plus(Long.MAX_VALUE, unit).plus(1, unit) : plus(-amountToSubtract, unit));",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "until(java.time.temporal.Temporal endExclusive, java.time.temporal.TemporalUnit unit)",
    "name": "until",
    "containingClass": {
      "qualifiedName": "java.time.temporal.Temporal",
      "name": "Temporal",
      "isArray": false
    },
    "targetClass": "java.time.temporal.Temporal",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.temporal.Temporal",
          "name": "Temporal",
          "isArray": false
        },
        "name": "endExclusive"
      },
      {
        "type": {
          "qualifiedName": "java.time.temporal.TemporalUnit",
          "name": "TemporalUnit",
          "isArray": false
        },
        "name": "unit"
      }
    ],
    "equivalence": {
      "member": "until(java.time.temporal.Temporal endExclusive, java.time.temporal.TemporalUnit unit)",
      "comment": "Calculates the amount of time until another temporal in terms of the specified unit.  This calculates the amount of time between two temporal objects in terms of a single TemporalUnit. The start and end points are this and the specified temporal. The end point is converted to be of the same type as the start point if different. The result will be negative if the end is before the start. For example, the period in hours between two temporal objects can be calculated using startTime.until(endTime, HOURS).  The calculation returns a whole number, representing the number of complete units between the two temporals. For example, the period in hours between the times 11:30 and 13:29 will only be one hour as it is one minute short of two hours.  There are two equivalent ways of using this method. The first is to invoke this method directly. The second is to use TemporalUnit#between(Temporal, Temporal):  // these two lines are equivalent temporal = start.until(end, unit); temporal = unit.between(start, end);  The choice should be made based on which makes the code more readable.  For example, this method allows the number of days between two dates to be calculated:  long daysBetween = start.until(end, DAYS); // or alternatively long daysBetween = DAYS.between(start, end);  @implSpec Implementations must begin by checking to ensure that the input temporal object is of the same observable type as the implementation. They must then perform the calculation for all instances of ChronoUnit. An UnsupportedTemporalTypeException must be thrown for ChronoUnit instances that are unsupported.  If the unit is not a ChronoUnit, then the result of this method is obtained by invoking TemporalUnit.between(Temporal, Temporal) passing this as the first argument and the converted input temporal as the second argument.  In summary, implementations must behave in a manner equivalent to this pseudo-code:  // convert the end temporal to the same type as this class if (unit instanceof ChronoUnit) { // if unit is supported, then calculate and return result // else throw UnsupportedTemporalTypeException for unsupported units } return unit.between(this, convertedEndTemporal);   Note that the unit's between method must only be invoked if the two temporal objects have exactly the same type evaluated by getClass().  Implementations must ensure that no observable state is altered when this read-only method is invoked.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]