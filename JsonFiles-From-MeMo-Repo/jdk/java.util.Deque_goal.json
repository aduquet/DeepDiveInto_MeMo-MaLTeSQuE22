[
  {
    "signature": "addFirst(E e)",
    "name": "addFirst",
    "containingClass": {
      "qualifiedName": "java.util.Deque",
      "name": "Deque",
      "isArray": false
    },
    "targetClass": "java.util.Deque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "equivalence": {
      "member": "addFirst(E e)",
      "comment": "Inserts the specified element at the front of this deque if it is possible to do so immediately without violating capacity restrictions, throwing an IllegalStateException if no space is currently available. When using a capacity-restricted deque, it is generally preferable to use method #offerFirst.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "addLast(E e)",
    "name": "addLast",
    "containingClass": {
      "qualifiedName": "java.util.Deque",
      "name": "Deque",
      "isArray": false
    },
    "targetClass": "java.util.Deque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "equivalence": {
      "member": "addLast(E e)",
      "comment": "Inserts the specified element at the end of this deque if it is possible to do so immediately without violating capacity restrictions, throwing an IllegalStateException if no space is currently available. When using a capacity-restricted deque, it is generally preferable to use method #offerLast. This method is equivalent to #add.",
      "kind": "FreeText",
      "condition": "receiverObjectClone.add(args[0]);\nreceiverObjectClone.equals(receiverObjectID)"
    }
  },
  {
    "signature": "offerFirst(E e)",
    "name": "offerFirst",
    "containingClass": {
      "qualifiedName": "java.util.Deque",
      "name": "Deque",
      "isArray": false
    },
    "targetClass": "java.util.Deque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "equivalence": {
      "member": "offerFirst(E e)",
      "comment": "Inserts the specified element at the front of this deque unless it would violate capacity restrictions. When using a capacity-restricted deque, this method is generally preferable to the #addFirst method, which can fail to insert an element only by throwing an exception.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "offerLast(E e)",
    "name": "offerLast",
    "containingClass": {
      "qualifiedName": "java.util.Deque",
      "name": "Deque",
      "isArray": false
    },
    "targetClass": "java.util.Deque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "equivalence": {
      "member": "offerLast(E e)",
      "comment": "Inserts the specified element at the end of this deque unless it would violate capacity restrictions. When using a capacity-restricted deque, this method is generally preferable to the #addLast method, which can fail to insert an element only by throwing an exception.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "removeFirst()",
    "name": "removeFirst",
    "containingClass": {
      "qualifiedName": "java.util.Deque",
      "name": "Deque",
      "isArray": false
    },
    "targetClass": "java.util.Deque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "removeFirst()",
      "comment": "Retrieves and removes the first element of this deque. This method differs from #pollFirst pollFirst only in that it throws an exception if this deque is empty.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "removeLast()",
    "name": "removeLast",
    "containingClass": {
      "qualifiedName": "java.util.Deque",
      "name": "Deque",
      "isArray": false
    },
    "targetClass": "java.util.Deque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "removeLast()",
      "comment": "Retrieves and removes the last element of this deque. This method differs from #pollLast pollLast only in that it throws an exception if this deque is empty.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "pollFirst()",
    "name": "pollFirst",
    "containingClass": {
      "qualifiedName": "java.util.Deque",
      "name": "Deque",
      "isArray": false
    },
    "targetClass": "java.util.Deque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "pollFirst()",
      "comment": "Retrieves and removes the first element of this deque, or returns null if this deque is empty.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "pollLast()",
    "name": "pollLast",
    "containingClass": {
      "qualifiedName": "java.util.Deque",
      "name": "Deque",
      "isArray": false
    },
    "targetClass": "java.util.Deque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "pollLast()",
      "comment": "Retrieves and removes the last element of this deque, or returns null if this deque is empty.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getFirst()",
    "name": "getFirst",
    "containingClass": {
      "qualifiedName": "java.util.Deque",
      "name": "Deque",
      "isArray": false
    },
    "targetClass": "java.util.Deque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "getFirst()",
      "comment": "Retrieves, but does not remove, the first element of this deque. This method differs from #peekFirst peekFirst only in that it throws an exception if this deque is empty.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getLast()",
    "name": "getLast",
    "containingClass": {
      "qualifiedName": "java.util.Deque",
      "name": "Deque",
      "isArray": false
    },
    "targetClass": "java.util.Deque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "getLast()",
      "comment": "Retrieves, but does not remove, the last element of this deque. This method differs from #peekLast peekLast only in that it throws an exception if this deque is empty.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "peekFirst()",
    "name": "peekFirst",
    "containingClass": {
      "qualifiedName": "java.util.Deque",
      "name": "Deque",
      "isArray": false
    },
    "targetClass": "java.util.Deque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "peekFirst()",
      "comment": "Retrieves, but does not remove, the first element of this deque, or returns null if this deque is empty.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "peekLast()",
    "name": "peekLast",
    "containingClass": {
      "qualifiedName": "java.util.Deque",
      "name": "Deque",
      "isArray": false
    },
    "targetClass": "java.util.Deque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "peekLast()",
      "comment": "Retrieves, but does not remove, the last element of this deque, or returns null if this deque is empty.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "removeFirstOccurrence(java.lang.Object o)",
    "name": "removeFirstOccurrence",
    "containingClass": {
      "qualifiedName": "java.util.Deque",
      "name": "Deque",
      "isArray": false
    },
    "targetClass": "java.util.Deque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "o"
      }
    ],
    "equivalence": {
      "member": "removeFirstOccurrence(java.lang.Object o)",
      "comment": "Removes the first occurrence of the specified element from this deque. If the deque does not contain the element, it is unchanged. More formally, removes the first element e such that (o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e)) (if such an element exists). Returns true if this deque contained the specified element (or equivalently, if this deque changed as a result of the call).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "removeLastOccurrence(java.lang.Object o)",
    "name": "removeLastOccurrence",
    "containingClass": {
      "qualifiedName": "java.util.Deque",
      "name": "Deque",
      "isArray": false
    },
    "targetClass": "java.util.Deque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "o"
      }
    ],
    "equivalence": {
      "member": "removeLastOccurrence(java.lang.Object o)",
      "comment": "Removes the last occurrence of the specified element from this deque. If the deque does not contain the element, it is unchanged. More formally, removes the last element e such that (o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e)) (if such an element exists). Returns true if this deque contained the specified element (or equivalently, if this deque changed as a result of the call).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "add(E e)",
    "name": "add",
    "containingClass": {
      "qualifiedName": "java.util.Deque",
      "name": "Deque",
      "isArray": false
    },
    "targetClass": "java.util.Deque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "equivalence": {
      "member": "add(E e)",
      "comment": "Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque) if it is possible to do so immediately without violating capacity restrictions, returning true upon success and throwing an IllegalStateException if no space is currently available. When using a capacity-restricted deque, it is generally preferable to use #offer(Object) offer. This method is equivalent to #addLast.",
      "kind": "FreeText",
      "condition": "receiverObjectClone.addLast(args[0]);receiverObjectClone.equals(receiverObjectID)"
    }
  },
  {
    "signature": "offer(E e)",
    "name": "offer",
    "containingClass": {
      "qualifiedName": "java.util.Deque",
      "name": "Deque",
      "isArray": false
    },
    "targetClass": "java.util.Deque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "equivalence": {
      "member": "offer(E e)",
      "comment": "Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque) if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available. When using a capacity-restricted deque, this method is generally preferable to the #add method, which can fail to insert an element only by throwing an exception. This method is equivalent to #offerLast.",
      "kind": "FreeText",
      "condition": "methodResultID==(receiverObjectClone.offerLast(args[0]))"
    }
  },
  {
    "signature": "remove()",
    "name": "remove",
    "containingClass": {
      "qualifiedName": "java.util.Deque",
      "name": "Deque",
      "isArray": false
    },
    "targetClass": "java.util.Deque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "remove()",
      "comment": "Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque). This method differs from #poll poll only in that it throws an exception if this deque is empty. This method is equivalent to #removeFirst().",
      "kind": "FreeText",
      "condition": "methodResultID.equals(receiverObjectClone.removeFirst())"
    }
  },
  {
    "signature": "poll()",
    "name": "poll",
    "containingClass": {
      "qualifiedName": "java.util.Deque",
      "name": "Deque",
      "isArray": false
    },
    "targetClass": "java.util.Deque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "poll()",
      "comment": "Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty. This method is equivalent to #pollFirst().",
      "kind": "FreeText",
      "condition": "methodResultID.equals(receiverObjectClone.pollFirst())"
    }
  },
  {
    "signature": "element()",
    "name": "element",
    "containingClass": {
      "qualifiedName": "java.util.Deque",
      "name": "Deque",
      "isArray": false
    },
    "targetClass": "java.util.Deque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "element()",
      "comment": "Retrieves, but does not remove, the head of the queue represented by this deque (in other words, the first element of this deque). This method differs from #peek peek only in that it throws an exception if this deque is empty. This method is equivalent to #getFirst().",
      "kind": "FreeText",
      "condition": "methodResultID.equals(receiverObjectClone.getFirst())"
    }
  },
  {
    "signature": "peek()",
    "name": "peek",
    "containingClass": {
      "qualifiedName": "java.util.Deque",
      "name": "Deque",
      "isArray": false
    },
    "targetClass": "java.util.Deque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "peek()",
      "comment": "Retrieves, but does not remove, the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty. This method is equivalent to #peekFirst().",
      "kind": "FreeText",
      "condition": "methodResultID.equals(receiverObjectClone.peekFirst())"
    }
  },
  {
    "signature": "push(E e)",
    "name": "push",
    "containingClass": {
      "qualifiedName": "java.util.Deque",
      "name": "Deque",
      "isArray": false
    },
    "targetClass": "java.util.Deque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "equivalence": {
      "member": "push(E e)",
      "comment": "Pushes an element onto the stack represented by this deque (in other words, at the head of this deque) if it is possible to do so immediately without violating capacity restrictions, throwing an IllegalStateException if no space is currently available. This method is equivalent to #addFirst.",
      "kind": "FreeText",
      "condition": "receiverObjectClone.addFirst(args[0]);\nreceiverObjectClone.equals(receiverObjectID)"
    }
  },
  {
    "signature": "pop()",
    "name": "pop",
    "containingClass": {
      "qualifiedName": "java.util.Deque",
      "name": "Deque",
      "isArray": false
    },
    "targetClass": "java.util.Deque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "pop()",
      "comment": "Pops an element from the stack represented by this deque. In other words, removes and returns the first element of this deque. This method is equivalent to #removeFirst().",
      "kind": "FreeText",
      "condition": "methodResultID.equals(receiverObjectClone.removeFirst())"
    }
  },
  {
    "signature": "remove(java.lang.Object o)",
    "name": "remove",
    "containingClass": {
      "qualifiedName": "java.util.Deque",
      "name": "Deque",
      "isArray": false
    },
    "targetClass": "java.util.Deque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "o"
      }
    ],
    "equivalence": {
      "member": "remove(java.lang.Object o)",
      "comment": "Removes the first occurrence of the specified element from this deque. If the deque does not contain the element, it is unchanged. More formally, removes the first element e such that (o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e)) (if such an element exists). Returns true if this deque contained the specified element (or equivalently, if this deque changed as a result of the call). This method is equivalent to #removeFirstOccurrence(Object).",
      "kind": "FreeText",
      "condition": "methodResultID==(receiverObjectClone.removeFirstOccurrence(args[0]))"
    }
  },
  {
    "signature": "contains(java.lang.Object o)",
    "name": "contains",
    "containingClass": {
      "qualifiedName": "java.util.Deque",
      "name": "Deque",
      "isArray": false
    },
    "targetClass": "java.util.Deque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "o"
      }
    ],
    "equivalence": {
      "member": "contains(java.lang.Object o)",
      "comment": "Returns true if this deque contains the specified element. More formally, returns true if and only if this deque contains at least one element e such that (o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e)).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "size()",
    "name": "size",
    "containingClass": {
      "qualifiedName": "java.util.Deque",
      "name": "Deque",
      "isArray": false
    },
    "targetClass": "java.util.Deque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "size()",
      "comment": "Returns the number of elements in this deque.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "iterator()",
    "name": "iterator",
    "containingClass": {
      "qualifiedName": "java.util.Deque",
      "name": "Deque",
      "isArray": false
    },
    "targetClass": "java.util.Deque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Iterator<E>",
      "name": "java.util.Iterator<E>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "iterator()",
      "comment": "Returns an iterator over the elements in this deque in proper sequence. The elements will be returned in order from first (head) to last (tail).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "descendingIterator()",
    "name": "descendingIterator",
    "containingClass": {
      "qualifiedName": "java.util.Deque",
      "name": "Deque",
      "isArray": false
    },
    "targetClass": "java.util.Deque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Iterator<E>",
      "name": "java.util.Iterator<E>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "descendingIterator()",
      "comment": "Returns an iterator over the elements in this deque in reverse sequential order. The elements will be returned in order from last (tail) to first (head).",
      "kind": "FreeText",
      "condition": ""
    }
  }
]