[
  {
    "signature": "java.util.SimpleTimeZone(int rawOffset, java.lang.String ID)",
    "name": "java.util.SimpleTimeZone",
    "containingClass": {
      "qualifiedName": "java.util.SimpleTimeZone",
      "name": "SimpleTimeZone",
      "isArray": false
    },
    "targetClass": "java.util.SimpleTimeZone",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "rawOffset"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "ID"
      }
    ],
    "equivalence": {
      "member": "java.util.SimpleTimeZone(int rawOffset, java.lang.String ID)",
      "comment": "Constructs a SimpleTimeZone with the given base time zone offset from GMT and time zone ID with no daylight saving time schedule.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.SimpleTimeZone(int rawOffset, java.lang.String ID, int startMonth, int startDay, int startDayOfWeek, int startTime, int endMonth, int endDay, int endDayOfWeek, int endTime)",
    "name": "java.util.SimpleTimeZone",
    "containingClass": {
      "qualifiedName": "java.util.SimpleTimeZone",
      "name": "SimpleTimeZone",
      "isArray": false
    },
    "targetClass": "java.util.SimpleTimeZone",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "rawOffset"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "ID"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "startMonth"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "startDay"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "startDayOfWeek"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "startTime"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "endMonth"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "endDay"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "endDayOfWeek"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "endTime"
      }
    ],
    "equivalence": {
      "member": "java.util.SimpleTimeZone(int rawOffset, java.lang.String ID, int startMonth, int startDay, int startDayOfWeek, int startTime, int endMonth, int endDay, int endDayOfWeek, int endTime)",
      "comment": "Constructs a SimpleTimeZone with the given base time zone offset from GMT, time zone ID, and rules for starting and ending the daylight time. Both startTime and endTime are specified to be represented in the wall clock time. The amount of daylight saving is assumed to be 3600000 milliseconds (i.e., one hour). This constructor is equivalent to:  SimpleTimeZone(rawOffset, ID, startMonth, startDay, startDayOfWeek, startTime, SimpleTimeZone.#WALL_TIME, endMonth, endDay, endDayOfWeek, endTime, SimpleTimeZone.#WALL_TIME, 3600000)",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.SimpleTimeZone(int rawOffset, java.lang.String ID, int startMonth, int startDay, int startDayOfWeek, int startTime, int endMonth, int endDay, int endDayOfWeek, int endTime, int dstSavings)",
    "name": "java.util.SimpleTimeZone",
    "containingClass": {
      "qualifiedName": "java.util.SimpleTimeZone",
      "name": "SimpleTimeZone",
      "isArray": false
    },
    "targetClass": "java.util.SimpleTimeZone",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "rawOffset"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "ID"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "startMonth"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "startDay"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "startDayOfWeek"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "startTime"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "endMonth"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "endDay"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "endDayOfWeek"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "endTime"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "dstSavings"
      }
    ],
    "equivalence": {
      "member": "java.util.SimpleTimeZone(int rawOffset, java.lang.String ID, int startMonth, int startDay, int startDayOfWeek, int startTime, int endMonth, int endDay, int endDayOfWeek, int endTime, int dstSavings)",
      "comment": "Constructs a SimpleTimeZone with the given base time zone offset from GMT, time zone ID, and rules for starting and ending the daylight time. Both startTime and endTime are assumed to be represented in the wall clock time. This constructor is equivalent to:  SimpleTimeZone(rawOffset, ID, startMonth, startDay, startDayOfWeek, startTime, SimpleTimeZone.#WALL_TIME, endMonth, endDay, endDayOfWeek, endTime, SimpleTimeZone.#WALL_TIME, dstSavings)",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.SimpleTimeZone(int rawOffset, java.lang.String ID, int startMonth, int startDay, int startDayOfWeek, int startTime, int startTimeMode, int endMonth, int endDay, int endDayOfWeek, int endTime, int endTimeMode, int dstSavings)",
    "name": "java.util.SimpleTimeZone",
    "containingClass": {
      "qualifiedName": "java.util.SimpleTimeZone",
      "name": "SimpleTimeZone",
      "isArray": false
    },
    "targetClass": "java.util.SimpleTimeZone",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "rawOffset"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "ID"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "startMonth"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "startDay"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "startDayOfWeek"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "startTime"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "startTimeMode"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "endMonth"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "endDay"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "endDayOfWeek"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "endTime"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "endTimeMode"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "dstSavings"
      }
    ],
    "equivalence": {
      "member": "java.util.SimpleTimeZone(int rawOffset, java.lang.String ID, int startMonth, int startDay, int startDayOfWeek, int startTime, int startTimeMode, int endMonth, int endDay, int endDayOfWeek, int endTime, int endTimeMode, int dstSavings)",
      "comment": "Constructs a SimpleTimeZone with the given base time zone offset from GMT, time zone ID, and rules for starting and ending the daylight time. This constructor takes the full set of the start and end rules parameters, including modes of startTime and endTime. The mode specifies either #WALL_TIME wall time or #STANDARD_TIME standard time or #UTC_TIME UTC time.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setStartYear(int year)",
    "name": "setStartYear",
    "containingClass": {
      "qualifiedName": "java.util.SimpleTimeZone",
      "name": "SimpleTimeZone",
      "isArray": false
    },
    "targetClass": "java.util.SimpleTimeZone",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "year"
      }
    ],
    "equivalence": {
      "member": "setStartYear(int year)",
      "comment": "Sets the daylight saving time starting year.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setStartRule(int startMonth, int startDay, int startDayOfWeek, int startTime)",
    "name": "setStartRule",
    "containingClass": {
      "qualifiedName": "java.util.SimpleTimeZone",
      "name": "SimpleTimeZone",
      "isArray": false
    },
    "targetClass": "java.util.SimpleTimeZone",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "startMonth"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "startDay"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "startDayOfWeek"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "startTime"
      }
    ],
    "equivalence": {
      "member": "setStartRule(int startMonth, int startDay, int startDayOfWeek, int startTime)",
      "comment": "Sets the daylight saving time start rule. For example, if daylight saving time starts on the first Sunday in April at 2 am in local wall clock time, you can set the start rule by calling: setStartRule(Calendar.APRIL, 1, Calendar.SUNDAY, 2*60*60*1000);",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setStartRule(int startMonth, int startDay, int startTime)",
    "name": "setStartRule",
    "containingClass": {
      "qualifiedName": "java.util.SimpleTimeZone",
      "name": "SimpleTimeZone",
      "isArray": false
    },
    "targetClass": "java.util.SimpleTimeZone",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "startMonth"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "startDay"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "startTime"
      }
    ],
    "equivalence": {
      "member": "setStartRule(int startMonth, int startDay, int startTime)",
      "comment": "Sets the daylight saving time start rule to a fixed date within a month. This method is equivalent to: setStartRule(startMonth, startDay, 0, startTime)",
      "kind": "FreeText",
      "condition": "receiverObjectClone.setStartRule(args[0],args[1],0,args[2]);\nreceiverObjectClone.equals(receiverObjectID)"
    }
  },
  {
    "signature": "setStartRule(int startMonth, int startDay, int startDayOfWeek, int startTime, boolean after)",
    "name": "setStartRule",
    "containingClass": {
      "qualifiedName": "java.util.SimpleTimeZone",
      "name": "SimpleTimeZone",
      "isArray": false
    },
    "targetClass": "java.util.SimpleTimeZone",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "startMonth"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "startDay"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "startDayOfWeek"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "startTime"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "after"
      }
    ],
    "equivalence": {
      "member": "setStartRule(int startMonth, int startDay, int startDayOfWeek, int startTime, boolean after)",
      "comment": "Sets the daylight saving time start rule to a weekday before or after the given date within a month, e.g., the first Monday on or after the 8th.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setEndRule(int endMonth, int endDay, int endDayOfWeek, int endTime)",
    "name": "setEndRule",
    "containingClass": {
      "qualifiedName": "java.util.SimpleTimeZone",
      "name": "SimpleTimeZone",
      "isArray": false
    },
    "targetClass": "java.util.SimpleTimeZone",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "endMonth"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "endDay"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "endDayOfWeek"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "endTime"
      }
    ],
    "equivalence": {
      "member": "setEndRule(int endMonth, int endDay, int endDayOfWeek, int endTime)",
      "comment": "Sets the daylight saving time end rule. For example, if daylight saving time ends on the last Sunday in October at 2 am in wall clock time, you can set the end rule by calling: setEndRule(Calendar.OCTOBER, -1, Calendar.SUNDAY, 2*60*60*1000);",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setEndRule(int endMonth, int endDay, int endTime)",
    "name": "setEndRule",
    "containingClass": {
      "qualifiedName": "java.util.SimpleTimeZone",
      "name": "SimpleTimeZone",
      "isArray": false
    },
    "targetClass": "java.util.SimpleTimeZone",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "endMonth"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "endDay"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "endTime"
      }
    ],
    "equivalence": {
      "member": "setEndRule(int endMonth, int endDay, int endTime)",
      "comment": "Sets the daylight saving time end rule to a fixed date within a month. This method is equivalent to: setEndRule(endMonth, endDay, 0, endTime)",
      "kind": "FreeText",
      "condition": "receiverObjectClone.setEndRule(args[0],args[1],0,args[2]);\nreceiverObjectClone.equals(receiverObjectID)"
    }
  },
  {
    "signature": "setEndRule(int endMonth, int endDay, int endDayOfWeek, int endTime, boolean after)",
    "name": "setEndRule",
    "containingClass": {
      "qualifiedName": "java.util.SimpleTimeZone",
      "name": "SimpleTimeZone",
      "isArray": false
    },
    "targetClass": "java.util.SimpleTimeZone",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "endMonth"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "endDay"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "endDayOfWeek"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "endTime"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "after"
      }
    ],
    "equivalence": {
      "member": "setEndRule(int endMonth, int endDay, int endDayOfWeek, int endTime, boolean after)",
      "comment": "Sets the daylight saving time end rule to a weekday before or after the given date within a month, e.g., the first Monday on or after the 8th.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getOffset(long date)",
    "name": "getOffset",
    "containingClass": {
      "qualifiedName": "java.util.SimpleTimeZone",
      "name": "SimpleTimeZone",
      "isArray": false
    },
    "targetClass": "java.util.SimpleTimeZone",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "date"
      }
    ],
    "equivalence": {
      "member": "getOffset(long date)",
      "comment": "Returns the offset of this time zone from UTC at the given time. If daylight saving time is in effect at the given time, the offset value is adjusted with the amount of daylight saving.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getOffsets(long date, int[] offsets)",
    "name": "getOffsets",
    "containingClass": {
      "qualifiedName": "java.util.SimpleTimeZone",
      "name": "SimpleTimeZone",
      "isArray": false
    },
    "targetClass": "java.util.SimpleTimeZone",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "date"
      },
      {
        "type": {
          "qualifiedName": "[I",
          "name": "int[]",
          "isArray": true
        },
        "name": "offsets"
      }
    ],
    "equivalence": {
      "member": "getOffsets(long date, int[] offsets)",
      "comment": "@see TimeZone#getOffsets",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getOffset(int era, int year, int month, int day, int dayOfWeek, int millis)",
    "name": "getOffset",
    "containingClass": {
      "qualifiedName": "java.util.SimpleTimeZone",
      "name": "SimpleTimeZone",
      "isArray": false
    },
    "targetClass": "java.util.SimpleTimeZone",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "era"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "year"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "month"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "day"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "dayOfWeek"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "millis"
      }
    ],
    "equivalence": {
      "member": "getOffset(int era, int year, int month, int day, int dayOfWeek, int millis)",
      "comment": "Returns the difference in milliseconds between local time and UTC, taking into account both the raw offset and the effect of daylight saving, for the specified date and time. This method assumes that the start and end month are distinct. It also uses a default GregorianCalendar object as its underlying calendar, such as for determining leap years. Do not use the result of this method with a calendar other than a default GregorianCalendar. Note: In general, clients should use Calendar.get(ZONE_OFFSET) + Calendar.get(DST_OFFSET) instead of calling this method.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getRawOffset()",
    "name": "getRawOffset",
    "containingClass": {
      "qualifiedName": "java.util.SimpleTimeZone",
      "name": "SimpleTimeZone",
      "isArray": false
    },
    "targetClass": "java.util.SimpleTimeZone",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "getRawOffset()",
      "comment": "Gets the GMT offset for this time zone.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setRawOffset(int offsetMillis)",
    "name": "setRawOffset",
    "containingClass": {
      "qualifiedName": "java.util.SimpleTimeZone",
      "name": "SimpleTimeZone",
      "isArray": false
    },
    "targetClass": "java.util.SimpleTimeZone",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "offsetMillis"
      }
    ],
    "equivalence": {
      "member": "setRawOffset(int offsetMillis)",
      "comment": "Sets the base time zone offset to GMT. This is the offset to add to UTC to get local time. @see #getRawOffset",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setDSTSavings(int millisSavedDuringDST)",
    "name": "setDSTSavings",
    "containingClass": {
      "qualifiedName": "java.util.SimpleTimeZone",
      "name": "SimpleTimeZone",
      "isArray": false
    },
    "targetClass": "java.util.SimpleTimeZone",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "millisSavedDuringDST"
      }
    ],
    "equivalence": {
      "member": "setDSTSavings(int millisSavedDuringDST)",
      "comment": "Sets the amount of time in milliseconds that the clock is advanced during daylight saving time.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getDSTSavings()",
    "name": "getDSTSavings",
    "containingClass": {
      "qualifiedName": "java.util.SimpleTimeZone",
      "name": "SimpleTimeZone",
      "isArray": false
    },
    "targetClass": "java.util.SimpleTimeZone",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "getDSTSavings()",
      "comment": "Returns the amount of time in milliseconds that the clock is advanced during daylight saving time.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "useDaylightTime()",
    "name": "useDaylightTime",
    "containingClass": {
      "qualifiedName": "java.util.SimpleTimeZone",
      "name": "SimpleTimeZone",
      "isArray": false
    },
    "targetClass": "java.util.SimpleTimeZone",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "useDaylightTime()",
      "comment": "Queries if this time zone uses daylight saving time.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "observesDaylightTime()",
    "name": "observesDaylightTime",
    "containingClass": {
      "qualifiedName": "java.util.SimpleTimeZone",
      "name": "SimpleTimeZone",
      "isArray": false
    },
    "targetClass": "java.util.SimpleTimeZone",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "observesDaylightTime()",
      "comment": "Returns true if this SimpleTimeZone observes Daylight Saving Time. This method is equivalent to #useDaylightTime().",
      "kind": "FreeText",
      "condition": "methodResultID==(receiverObjectClone.useDaylightTime())"
    }
  },
  {
    "signature": "inDaylightTime(java.util.Date date)",
    "name": "inDaylightTime",
    "containingClass": {
      "qualifiedName": "java.util.SimpleTimeZone",
      "name": "SimpleTimeZone",
      "isArray": false
    },
    "targetClass": "java.util.SimpleTimeZone",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Date",
          "name": "Date",
          "isArray": false
        },
        "name": "date"
      }
    ],
    "equivalence": {
      "member": "inDaylightTime(java.util.Date date)",
      "comment": "Queries if the given date is in daylight saving time.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "clone()",
    "name": "clone",
    "containingClass": {
      "qualifiedName": "java.util.SimpleTimeZone",
      "name": "SimpleTimeZone",
      "isArray": false
    },
    "targetClass": "java.util.SimpleTimeZone",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Object",
      "name": "java.lang.Object",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "clone()",
      "comment": "Returns a clone of this SimpleTimeZone instance.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "hashCode()",
    "name": "hashCode",
    "containingClass": {
      "qualifiedName": "java.util.SimpleTimeZone",
      "name": "SimpleTimeZone",
      "isArray": false
    },
    "targetClass": "java.util.SimpleTimeZone",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "hashCode()",
      "comment": "Generates the hash code for the SimpleDateFormat object.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "equals(java.lang.Object obj)",
    "name": "equals",
    "containingClass": {
      "qualifiedName": "java.util.SimpleTimeZone",
      "name": "SimpleTimeZone",
      "isArray": false
    },
    "targetClass": "java.util.SimpleTimeZone",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "obj"
      }
    ],
    "equivalence": {
      "member": "equals(java.lang.Object obj)",
      "comment": "Compares the equality of two SimpleTimeZone objects.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "hasSameRules(java.util.TimeZone other)",
    "name": "hasSameRules",
    "containingClass": {
      "qualifiedName": "java.util.SimpleTimeZone",
      "name": "SimpleTimeZone",
      "isArray": false
    },
    "targetClass": "java.util.SimpleTimeZone",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.TimeZone",
          "name": "TimeZone",
          "isArray": false
        },
        "name": "other"
      }
    ],
    "equivalence": {
      "member": "hasSameRules(java.util.TimeZone other)",
      "comment": "Returns true if this zone has the same rules and offset as another zone.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toString()",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "java.util.SimpleTimeZone",
      "name": "SimpleTimeZone",
      "isArray": false
    },
    "targetClass": "java.util.SimpleTimeZone",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "toString()",
      "comment": "Returns a string representation of this time zone.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]