[
  {
    "signature": "ofDateAdjuster(java.util.function.UnaryOperator<java.time.LocalDate> dateBasedAdjuster)",
    "name": "ofDateAdjuster",
    "containingClass": {
      "qualifiedName": "java.time.temporal.TemporalAdjusters",
      "name": "TemporalAdjusters",
      "isArray": false
    },
    "targetClass": "java.time.temporal.TemporalAdjusters",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.temporal.TemporalAdjuster",
      "name": "java.time.temporal.TemporalAdjuster",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.UnaryOperator",
          "name": "UnaryOperator",
          "isArray": false
        },
        "name": "dateBasedAdjuster"
      }
    ],
    "equivalence": {
      "member": "ofDateAdjuster(java.util.function.UnaryOperator<java.time.LocalDate> dateBasedAdjuster)",
      "comment": "Obtains a TemporalAdjuster that wraps a date adjuster.  The TemporalAdjuster is based on the low level Temporal interface. This method allows an adjustment from LocalDate to LocalDate to be wrapped to match the temporal-based interface. This is provided for convenience to make user-written adjusters simpler.  In general, user-written adjusters should be static constants: static TemporalAdjuster TWO_DAYS_LATER = TemporalAdjusters.ofDateAdjuster(date -> date.plusDays(2));",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "firstDayOfMonth()",
    "name": "firstDayOfMonth",
    "containingClass": {
      "qualifiedName": "java.time.temporal.TemporalAdjusters",
      "name": "TemporalAdjusters",
      "isArray": false
    },
    "targetClass": "java.time.temporal.TemporalAdjusters",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.temporal.TemporalAdjuster",
      "name": "java.time.temporal.TemporalAdjuster",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "firstDayOfMonth()",
      "comment": "Returns the \"first day of month\" adjuster, which returns a new date set to the first day of the current month.  The ISO calendar system behaves as follows:<br> The input 2011-01-15 will return 2011-01-01.<br> The input 2011-02-15 will return 2011-02-01.  The behavior is suitable for use with most calendar systems. It is equivalent to:  temporal.with(DAY_OF_MONTH, 1);",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "lastDayOfMonth()",
    "name": "lastDayOfMonth",
    "containingClass": {
      "qualifiedName": "java.time.temporal.TemporalAdjusters",
      "name": "TemporalAdjusters",
      "isArray": false
    },
    "targetClass": "java.time.temporal.TemporalAdjusters",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.temporal.TemporalAdjuster",
      "name": "java.time.temporal.TemporalAdjuster",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "lastDayOfMonth()",
      "comment": "Returns the \"last day of month\" adjuster, which returns a new date set to the last day of the current month.  The ISO calendar system behaves as follows:<br> The input 2011-01-15 will return 2011-01-31.<br> The input 2011-02-15 will return 2011-02-28.<br> The input 2012-02-15 will return 2012-02-29 (leap year).<br> The input 2011-04-15 will return 2011-04-30.  The behavior is suitable for use with most calendar systems. It is equivalent to:  long lastDay = temporal.range(DAY_OF_MONTH).getMaximum(); temporal.with(DAY_OF_MONTH, lastDay);",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "firstDayOfNextMonth()",
    "name": "firstDayOfNextMonth",
    "containingClass": {
      "qualifiedName": "java.time.temporal.TemporalAdjusters",
      "name": "TemporalAdjusters",
      "isArray": false
    },
    "targetClass": "java.time.temporal.TemporalAdjusters",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.temporal.TemporalAdjuster",
      "name": "java.time.temporal.TemporalAdjuster",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "firstDayOfNextMonth()",
      "comment": "Returns the \"first day of next month\" adjuster, which returns a new date set to the first day of the next month.  The ISO calendar system behaves as follows:<br> The input 2011-01-15 will return 2011-02-01.<br> The input 2011-02-15 will return 2011-03-01.  The behavior is suitable for use with most calendar systems. It is equivalent to:  temporal.with(DAY_OF_MONTH, 1).plus(1, MONTHS);",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "firstDayOfYear()",
    "name": "firstDayOfYear",
    "containingClass": {
      "qualifiedName": "java.time.temporal.TemporalAdjusters",
      "name": "TemporalAdjusters",
      "isArray": false
    },
    "targetClass": "java.time.temporal.TemporalAdjusters",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.temporal.TemporalAdjuster",
      "name": "java.time.temporal.TemporalAdjuster",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "firstDayOfYear()",
      "comment": "Returns the \"first day of year\" adjuster, which returns a new date set to the first day of the current year.  The ISO calendar system behaves as follows:<br> The input 2011-01-15 will return 2011-01-01.<br> The input 2011-02-15 will return 2011-01-01.<br>  The behavior is suitable for use with most calendar systems. It is equivalent to:  temporal.with(DAY_OF_YEAR, 1);",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "lastDayOfYear()",
    "name": "lastDayOfYear",
    "containingClass": {
      "qualifiedName": "java.time.temporal.TemporalAdjusters",
      "name": "TemporalAdjusters",
      "isArray": false
    },
    "targetClass": "java.time.temporal.TemporalAdjusters",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.temporal.TemporalAdjuster",
      "name": "java.time.temporal.TemporalAdjuster",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "lastDayOfYear()",
      "comment": "Returns the \"last day of year\" adjuster, which returns a new date set to the last day of the current year.  The ISO calendar system behaves as follows:<br> The input 2011-01-15 will return 2011-12-31.<br> The input 2011-02-15 will return 2011-12-31.<br>  The behavior is suitable for use with most calendar systems. It is equivalent to:  long lastDay = temporal.range(DAY_OF_YEAR).getMaximum(); temporal.with(DAY_OF_YEAR, lastDay);",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "firstDayOfNextYear()",
    "name": "firstDayOfNextYear",
    "containingClass": {
      "qualifiedName": "java.time.temporal.TemporalAdjusters",
      "name": "TemporalAdjusters",
      "isArray": false
    },
    "targetClass": "java.time.temporal.TemporalAdjusters",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.temporal.TemporalAdjuster",
      "name": "java.time.temporal.TemporalAdjuster",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "firstDayOfNextYear()",
      "comment": "Returns the \"first day of next year\" adjuster, which returns a new date set to the first day of the next year.  The ISO calendar system behaves as follows:<br> The input 2011-01-15 will return 2012-01-01.  The behavior is suitable for use with most calendar systems. It is equivalent to:  temporal.with(DAY_OF_YEAR, 1).plus(1, YEARS);",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "firstInMonth(java.time.DayOfWeek dayOfWeek)",
    "name": "firstInMonth",
    "containingClass": {
      "qualifiedName": "java.time.temporal.TemporalAdjusters",
      "name": "TemporalAdjusters",
      "isArray": false
    },
    "targetClass": "java.time.temporal.TemporalAdjusters",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.temporal.TemporalAdjuster",
      "name": "java.time.temporal.TemporalAdjuster",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.DayOfWeek",
          "name": "DayOfWeek",
          "isArray": false
        },
        "name": "dayOfWeek"
      }
    ],
    "equivalence": {
      "member": "firstInMonth(java.time.DayOfWeek dayOfWeek)",
      "comment": "Returns the first in month adjuster, which returns a new date in the same month with the first matching day-of-week. This is used for expressions like 'first Tuesday in March'.  The ISO calendar system behaves as follows:<br> The input 2011-12-15 for (MONDAY) will return 2011-12-05.<br> The input 2011-12-15 for (FRIDAY) will return 2011-12-02.<br>  The behavior is suitable for use with most calendar systems. It uses the DAY_OF_WEEK and DAY_OF_MONTH fields and the DAYS unit, and assumes a seven day week.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "lastInMonth(java.time.DayOfWeek dayOfWeek)",
    "name": "lastInMonth",
    "containingClass": {
      "qualifiedName": "java.time.temporal.TemporalAdjusters",
      "name": "TemporalAdjusters",
      "isArray": false
    },
    "targetClass": "java.time.temporal.TemporalAdjusters",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.temporal.TemporalAdjuster",
      "name": "java.time.temporal.TemporalAdjuster",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.DayOfWeek",
          "name": "DayOfWeek",
          "isArray": false
        },
        "name": "dayOfWeek"
      }
    ],
    "equivalence": {
      "member": "lastInMonth(java.time.DayOfWeek dayOfWeek)",
      "comment": "Returns the last in month adjuster, which returns a new date in the same month with the last matching day-of-week. This is used for expressions like 'last Tuesday in March'.  The ISO calendar system behaves as follows:<br> The input 2011-12-15 for (MONDAY) will return 2011-12-26.<br> The input 2011-12-15 for (FRIDAY) will return 2011-12-30.<br>  The behavior is suitable for use with most calendar systems. It uses the DAY_OF_WEEK and DAY_OF_MONTH fields and the DAYS unit, and assumes a seven day week.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "dayOfWeekInMonth(int ordinal, java.time.DayOfWeek dayOfWeek)",
    "name": "dayOfWeekInMonth",
    "containingClass": {
      "qualifiedName": "java.time.temporal.TemporalAdjusters",
      "name": "TemporalAdjusters",
      "isArray": false
    },
    "targetClass": "java.time.temporal.TemporalAdjusters",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.temporal.TemporalAdjuster",
      "name": "java.time.temporal.TemporalAdjuster",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "ordinal"
      },
      {
        "type": {
          "qualifiedName": "java.time.DayOfWeek",
          "name": "DayOfWeek",
          "isArray": false
        },
        "name": "dayOfWeek"
      }
    ],
    "equivalence": {
      "member": "dayOfWeekInMonth(int ordinal, java.time.DayOfWeek dayOfWeek)",
      "comment": "Returns the day-of-week in month adjuster, which returns a new date in the same month with the ordinal day-of-week. This is used for expressions like the 'second Tuesday in March'.  The ISO calendar system behaves as follows:<br> The input 2011-12-15 for (1,TUESDAY) will return 2011-12-06.<br> The input 2011-12-15 for (2,TUESDAY) will return 2011-12-13.<br> The input 2011-12-15 for (3,TUESDAY) will return 2011-12-20.<br> The input 2011-12-15 for (4,TUESDAY) will return 2011-12-27.<br> The input 2011-12-15 for (5,TUESDAY) will return 2012-01-03.<br> The input 2011-12-15 for (-1,TUESDAY) will return 2011-12-27 (last in month).<br> The input 2011-12-15 for (-4,TUESDAY) will return 2011-12-06 (3 weeks before last in month).<br> The input 2011-12-15 for (-5,TUESDAY) will return 2011-11-29 (4 weeks before last in month).<br> The input 2011-12-15 for (0,TUESDAY) will return 2011-11-29 (last in previous month).<br>  For a positive or zero ordinal, the algorithm is equivalent to finding the first day-of-week that matches within the month and then adding a number of weeks to it. For a negative ordinal, the algorithm is equivalent to finding the last day-of-week that matches within the month and then subtracting a number of weeks to it. The ordinal number of weeks is not validated and is interpreted leniently according to this algorithm. This definition means that an ordinal of zero finds the last matching day-of-week in the previous month.  The behavior is suitable for use with most calendar systems. It uses the DAY_OF_WEEK and DAY_OF_MONTH fields and the DAYS unit, and assumes a seven day week.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "next(java.time.DayOfWeek dayOfWeek)",
    "name": "next",
    "containingClass": {
      "qualifiedName": "java.time.temporal.TemporalAdjusters",
      "name": "TemporalAdjusters",
      "isArray": false
    },
    "targetClass": "java.time.temporal.TemporalAdjusters",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.temporal.TemporalAdjuster",
      "name": "java.time.temporal.TemporalAdjuster",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.DayOfWeek",
          "name": "DayOfWeek",
          "isArray": false
        },
        "name": "dayOfWeek"
      }
    ],
    "equivalence": {
      "member": "next(java.time.DayOfWeek dayOfWeek)",
      "comment": "Returns the next day-of-week adjuster, which adjusts the date to the first occurrence of the specified day-of-week after the date being adjusted.  The ISO calendar system behaves as follows:<br> The input 2011-01-15 (a Saturday) for parameter (MONDAY) will return 2011-01-17 (two days later).<br> The input 2011-01-15 (a Saturday) for parameter (WEDNESDAY) will return 2011-01-19 (four days later).<br> The input 2011-01-15 (a Saturday) for parameter (SATURDAY) will return 2011-01-22 (seven days later).  The behavior is suitable for use with most calendar systems. It uses the DAY_OF_WEEK field and the DAYS unit, and assumes a seven day week.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "nextOrSame(java.time.DayOfWeek dayOfWeek)",
    "name": "nextOrSame",
    "containingClass": {
      "qualifiedName": "java.time.temporal.TemporalAdjusters",
      "name": "TemporalAdjusters",
      "isArray": false
    },
    "targetClass": "java.time.temporal.TemporalAdjusters",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.temporal.TemporalAdjuster",
      "name": "java.time.temporal.TemporalAdjuster",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.DayOfWeek",
          "name": "DayOfWeek",
          "isArray": false
        },
        "name": "dayOfWeek"
      }
    ],
    "equivalence": {
      "member": "nextOrSame(java.time.DayOfWeek dayOfWeek)",
      "comment": "Returns the next-or-same day-of-week adjuster, which adjusts the date to the first occurrence of the specified day-of-week after the date being adjusted unless it is already on that day in which case the same object is returned.  The ISO calendar system behaves as follows:<br> The input 2011-01-15 (a Saturday) for parameter (MONDAY) will return 2011-01-17 (two days later).<br> The input 2011-01-15 (a Saturday) for parameter (WEDNESDAY) will return 2011-01-19 (four days later).<br> The input 2011-01-15 (a Saturday) for parameter (SATURDAY) will return 2011-01-15 (same as input).  The behavior is suitable for use with most calendar systems. It uses the DAY_OF_WEEK field and the DAYS unit, and assumes a seven day week.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "previous(java.time.DayOfWeek dayOfWeek)",
    "name": "previous",
    "containingClass": {
      "qualifiedName": "java.time.temporal.TemporalAdjusters",
      "name": "TemporalAdjusters",
      "isArray": false
    },
    "targetClass": "java.time.temporal.TemporalAdjusters",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.temporal.TemporalAdjuster",
      "name": "java.time.temporal.TemporalAdjuster",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.DayOfWeek",
          "name": "DayOfWeek",
          "isArray": false
        },
        "name": "dayOfWeek"
      }
    ],
    "equivalence": {
      "member": "previous(java.time.DayOfWeek dayOfWeek)",
      "comment": "Returns the previous day-of-week adjuster, which adjusts the date to the first occurrence of the specified day-of-week before the date being adjusted.  The ISO calendar system behaves as follows:<br> The input 2011-01-15 (a Saturday) for parameter (MONDAY) will return 2011-01-10 (five days earlier).<br> The input 2011-01-15 (a Saturday) for parameter (WEDNESDAY) will return 2011-01-12 (three days earlier).<br> The input 2011-01-15 (a Saturday) for parameter (SATURDAY) will return 2011-01-08 (seven days earlier).  The behavior is suitable for use with most calendar systems. It uses the DAY_OF_WEEK field and the DAYS unit, and assumes a seven day week.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "previousOrSame(java.time.DayOfWeek dayOfWeek)",
    "name": "previousOrSame",
    "containingClass": {
      "qualifiedName": "java.time.temporal.TemporalAdjusters",
      "name": "TemporalAdjusters",
      "isArray": false
    },
    "targetClass": "java.time.temporal.TemporalAdjusters",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.temporal.TemporalAdjuster",
      "name": "java.time.temporal.TemporalAdjuster",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.DayOfWeek",
          "name": "DayOfWeek",
          "isArray": false
        },
        "name": "dayOfWeek"
      }
    ],
    "equivalence": {
      "member": "previousOrSame(java.time.DayOfWeek dayOfWeek)",
      "comment": "Returns the previous-or-same day-of-week adjuster, which adjusts the date to the first occurrence of the specified day-of-week before the date being adjusted unless it is already on that day in which case the same object is returned.  The ISO calendar system behaves as follows:<br> The input 2011-01-15 (a Saturday) for parameter (MONDAY) will return 2011-01-10 (five days earlier).<br> The input 2011-01-15 (a Saturday) for parameter (WEDNESDAY) will return 2011-01-12 (three days earlier).<br> The input 2011-01-15 (a Saturday) for parameter (SATURDAY) will return 2011-01-15 (same as input).  The behavior is suitable for use with most calendar systems. It uses the DAY_OF_WEEK field and the DAYS unit, and assumes a seven day week.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]