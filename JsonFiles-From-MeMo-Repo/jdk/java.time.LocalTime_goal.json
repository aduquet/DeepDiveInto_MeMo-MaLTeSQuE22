[
  {
    "signature": "now()",
    "name": "now",
    "containingClass": {
      "qualifiedName": "java.time.LocalTime",
      "name": "LocalTime",
      "isArray": false
    },
    "targetClass": "java.time.LocalTime",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.LocalTime",
      "name": "java.time.LocalTime",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "now()",
      "comment": "Obtains the current time from the system clock in the default time-zone.  This will query the Clock#systemDefaultZone() system clock in the default time-zone to obtain the current time.  Using this method will prevent the ability to use an alternate clock for testing because the clock is hard-coded.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "now(java.time.ZoneId zone)",
    "name": "now",
    "containingClass": {
      "qualifiedName": "java.time.LocalTime",
      "name": "LocalTime",
      "isArray": false
    },
    "targetClass": "java.time.LocalTime",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.LocalTime",
      "name": "java.time.LocalTime",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.ZoneId",
          "name": "ZoneId",
          "isArray": false
        },
        "name": "zone"
      }
    ],
    "equivalence": {
      "member": "now(java.time.ZoneId zone)",
      "comment": "Obtains the current time from the system clock in the specified time-zone.  This will query the Clock#system(ZoneId) system clock to obtain the current time. Specifying the time-zone avoids dependence on the default time-zone.  Using this method will prevent the ability to use an alternate clock for testing because the clock is hard-coded.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "now(java.time.Clock clock)",
    "name": "now",
    "containingClass": {
      "qualifiedName": "java.time.LocalTime",
      "name": "LocalTime",
      "isArray": false
    },
    "targetClass": "java.time.LocalTime",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.LocalTime",
      "name": "java.time.LocalTime",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.Clock",
          "name": "Clock",
          "isArray": false
        },
        "name": "clock"
      }
    ],
    "equivalence": {
      "member": "now(java.time.Clock clock)",
      "comment": "Obtains the current time from the specified clock.  This will query the specified clock to obtain the current time. Using this method allows the use of an alternate clock for testing. The alternate clock may be introduced using Clock dependency injection.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "of(int hour, int minute)",
    "name": "of",
    "containingClass": {
      "qualifiedName": "java.time.LocalTime",
      "name": "LocalTime",
      "isArray": false
    },
    "targetClass": "java.time.LocalTime",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.LocalTime",
      "name": "java.time.LocalTime",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "hour"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "minute"
      }
    ],
    "equivalence": {
      "member": "of(int hour, int minute)",
      "comment": "Obtains an instance of LocalTime from an hour and minute.  This returns a LocalTime with the specified hour and minute. The second and nanosecond fields will be set to zero.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "of(int hour, int minute, int second)",
    "name": "of",
    "containingClass": {
      "qualifiedName": "java.time.LocalTime",
      "name": "LocalTime",
      "isArray": false
    },
    "targetClass": "java.time.LocalTime",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.LocalTime",
      "name": "java.time.LocalTime",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "hour"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "minute"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "second"
      }
    ],
    "equivalence": {
      "member": "of(int hour, int minute, int second)",
      "comment": "Obtains an instance of LocalTime from an hour, minute and second.  This returns a LocalTime with the specified hour, minute and second. The nanosecond field will be set to zero.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "of(int hour, int minute, int second, int nanoOfSecond)",
    "name": "of",
    "containingClass": {
      "qualifiedName": "java.time.LocalTime",
      "name": "LocalTime",
      "isArray": false
    },
    "targetClass": "java.time.LocalTime",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.LocalTime",
      "name": "java.time.LocalTime",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "hour"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "minute"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "second"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "nanoOfSecond"
      }
    ],
    "equivalence": {
      "member": "of(int hour, int minute, int second, int nanoOfSecond)",
      "comment": "Obtains an instance of LocalTime from an hour, minute, second and nanosecond.  This returns a LocalTime with the specified hour, minute, second and nanosecond.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "ofSecondOfDay(long secondOfDay)",
    "name": "ofSecondOfDay",
    "containingClass": {
      "qualifiedName": "java.time.LocalTime",
      "name": "LocalTime",
      "isArray": false
    },
    "targetClass": "java.time.LocalTime",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.LocalTime",
      "name": "java.time.LocalTime",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "secondOfDay"
      }
    ],
    "equivalence": {
      "member": "ofSecondOfDay(long secondOfDay)",
      "comment": "Obtains an instance of LocalTime from a second-of-day value.  This returns a LocalTime with the specified second-of-day. The nanosecond field will be set to zero.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "ofNanoOfDay(long nanoOfDay)",
    "name": "ofNanoOfDay",
    "containingClass": {
      "qualifiedName": "java.time.LocalTime",
      "name": "LocalTime",
      "isArray": false
    },
    "targetClass": "java.time.LocalTime",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.LocalTime",
      "name": "java.time.LocalTime",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "nanoOfDay"
      }
    ],
    "equivalence": {
      "member": "ofNanoOfDay(long nanoOfDay)",
      "comment": "Obtains an instance of LocalTime from a nanos-of-day value.  This returns a LocalTime with the specified nanosecond-of-day.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "from(java.time.temporal.TemporalAccessor temporal)",
    "name": "from",
    "containingClass": {
      "qualifiedName": "java.time.LocalTime",
      "name": "LocalTime",
      "isArray": false
    },
    "targetClass": "java.time.LocalTime",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.LocalTime",
      "name": "java.time.LocalTime",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.temporal.TemporalAccessor",
          "name": "TemporalAccessor",
          "isArray": false
        },
        "name": "temporal"
      }
    ],
    "equivalence": {
      "member": "from(java.time.temporal.TemporalAccessor temporal)",
      "comment": "Obtains an instance of LocalTime from a temporal object.  This obtains a local time based on the specified temporal. A TemporalAccessor represents an arbitrary set of date and time information, which this factory converts to an instance of LocalTime.  The conversion uses the TemporalQueries#localTime() query, which relies on extracting the ChronoField#NANO_OF_DAY NANO_OF_DAY field.  This method matches the signature of the functional interface TemporalQuery allowing it to be used in queries via method reference, LocalTime::from.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "parse(java.lang.CharSequence text)",
    "name": "parse",
    "containingClass": {
      "qualifiedName": "java.time.LocalTime",
      "name": "LocalTime",
      "isArray": false
    },
    "targetClass": "java.time.LocalTime",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.LocalTime",
      "name": "java.time.LocalTime",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.CharSequence",
          "name": "CharSequence",
          "isArray": false
        },
        "name": "text"
      }
    ],
    "equivalence": {
      "member": "parse(java.lang.CharSequence text)",
      "comment": "Obtains an instance of LocalTime from a text string such as 10:15.  The string must represent a valid time and is parsed using java.time.format.DateTimeFormatter#ISO_LOCAL_TIME.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "parse(java.lang.CharSequence text, java.time.format.DateTimeFormatter formatter)",
    "name": "parse",
    "containingClass": {
      "qualifiedName": "java.time.LocalTime",
      "name": "LocalTime",
      "isArray": false
    },
    "targetClass": "java.time.LocalTime",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.LocalTime",
      "name": "java.time.LocalTime",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.CharSequence",
          "name": "CharSequence",
          "isArray": false
        },
        "name": "text"
      },
      {
        "type": {
          "qualifiedName": "java.time.format.DateTimeFormatter",
          "name": "DateTimeFormatter",
          "isArray": false
        },
        "name": "formatter"
      }
    ],
    "equivalence": {
      "member": "parse(java.lang.CharSequence text, java.time.format.DateTimeFormatter formatter)",
      "comment": "Obtains an instance of LocalTime from a text string using a specific formatter.  The text is parsed using the formatter, returning a time.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "isSupported(java.time.temporal.TemporalField field)",
    "name": "isSupported",
    "containingClass": {
      "qualifiedName": "java.time.LocalTime",
      "name": "LocalTime",
      "isArray": false
    },
    "targetClass": "java.time.LocalTime",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.temporal.TemporalField",
          "name": "TemporalField",
          "isArray": false
        },
        "name": "field"
      }
    ],
    "equivalence": {
      "member": "isSupported(java.time.temporal.TemporalField field)",
      "comment": "Checks if the specified field is supported.  This checks if this time can be queried for the specified field. If false, then calling the #range(TemporalField) range, #get(TemporalField) get and #with(TemporalField, long) methods will throw an exception.  If the field is a ChronoField then the query is implemented here. The supported fields are:  <li>NANO_OF_SECOND <li>NANO_OF_DAY <li>MICRO_OF_SECOND <li>MICRO_OF_DAY <li>MILLI_OF_SECOND <li>MILLI_OF_DAY <li>SECOND_OF_MINUTE <li>SECOND_OF_DAY <li>MINUTE_OF_HOUR <li>MINUTE_OF_DAY <li>HOUR_OF_AMPM <li>CLOCK_HOUR_OF_AMPM <li>HOUR_OF_DAY <li>CLOCK_HOUR_OF_DAY <li>AMPM_OF_DAY  All other ChronoField instances will return false.  If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.isSupportedBy(TemporalAccessor) passing this as the argument. Whether the field is supported is determined by the field.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "isSupported(java.time.temporal.TemporalUnit unit)",
    "name": "isSupported",
    "containingClass": {
      "qualifiedName": "java.time.LocalTime",
      "name": "LocalTime",
      "isArray": false
    },
    "targetClass": "java.time.LocalTime",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.temporal.TemporalUnit",
          "name": "TemporalUnit",
          "isArray": false
        },
        "name": "unit"
      }
    ],
    "equivalence": {
      "member": "isSupported(java.time.temporal.TemporalUnit unit)",
      "comment": "Checks if the specified unit is supported.  This checks if the specified unit can be added to, or subtracted from, this date-time. If false, then calling the #plus(long, TemporalUnit) and #minus(long, TemporalUnit) minus methods will throw an exception.  If the unit is a ChronoUnit then the query is implemented here. The supported units are:  <li>NANOS <li>MICROS <li>MILLIS <li>SECONDS <li>MINUTES <li>HOURS <li>HALF_DAYS  All other ChronoUnit instances will return false.  If the unit is not a ChronoUnit, then the result of this method is obtained by invoking TemporalUnit.isSupportedBy(Temporal) passing this as the argument. Whether the unit is supported is determined by the unit.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "range(java.time.temporal.TemporalField field)",
    "name": "range",
    "containingClass": {
      "qualifiedName": "java.time.LocalTime",
      "name": "LocalTime",
      "isArray": false
    },
    "targetClass": "java.time.LocalTime",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.temporal.ValueRange",
      "name": "java.time.temporal.ValueRange",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.temporal.TemporalField",
          "name": "TemporalField",
          "isArray": false
        },
        "name": "field"
      }
    ],
    "equivalence": {
      "member": "range(java.time.temporal.TemporalField field)",
      "comment": "Gets the range of valid values for the specified field.  The range object expresses the minimum and maximum valid values for a field. This time is used to enhance the accuracy of the returned range. If it is not possible to return the range, because the field is not supported or for some other reason, an exception is thrown.  If the field is a ChronoField then the query is implemented here. The #isSupported(TemporalField) supported fields will return appropriate range instances. All other ChronoField instances will throw an UnsupportedTemporalTypeException.  If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.rangeRefinedBy(TemporalAccessor) passing this as the argument. Whether the range can be obtained is determined by the field.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "get(java.time.temporal.TemporalField field)",
    "name": "get",
    "containingClass": {
      "qualifiedName": "java.time.LocalTime",
      "name": "LocalTime",
      "isArray": false
    },
    "targetClass": "java.time.LocalTime",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.temporal.TemporalField",
          "name": "TemporalField",
          "isArray": false
        },
        "name": "field"
      }
    ],
    "equivalence": {
      "member": "get(java.time.temporal.TemporalField field)",
      "comment": "Gets the value of the specified field from this time as an int.  This queries this time for the value for the specified field. The returned value will always be within the valid range of values for the field. If it is not possible to return the value, because the field is not supported or for some other reason, an exception is thrown.  If the field is a ChronoField then the query is implemented here. The #isSupported(TemporalField) supported fields will return valid values based on this time, except NANO_OF_DAY and MICRO_OF_DAY which are too large to fit in an int and throw a DateTimeException. All other ChronoField instances will throw an UnsupportedTemporalTypeException.  If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.getFrom(TemporalAccessor) passing this as the argument. Whether the value can be obtained, and what the value represents, is determined by the field.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getLong(java.time.temporal.TemporalField field)",
    "name": "getLong",
    "containingClass": {
      "qualifiedName": "java.time.LocalTime",
      "name": "LocalTime",
      "isArray": false
    },
    "targetClass": "java.time.LocalTime",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.temporal.TemporalField",
          "name": "TemporalField",
          "isArray": false
        },
        "name": "field"
      }
    ],
    "equivalence": {
      "member": "getLong(java.time.temporal.TemporalField field)",
      "comment": "Gets the value of the specified field from this time as a long.  This queries this time for the value for the specified field. If it is not possible to return the value, because the field is not supported or for some other reason, an exception is thrown.  If the field is a ChronoField then the query is implemented here. The #isSupported(TemporalField) supported fields will return valid values based on this time. All other ChronoField instances will throw an UnsupportedTemporalTypeException.  If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.getFrom(TemporalAccessor) passing this as the argument. Whether the value can be obtained, and what the value represents, is determined by the field.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getHour()",
    "name": "getHour",
    "containingClass": {
      "qualifiedName": "java.time.LocalTime",
      "name": "LocalTime",
      "isArray": false
    },
    "targetClass": "java.time.LocalTime",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "getHour()",
      "comment": "Gets the hour-of-day field.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getMinute()",
    "name": "getMinute",
    "containingClass": {
      "qualifiedName": "java.time.LocalTime",
      "name": "LocalTime",
      "isArray": false
    },
    "targetClass": "java.time.LocalTime",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "getMinute()",
      "comment": "Gets the minute-of-hour field.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getSecond()",
    "name": "getSecond",
    "containingClass": {
      "qualifiedName": "java.time.LocalTime",
      "name": "LocalTime",
      "isArray": false
    },
    "targetClass": "java.time.LocalTime",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "getSecond()",
      "comment": "Gets the second-of-minute field.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getNano()",
    "name": "getNano",
    "containingClass": {
      "qualifiedName": "java.time.LocalTime",
      "name": "LocalTime",
      "isArray": false
    },
    "targetClass": "java.time.LocalTime",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "getNano()",
      "comment": "Gets the nano-of-second field.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "with(java.time.temporal.TemporalAdjuster adjuster)",
    "name": "with",
    "containingClass": {
      "qualifiedName": "java.time.LocalTime",
      "name": "LocalTime",
      "isArray": false
    },
    "targetClass": "java.time.LocalTime",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.LocalTime",
      "name": "java.time.LocalTime",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.temporal.TemporalAdjuster",
          "name": "TemporalAdjuster",
          "isArray": false
        },
        "name": "adjuster"
      }
    ],
    "equivalence": {
      "member": "with(java.time.temporal.TemporalAdjuster adjuster)",
      "comment": "Returns an adjusted copy of this time.  This returns a LocalTime, based on this one, with the time adjusted. The adjustment takes place using the specified adjuster strategy object. Read the documentation of the adjuster to understand what adjustment will be made.  A simple adjuster might simply set the one of the fields, such as the hour field. A more complex adjuster might set the time to the last hour of the day.  The result of this method is obtained by invoking the TemporalAdjuster#adjustInto(Temporal) method on the specified adjuster passing this as the argument.  This instance is immutable and unaffected by this method call.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "with(java.time.temporal.TemporalField field, long newValue)",
    "name": "with",
    "containingClass": {
      "qualifiedName": "java.time.LocalTime",
      "name": "LocalTime",
      "isArray": false
    },
    "targetClass": "java.time.LocalTime",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.LocalTime",
      "name": "java.time.LocalTime",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.temporal.TemporalField",
          "name": "TemporalField",
          "isArray": false
        },
        "name": "field"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "newValue"
      }
    ],
    "equivalence": {
      "member": "with(java.time.temporal.TemporalField field, long newValue)",
      "comment": "Returns a copy of this time with the specified field set to a new value.  This returns a LocalTime, based on this one, with the value for the specified field changed. This can be used to change any supported field, such as the hour, minute or second. If it is not possible to set the value, because the field is not supported or for some other reason, an exception is thrown.  If the field is a ChronoField then the adjustment is implemented here. The supported fields behave as follows:  <li>NANO_OF_SECOND - Returns a LocalTime with the specified nano-of-second. The hour, minute and second will be unchanged. <li>NANO_OF_DAY - Returns a LocalTime with the specified nano-of-day. This completely replaces the time and is equivalent to #ofNanoOfDay(long). <li>MICRO_OF_SECOND - Returns a LocalTime with the nano-of-second replaced by the specified micro-of-second multiplied by 1,000. The hour, minute and second will be unchanged. <li>MICRO_OF_DAY - Returns a LocalTime with the specified micro-of-day. This completely replaces the time and is equivalent to using #ofNanoOfDay(long) with the micro-of-day multiplied by 1,000. <li>MILLI_OF_SECOND - Returns a LocalTime with the nano-of-second replaced by the specified milli-of-second multiplied by 1,000,000. The hour, minute and second will be unchanged. <li>MILLI_OF_DAY - Returns a LocalTime with the specified milli-of-day. This completely replaces the time and is equivalent to using #ofNanoOfDay(long) with the milli-of-day multiplied by 1,000,000. <li>SECOND_OF_MINUTE - Returns a LocalTime with the specified second-of-minute. The hour, minute and nano-of-second will be unchanged. <li>SECOND_OF_DAY - Returns a LocalTime with the specified second-of-day. The nano-of-second will be unchanged. <li>MINUTE_OF_HOUR - Returns a LocalTime with the specified minute-of-hour. The hour, second-of-minute and nano-of-second will be unchanged. <li>MINUTE_OF_DAY - Returns a LocalTime with the specified minute-of-day. The second-of-minute and nano-of-second will be unchanged. <li>HOUR_OF_AMPM - Returns a LocalTime with the specified hour-of-am-pm. The AM/PM, minute-of-hour, second-of-minute and nano-of-second will be unchanged. <li>CLOCK_HOUR_OF_AMPM - Returns a LocalTime with the specified clock-hour-of-am-pm. The AM/PM, minute-of-hour, second-of-minute and nano-of-second will be unchanged. <li>HOUR_OF_DAY - Returns a LocalTime with the specified hour-of-day. The minute-of-hour, second-of-minute and nano-of-second will be unchanged. <li>CLOCK_HOUR_OF_DAY - Returns a LocalTime with the specified clock-hour-of-day. The minute-of-hour, second-of-minute and nano-of-second will be unchanged. <li>AMPM_OF_DAY - Returns a LocalTime with the specified AM/PM. The hour-of-am-pm, minute-of-hour, second-of-minute and nano-of-second will be unchanged.   In all cases, if the new value is outside the valid range of values for the field then a DateTimeException will be thrown.  All other ChronoField instances will throw an UnsupportedTemporalTypeException.  If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.adjustInto(Temporal, long) passing this as the argument. In this case, the field determines whether and how to adjust the instant.  This instance is immutable and unaffected by this method call.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "withHour(int hour)",
    "name": "withHour",
    "containingClass": {
      "qualifiedName": "java.time.LocalTime",
      "name": "LocalTime",
      "isArray": false
    },
    "targetClass": "java.time.LocalTime",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.LocalTime",
      "name": "java.time.LocalTime",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "hour"
      }
    ],
    "equivalence": {
      "member": "withHour(int hour)",
      "comment": "Returns a copy of this LocalTime with the hour-of-day value altered.  This instance is immutable and unaffected by this method call.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "withMinute(int minute)",
    "name": "withMinute",
    "containingClass": {
      "qualifiedName": "java.time.LocalTime",
      "name": "LocalTime",
      "isArray": false
    },
    "targetClass": "java.time.LocalTime",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.LocalTime",
      "name": "java.time.LocalTime",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "minute"
      }
    ],
    "equivalence": {
      "member": "withMinute(int minute)",
      "comment": "Returns a copy of this LocalTime with the minute-of-hour value altered.  This instance is immutable and unaffected by this method call.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "withSecond(int second)",
    "name": "withSecond",
    "containingClass": {
      "qualifiedName": "java.time.LocalTime",
      "name": "LocalTime",
      "isArray": false
    },
    "targetClass": "java.time.LocalTime",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.LocalTime",
      "name": "java.time.LocalTime",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "second"
      }
    ],
    "equivalence": {
      "member": "withSecond(int second)",
      "comment": "Returns a copy of this LocalTime with the second-of-minute value altered.  This instance is immutable and unaffected by this method call.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "withNano(int nanoOfSecond)",
    "name": "withNano",
    "containingClass": {
      "qualifiedName": "java.time.LocalTime",
      "name": "LocalTime",
      "isArray": false
    },
    "targetClass": "java.time.LocalTime",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.LocalTime",
      "name": "java.time.LocalTime",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "nanoOfSecond"
      }
    ],
    "equivalence": {
      "member": "withNano(int nanoOfSecond)",
      "comment": "Returns a copy of this LocalTime with the nano-of-second value altered.  This instance is immutable and unaffected by this method call.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "truncatedTo(java.time.temporal.TemporalUnit unit)",
    "name": "truncatedTo",
    "containingClass": {
      "qualifiedName": "java.time.LocalTime",
      "name": "LocalTime",
      "isArray": false
    },
    "targetClass": "java.time.LocalTime",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.LocalTime",
      "name": "java.time.LocalTime",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.temporal.TemporalUnit",
          "name": "TemporalUnit",
          "isArray": false
        },
        "name": "unit"
      }
    ],
    "equivalence": {
      "member": "truncatedTo(java.time.temporal.TemporalUnit unit)",
      "comment": "Returns a copy of this LocalTime with the time truncated.  Truncating the time returns a copy of the original time with fields smaller than the specified unit set to zero. For example, truncating with the ChronoUnit#MINUTES minutes unit will set the second-of-minute and nano-of-second field to zero.  The unit must have a TemporalUnit#getDuration() duration that divides into the length of a standard day without remainder. This includes all supplied time units on ChronoUnit and ChronoUnit#DAYS DAYS. Other units throw an exception.  This instance is immutable and unaffected by this method call.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "plus(java.time.temporal.TemporalAmount amountToAdd)",
    "name": "plus",
    "containingClass": {
      "qualifiedName": "java.time.LocalTime",
      "name": "LocalTime",
      "isArray": false
    },
    "targetClass": "java.time.LocalTime",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.LocalTime",
      "name": "java.time.LocalTime",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.temporal.TemporalAmount",
          "name": "TemporalAmount",
          "isArray": false
        },
        "name": "amountToAdd"
      }
    ],
    "equivalence": {
      "member": "plus(java.time.temporal.TemporalAmount amountToAdd)",
      "comment": "Returns a copy of this time with the specified amount added.  This returns a LocalTime, based on this one, with the specified amount added. The amount is typically Duration but may be any other type implementing the TemporalAmount interface.  The calculation is delegated to the amount object by calling TemporalAmount#addTo(Temporal). The amount implementation is free to implement the addition in any way it wishes, however it typically calls back to #plus(long, TemporalUnit). Consult the documentation of the amount implementation to determine if it can be successfully added.  This instance is immutable and unaffected by this method call.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "plus(long amountToAdd, java.time.temporal.TemporalUnit unit)",
    "name": "plus",
    "containingClass": {
      "qualifiedName": "java.time.LocalTime",
      "name": "LocalTime",
      "isArray": false
    },
    "targetClass": "java.time.LocalTime",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.LocalTime",
      "name": "java.time.LocalTime",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "amountToAdd"
      },
      {
        "type": {
          "qualifiedName": "java.time.temporal.TemporalUnit",
          "name": "TemporalUnit",
          "isArray": false
        },
        "name": "unit"
      }
    ],
    "equivalence": {
      "member": "plus(long amountToAdd, java.time.temporal.TemporalUnit unit)",
      "comment": "Returns a copy of this time with the specified amount added.  This returns a LocalTime, based on this one, with the amount in terms of the unit added. If it is not possible to add the amount, because the unit is not supported or for some other reason, an exception is thrown.  If the field is a ChronoUnit then the addition is implemented here. The supported fields behave as follows:  <li>NANOS - Returns a LocalTime with the specified number of nanoseconds added. This is equivalent to #plusNanos(long). <li>MICROS - Returns a LocalTime with the specified number of microseconds added. This is equivalent to #plusNanos(long) with the amount multiplied by 1,000. <li>MILLIS - Returns a LocalTime with the specified number of milliseconds added. This is equivalent to #plusNanos(long) with the amount multiplied by 1,000,000. <li>SECONDS - Returns a LocalTime with the specified number of seconds added. This is equivalent to #plusSeconds(long). <li>MINUTES - Returns a LocalTime with the specified number of minutes added. This is equivalent to #plusMinutes(long). <li>HOURS - Returns a LocalTime with the specified number of hours added. This is equivalent to #plusHours(long). <li>HALF_DAYS - Returns a LocalTime with the specified number of half-days added. This is equivalent to #plusHours(long) with the amount multiplied by 12.   All other ChronoUnit instances will throw an UnsupportedTemporalTypeException.  If the field is not a ChronoUnit, then the result of this method is obtained by invoking TemporalUnit.addTo(Temporal, long) passing this as the argument. In this case, the unit determines whether and how to perform the addition.  This instance is immutable and unaffected by this method call.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "plusHours(long hoursToAdd)",
    "name": "plusHours",
    "containingClass": {
      "qualifiedName": "java.time.LocalTime",
      "name": "LocalTime",
      "isArray": false
    },
    "targetClass": "java.time.LocalTime",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.LocalTime",
      "name": "java.time.LocalTime",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "hoursToAdd"
      }
    ],
    "equivalence": {
      "member": "plusHours(long hoursToAdd)",
      "comment": "Returns a copy of this LocalTime with the specified period in hours added.  This adds the specified number of hours to this time, returning a new time. The calculation wraps around midnight.  This instance is immutable and unaffected by this method call.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "plusMinutes(long minutesToAdd)",
    "name": "plusMinutes",
    "containingClass": {
      "qualifiedName": "java.time.LocalTime",
      "name": "LocalTime",
      "isArray": false
    },
    "targetClass": "java.time.LocalTime",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.LocalTime",
      "name": "java.time.LocalTime",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "minutesToAdd"
      }
    ],
    "equivalence": {
      "member": "plusMinutes(long minutesToAdd)",
      "comment": "Returns a copy of this LocalTime with the specified period in minutes added.  This adds the specified number of minutes to this time, returning a new time. The calculation wraps around midnight.  This instance is immutable and unaffected by this method call.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "plusSeconds(long secondstoAdd)",
    "name": "plusSeconds",
    "containingClass": {
      "qualifiedName": "java.time.LocalTime",
      "name": "LocalTime",
      "isArray": false
    },
    "targetClass": "java.time.LocalTime",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.LocalTime",
      "name": "java.time.LocalTime",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "secondstoAdd"
      }
    ],
    "equivalence": {
      "member": "plusSeconds(long secondstoAdd)",
      "comment": "Returns a copy of this LocalTime with the specified period in seconds added.  This adds the specified number of seconds to this time, returning a new time. The calculation wraps around midnight.  This instance is immutable and unaffected by this method call.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "plusNanos(long nanosToAdd)",
    "name": "plusNanos",
    "containingClass": {
      "qualifiedName": "java.time.LocalTime",
      "name": "LocalTime",
      "isArray": false
    },
    "targetClass": "java.time.LocalTime",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.LocalTime",
      "name": "java.time.LocalTime",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "nanosToAdd"
      }
    ],
    "equivalence": {
      "member": "plusNanos(long nanosToAdd)",
      "comment": "Returns a copy of this LocalTime with the specified period in nanoseconds added.  This adds the specified number of nanoseconds to this time, returning a new time. The calculation wraps around midnight.  This instance is immutable and unaffected by this method call.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "minus(java.time.temporal.TemporalAmount amountToSubtract)",
    "name": "minus",
    "containingClass": {
      "qualifiedName": "java.time.LocalTime",
      "name": "LocalTime",
      "isArray": false
    },
    "targetClass": "java.time.LocalTime",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.LocalTime",
      "name": "java.time.LocalTime",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.temporal.TemporalAmount",
          "name": "TemporalAmount",
          "isArray": false
        },
        "name": "amountToSubtract"
      }
    ],
    "equivalence": {
      "member": "minus(java.time.temporal.TemporalAmount amountToSubtract)",
      "comment": "Returns a copy of this time with the specified amount subtracted.  This returns a LocalTime, based on this one, with the specified amount subtracted. The amount is typically Duration but may be any other type implementing the TemporalAmount interface.  The calculation is delegated to the amount object by calling TemporalAmount#subtractFrom(Temporal). The amount implementation is free to implement the subtraction in any way it wishes, however it typically calls back to #minus(long, TemporalUnit). Consult the documentation of the amount implementation to determine if it can be successfully subtracted.  This instance is immutable and unaffected by this method call.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "minus(long amountToSubtract, java.time.temporal.TemporalUnit unit)",
    "name": "minus",
    "containingClass": {
      "qualifiedName": "java.time.LocalTime",
      "name": "LocalTime",
      "isArray": false
    },
    "targetClass": "java.time.LocalTime",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.LocalTime",
      "name": "java.time.LocalTime",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "amountToSubtract"
      },
      {
        "type": {
          "qualifiedName": "java.time.temporal.TemporalUnit",
          "name": "TemporalUnit",
          "isArray": false
        },
        "name": "unit"
      }
    ],
    "equivalence": {
      "member": "minus(long amountToSubtract, java.time.temporal.TemporalUnit unit)",
      "comment": "Returns a copy of this time with the specified amount subtracted.  This returns a LocalTime, based on this one, with the amount in terms of the unit subtracted. If it is not possible to subtract the amount, because the unit is not supported or for some other reason, an exception is thrown.  This method is equivalent to #plus(long, TemporalUnit) with the amount negated. See that method for a full description of how addition, and thus subtraction, works.  This instance is immutable and unaffected by this method call.",
      "kind": "FreeText",
      "condition": "methodResultID.equals(receiverObjectClone.plus(args[0],args[1]))"
    }
  },
  {
    "signature": "minusHours(long hoursToSubtract)",
    "name": "minusHours",
    "containingClass": {
      "qualifiedName": "java.time.LocalTime",
      "name": "LocalTime",
      "isArray": false
    },
    "targetClass": "java.time.LocalTime",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.LocalTime",
      "name": "java.time.LocalTime",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "hoursToSubtract"
      }
    ],
    "equivalence": {
      "member": "minusHours(long hoursToSubtract)",
      "comment": "Returns a copy of this LocalTime with the specified period in hours subtracted.  This subtracts the specified number of hours from this time, returning a new time. The calculation wraps around midnight.  This instance is immutable and unaffected by this method call.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "minusMinutes(long minutesToSubtract)",
    "name": "minusMinutes",
    "containingClass": {
      "qualifiedName": "java.time.LocalTime",
      "name": "LocalTime",
      "isArray": false
    },
    "targetClass": "java.time.LocalTime",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.LocalTime",
      "name": "java.time.LocalTime",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "minutesToSubtract"
      }
    ],
    "equivalence": {
      "member": "minusMinutes(long minutesToSubtract)",
      "comment": "Returns a copy of this LocalTime with the specified period in minutes subtracted.  This subtracts the specified number of minutes from this time, returning a new time. The calculation wraps around midnight.  This instance is immutable and unaffected by this method call.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "minusSeconds(long secondsToSubtract)",
    "name": "minusSeconds",
    "containingClass": {
      "qualifiedName": "java.time.LocalTime",
      "name": "LocalTime",
      "isArray": false
    },
    "targetClass": "java.time.LocalTime",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.LocalTime",
      "name": "java.time.LocalTime",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "secondsToSubtract"
      }
    ],
    "equivalence": {
      "member": "minusSeconds(long secondsToSubtract)",
      "comment": "Returns a copy of this LocalTime with the specified period in seconds subtracted.  This subtracts the specified number of seconds from this time, returning a new time. The calculation wraps around midnight.  This instance is immutable and unaffected by this method call.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "minusNanos(long nanosToSubtract)",
    "name": "minusNanos",
    "containingClass": {
      "qualifiedName": "java.time.LocalTime",
      "name": "LocalTime",
      "isArray": false
    },
    "targetClass": "java.time.LocalTime",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.LocalTime",
      "name": "java.time.LocalTime",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "nanosToSubtract"
      }
    ],
    "equivalence": {
      "member": "minusNanos(long nanosToSubtract)",
      "comment": "Returns a copy of this LocalTime with the specified period in nanoseconds subtracted.  This subtracts the specified number of nanoseconds from this time, returning a new time. The calculation wraps around midnight.  This instance is immutable and unaffected by this method call.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "query(java.time.temporal.TemporalQuery<R> query)",
    "name": "query",
    "containingClass": {
      "qualifiedName": "java.time.LocalTime",
      "name": "LocalTime",
      "isArray": false
    },
    "targetClass": "java.time.LocalTime",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "R",
      "name": "R",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.temporal.TemporalQuery",
          "name": "TemporalQuery",
          "isArray": false
        },
        "name": "query"
      }
    ],
    "equivalence": {
      "member": "query(java.time.temporal.TemporalQuery<R> query)",
      "comment": "Queries this time using the specified query.  This queries this time using the specified query strategy object. The TemporalQuery object defines the logic to be used to obtain the result. Read the documentation of the query to understand what the result of this method will be.  The result of this method is obtained by invoking the TemporalQuery#queryFrom(TemporalAccessor) method on the specified query passing this as the argument.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "adjustInto(java.time.temporal.Temporal temporal)",
    "name": "adjustInto",
    "containingClass": {
      "qualifiedName": "java.time.LocalTime",
      "name": "LocalTime",
      "isArray": false
    },
    "targetClass": "java.time.LocalTime",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.temporal.Temporal",
      "name": "java.time.temporal.Temporal",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.temporal.Temporal",
          "name": "Temporal",
          "isArray": false
        },
        "name": "temporal"
      }
    ],
    "equivalence": {
      "member": "adjustInto(java.time.temporal.Temporal temporal)",
      "comment": "Adjusts the specified temporal object to have the same time as this object.  This returns a temporal object of the same observable type as the input with the time changed to be the same as this.  The adjustment is equivalent to using Temporal#with(TemporalField, long) passing ChronoField#NANO_OF_DAY as the field.  In most cases, it is clearer to reverse the calling pattern by using Temporal#with(TemporalAdjuster):  // these two lines are equivalent, but the second approach is recommended temporal = thisLocalTime.adjustInto(temporal); temporal = temporal.with(thisLocalTime);   This instance is immutable and unaffected by this method call.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "until(java.time.temporal.Temporal endExclusive, java.time.temporal.TemporalUnit unit)",
    "name": "until",
    "containingClass": {
      "qualifiedName": "java.time.LocalTime",
      "name": "LocalTime",
      "isArray": false
    },
    "targetClass": "java.time.LocalTime",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.temporal.Temporal",
          "name": "Temporal",
          "isArray": false
        },
        "name": "endExclusive"
      },
      {
        "type": {
          "qualifiedName": "java.time.temporal.TemporalUnit",
          "name": "TemporalUnit",
          "isArray": false
        },
        "name": "unit"
      }
    ],
    "equivalence": {
      "member": "until(java.time.temporal.Temporal endExclusive, java.time.temporal.TemporalUnit unit)",
      "comment": "Calculates the amount of time until another time in terms of the specified unit.  This calculates the amount of time between two LocalTime objects in terms of a single TemporalUnit. The start and end points are this and the specified time. The result will be negative if the end is before the start. The Temporal passed to this method is converted to a LocalTime using #from(TemporalAccessor). For example, the amount in hours between two times can be calculated using startTime.until(endTime, HOURS).  The calculation returns a whole number, representing the number of complete units between the two times. For example, the amount in hours between 11:30 and 13:29 will only be one hour as it is one minute short of two hours.  There are two equivalent ways of using this method. The first is to invoke this method. The second is to use TemporalUnit#between(Temporal, Temporal):  // these two lines are equivalent amount = start.until(end, MINUTES); amount = MINUTES.between(start, end);  The choice should be made based on which makes the code more readable.  The calculation is implemented in this method for ChronoUnit. The units NANOS, MICROS, MILLIS, SECONDS, MINUTES, HOURS and HALF_DAYS are supported. Other ChronoUnit values will throw an exception.  If the unit is not a ChronoUnit, then the result of this method is obtained by invoking TemporalUnit.between(Temporal, Temporal) passing this as the first argument and the converted input temporal as the second argument.  This instance is immutable and unaffected by this method call.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "format(java.time.format.DateTimeFormatter formatter)",
    "name": "format",
    "containingClass": {
      "qualifiedName": "java.time.LocalTime",
      "name": "LocalTime",
      "isArray": false
    },
    "targetClass": "java.time.LocalTime",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.format.DateTimeFormatter",
          "name": "DateTimeFormatter",
          "isArray": false
        },
        "name": "formatter"
      }
    ],
    "equivalence": {
      "member": "format(java.time.format.DateTimeFormatter formatter)",
      "comment": "Formats this time using the specified formatter.  This time will be passed to the formatter to produce a string.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "atDate(java.time.LocalDate date)",
    "name": "atDate",
    "containingClass": {
      "qualifiedName": "java.time.LocalTime",
      "name": "LocalTime",
      "isArray": false
    },
    "targetClass": "java.time.LocalTime",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.LocalDateTime",
      "name": "java.time.LocalDateTime",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.LocalDate",
          "name": "LocalDate",
          "isArray": false
        },
        "name": "date"
      }
    ],
    "equivalence": {
      "member": "atDate(java.time.LocalDate date)",
      "comment": "Combines this time with a date to create a LocalDateTime.  This returns a LocalDateTime formed from this time at the specified date. All possible combinations of date and time are valid.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "atOffset(java.time.ZoneOffset offset)",
    "name": "atOffset",
    "containingClass": {
      "qualifiedName": "java.time.LocalTime",
      "name": "LocalTime",
      "isArray": false
    },
    "targetClass": "java.time.LocalTime",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.OffsetTime",
      "name": "java.time.OffsetTime",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.ZoneOffset",
          "name": "ZoneOffset",
          "isArray": false
        },
        "name": "offset"
      }
    ],
    "equivalence": {
      "member": "atOffset(java.time.ZoneOffset offset)",
      "comment": "Combines this time with an offset to create an OffsetTime.  This returns an OffsetTime formed from this time at the specified offset. All possible combinations of time and offset are valid.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toSecondOfDay()",
    "name": "toSecondOfDay",
    "containingClass": {
      "qualifiedName": "java.time.LocalTime",
      "name": "LocalTime",
      "isArray": false
    },
    "targetClass": "java.time.LocalTime",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "toSecondOfDay()",
      "comment": "Extracts the time as seconds of day, from 0 to 24 * 60 * 60 - 1.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toNanoOfDay()",
    "name": "toNanoOfDay",
    "containingClass": {
      "qualifiedName": "java.time.LocalTime",
      "name": "LocalTime",
      "isArray": false
    },
    "targetClass": "java.time.LocalTime",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "toNanoOfDay()",
      "comment": "Extracts the time as nanos of day, from 0 to 24 * 60 * 60 * 1,000,000,000 - 1.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "compareTo(java.time.LocalTime other)",
    "name": "compareTo",
    "containingClass": {
      "qualifiedName": "java.time.LocalTime",
      "name": "LocalTime",
      "isArray": false
    },
    "targetClass": "java.time.LocalTime",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.LocalTime",
          "name": "LocalTime",
          "isArray": false
        },
        "name": "other"
      }
    ],
    "equivalence": {
      "member": "compareTo(java.time.LocalTime other)",
      "comment": "Compares this LocalTime to another time.  The comparison is based on the time-line position of the local times within a day. It is \"consistent with equals\", as defined by Comparable.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "isAfter(java.time.LocalTime other)",
    "name": "isAfter",
    "containingClass": {
      "qualifiedName": "java.time.LocalTime",
      "name": "LocalTime",
      "isArray": false
    },
    "targetClass": "java.time.LocalTime",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.LocalTime",
          "name": "LocalTime",
          "isArray": false
        },
        "name": "other"
      }
    ],
    "equivalence": {
      "member": "isAfter(java.time.LocalTime other)",
      "comment": "Checks if this LocalTime is after the specified time.  The comparison is based on the time-line position of the time within a day.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "isBefore(java.time.LocalTime other)",
    "name": "isBefore",
    "containingClass": {
      "qualifiedName": "java.time.LocalTime",
      "name": "LocalTime",
      "isArray": false
    },
    "targetClass": "java.time.LocalTime",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.LocalTime",
          "name": "LocalTime",
          "isArray": false
        },
        "name": "other"
      }
    ],
    "equivalence": {
      "member": "isBefore(java.time.LocalTime other)",
      "comment": "Checks if this LocalTime is before the specified time.  The comparison is based on the time-line position of the time within a day.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "equals(java.lang.Object obj)",
    "name": "equals",
    "containingClass": {
      "qualifiedName": "java.time.LocalTime",
      "name": "LocalTime",
      "isArray": false
    },
    "targetClass": "java.time.LocalTime",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "obj"
      }
    ],
    "equivalence": {
      "member": "equals(java.lang.Object obj)",
      "comment": "Checks if this time is equal to another time.  The comparison is based on the time-line position of the time within a day.  Only objects of type LocalTime are compared, other types return false. To compare the date of two TemporalAccessor instances, use ChronoField#NANO_OF_DAY as a comparator.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "hashCode()",
    "name": "hashCode",
    "containingClass": {
      "qualifiedName": "java.time.LocalTime",
      "name": "LocalTime",
      "isArray": false
    },
    "targetClass": "java.time.LocalTime",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "hashCode()",
      "comment": "A hash code for this time.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toString()",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "java.time.LocalTime",
      "name": "LocalTime",
      "isArray": false
    },
    "targetClass": "java.time.LocalTime",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "toString()",
      "comment": "Outputs this time as a String, such as 10:15.  The output will be one of the following ISO-8601 formats:  <li>HH:mm</li> <li>HH:mm:ss</li> <li>HH:mm:ss.SSS</li> <li>HH:mm:ss.SSSSSS</li> <li>HH:mm:ss.SSSSSSSSS</li>  The format used will be the shortest that outputs the full value of the time where the omitted parts are implied to be zero.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "writeExternal(java.io.DataOutput out)",
    "name": "writeExternal",
    "containingClass": {
      "qualifiedName": "java.time.LocalTime",
      "name": "LocalTime",
      "isArray": false
    },
    "targetClass": "java.time.LocalTime",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.DataOutput",
          "name": "DataOutput",
          "isArray": false
        },
        "name": "out"
      }
    ],
    "equivalence": {
      "member": "writeExternal(java.io.DataOutput out)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "readExternal(java.io.DataInput in)",
    "name": "readExternal",
    "containingClass": {
      "qualifiedName": "java.time.LocalTime",
      "name": "LocalTime",
      "isArray": false
    },
    "targetClass": "java.time.LocalTime",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.LocalTime",
      "name": "java.time.LocalTime",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.DataInput",
          "name": "DataInput",
          "isArray": false
        },
        "name": "in"
      }
    ],
    "equivalence": {
      "member": "readExternal(java.io.DataInput in)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  }
]