[
  {
    "signature": "getName()",
    "name": "getName",
    "containingClass": {
      "qualifiedName": "java.lang.management.RuntimeMXBean",
      "name": "RuntimeMXBean",
      "isArray": false
    },
    "targetClass": "java.lang.management.RuntimeMXBean",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "getName()",
      "comment": "Returns the name representing the running Java virtual machine. The returned name string can be any arbitrary string and a Java virtual machine implementation can choose to embed platform-specific useful information in the returned name string. Each running virtual machine could have a different name.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getVmName()",
    "name": "getVmName",
    "containingClass": {
      "qualifiedName": "java.lang.management.RuntimeMXBean",
      "name": "RuntimeMXBean",
      "isArray": false
    },
    "targetClass": "java.lang.management.RuntimeMXBean",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "getVmName()",
      "comment": "Returns the Java virtual machine implementation name. This method is equivalent to System#getProperty System.getProperty(\"java.vm.name\").",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getVmVendor()",
    "name": "getVmVendor",
    "containingClass": {
      "qualifiedName": "java.lang.management.RuntimeMXBean",
      "name": "RuntimeMXBean",
      "isArray": false
    },
    "targetClass": "java.lang.management.RuntimeMXBean",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "getVmVendor()",
      "comment": "Returns the Java virtual machine implementation vendor. This method is equivalent to System#getProperty System.getProperty(\"java.vm.vendor\").",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getVmVersion()",
    "name": "getVmVersion",
    "containingClass": {
      "qualifiedName": "java.lang.management.RuntimeMXBean",
      "name": "RuntimeMXBean",
      "isArray": false
    },
    "targetClass": "java.lang.management.RuntimeMXBean",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "getVmVersion()",
      "comment": "Returns the Java virtual machine implementation version. This method is equivalent to System#getProperty System.getProperty(\"java.vm.version\").",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getSpecName()",
    "name": "getSpecName",
    "containingClass": {
      "qualifiedName": "java.lang.management.RuntimeMXBean",
      "name": "RuntimeMXBean",
      "isArray": false
    },
    "targetClass": "java.lang.management.RuntimeMXBean",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "getSpecName()",
      "comment": "Returns the Java virtual machine specification name. This method is equivalent to System#getProperty System.getProperty(\"java.vm.specification.name\").",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getSpecVendor()",
    "name": "getSpecVendor",
    "containingClass": {
      "qualifiedName": "java.lang.management.RuntimeMXBean",
      "name": "RuntimeMXBean",
      "isArray": false
    },
    "targetClass": "java.lang.management.RuntimeMXBean",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "getSpecVendor()",
      "comment": "Returns the Java virtual machine specification vendor. This method is equivalent to System#getProperty System.getProperty(\"java.vm.specification.vendor\").",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getSpecVersion()",
    "name": "getSpecVersion",
    "containingClass": {
      "qualifiedName": "java.lang.management.RuntimeMXBean",
      "name": "RuntimeMXBean",
      "isArray": false
    },
    "targetClass": "java.lang.management.RuntimeMXBean",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "getSpecVersion()",
      "comment": "Returns the Java virtual machine specification version. This method is equivalent to System#getProperty System.getProperty(\"java.vm.specification.version\").",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getManagementSpecVersion()",
    "name": "getManagementSpecVersion",
    "containingClass": {
      "qualifiedName": "java.lang.management.RuntimeMXBean",
      "name": "RuntimeMXBean",
      "isArray": false
    },
    "targetClass": "java.lang.management.RuntimeMXBean",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "getManagementSpecVersion()",
      "comment": "Returns the version of the specification for the management interface implemented by the running Java virtual machine.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getClassPath()",
    "name": "getClassPath",
    "containingClass": {
      "qualifiedName": "java.lang.management.RuntimeMXBean",
      "name": "RuntimeMXBean",
      "isArray": false
    },
    "targetClass": "java.lang.management.RuntimeMXBean",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "getClassPath()",
      "comment": "Returns the Java class path that is used by the system class loader to search for class files. This method is equivalent to System#getProperty System.getProperty(\"java.class.path\").  Multiple paths in the Java class path are separated by the path separator character of the platform of the Java virtual machine being monitored.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getLibraryPath()",
    "name": "getLibraryPath",
    "containingClass": {
      "qualifiedName": "java.lang.management.RuntimeMXBean",
      "name": "RuntimeMXBean",
      "isArray": false
    },
    "targetClass": "java.lang.management.RuntimeMXBean",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "getLibraryPath()",
      "comment": "Returns the Java library path. This method is equivalent to System#getProperty System.getProperty(\"java.library.path\").  Multiple paths in the Java library path are separated by the path separator character of the platform of the Java virtual machine being monitored.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "isBootClassPathSupported()",
    "name": "isBootClassPathSupported",
    "containingClass": {
      "qualifiedName": "java.lang.management.RuntimeMXBean",
      "name": "RuntimeMXBean",
      "isArray": false
    },
    "targetClass": "java.lang.management.RuntimeMXBean",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "isBootClassPathSupported()",
      "comment": "Tests if the Java virtual machine supports the boot class path mechanism used by the bootstrap class loader to search for class files.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getBootClassPath()",
    "name": "getBootClassPath",
    "containingClass": {
      "qualifiedName": "java.lang.management.RuntimeMXBean",
      "name": "RuntimeMXBean",
      "isArray": false
    },
    "targetClass": "java.lang.management.RuntimeMXBean",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "getBootClassPath()",
      "comment": "Returns the boot class path that is used by the bootstrap class loader to search for class files.  Multiple paths in the boot class path are separated by the path separator character of the platform on which the Java virtual machine is running. A Java virtual machine implementation may not support the boot class path mechanism for the bootstrap class loader to search for class files. The #isBootClassPathSupported method can be used to determine if the Java virtual machine supports this method.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getInputArguments()",
    "name": "getInputArguments",
    "containingClass": {
      "qualifiedName": "java.lang.management.RuntimeMXBean",
      "name": "RuntimeMXBean",
      "isArray": false
    },
    "targetClass": "java.lang.management.RuntimeMXBean",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List<java.lang.String>",
      "name": "java.util.List<java.lang.String>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "getInputArguments()",
      "comment": "Returns the input arguments passed to the Java virtual machine which does not include the arguments to the main method. This method returns an empty list if there is no input argument to the Java virtual machine.  Some Java virtual machine implementations may take input arguments from multiple different sources: for examples, arguments passed from the application that launches the Java virtual machine such as the 'java' command, environment variables, configuration files, etc.  Typically, not all command-line options to the 'java' command are passed to the Java virtual machine. Thus, the returned input arguments may not include all command-line options.  MBeanServer access:<br> The mapped type of List<String> is String[].",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getUptime()",
    "name": "getUptime",
    "containingClass": {
      "qualifiedName": "java.lang.management.RuntimeMXBean",
      "name": "RuntimeMXBean",
      "isArray": false
    },
    "targetClass": "java.lang.management.RuntimeMXBean",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "getUptime()",
      "comment": "Returns the uptime of the Java virtual machine in milliseconds.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getStartTime()",
    "name": "getStartTime",
    "containingClass": {
      "qualifiedName": "java.lang.management.RuntimeMXBean",
      "name": "RuntimeMXBean",
      "isArray": false
    },
    "targetClass": "java.lang.management.RuntimeMXBean",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "getStartTime()",
      "comment": "Returns the start time of the Java virtual machine in milliseconds. This method returns the approximate time when the Java virtual machine started.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getSystemProperties()",
    "name": "getSystemProperties",
    "containingClass": {
      "qualifiedName": "java.lang.management.RuntimeMXBean",
      "name": "RuntimeMXBean",
      "isArray": false
    },
    "targetClass": "java.lang.management.RuntimeMXBean",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Map<java.lang.String, java.lang.String>",
      "name": "java.util.Map<java.lang.String, java.lang.String>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "getSystemProperties()",
      "comment": "Returns a map of names and values of all system properties. This method calls System#getProperties to get all system properties. Properties whose name or value is not a String are omitted.  MBeanServer access:<br> The mapped type of Map<String,String> is javax.management.openmbean.TabularData TabularData with two items in each row as follows: <blockquote> <table border summary=\"Name and Type for each item\"> <tr> <th>Item Name</th> <th>Item Type</th> </tr> <tr> <td><tt>key</tt></td> <td>String</td> </tr> <tr> <td><tt>value</tt></td> <td>String</td> </tr> </table> </blockquote>",
      "kind": "FreeText",
      "condition": ""
    }
  }
]