[
  {
    "signature": "java.awt.Point()",
    "name": "java.awt.Point",
    "containingClass": {
      "qualifiedName": "java.awt.Point",
      "name": "Point",
      "isArray": false
    },
    "targetClass": "java.awt.Point",
    "isVarArgs": false,
    "parameters": [],
    "equivalence": {
      "member": "java.awt.Point()",
      "comment": "Constructs and initializes a point at the origin (0,&nbsp;0) of the coordinate space.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.awt.Point(java.awt.Point p)",
    "name": "java.awt.Point",
    "containingClass": {
      "qualifiedName": "java.awt.Point",
      "name": "Point",
      "isArray": false
    },
    "targetClass": "java.awt.Point",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.awt.Point",
          "name": "Point",
          "isArray": false
        },
        "name": "p"
      }
    ],
    "equivalence": {
      "member": "java.awt.Point(java.awt.Point p)",
      "comment": "Constructs and initializes a point with the same location as the specified Point object.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.awt.Point(int x, int y)",
    "name": "java.awt.Point",
    "containingClass": {
      "qualifiedName": "java.awt.Point",
      "name": "Point",
      "isArray": false
    },
    "targetClass": "java.awt.Point",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "y"
      }
    ],
    "equivalence": {
      "member": "java.awt.Point(int x, int y)",
      "comment": "Constructs and initializes a point at the specified (x,y) location in the coordinate space.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getX()",
    "name": "getX",
    "containingClass": {
      "qualifiedName": "java.awt.Point",
      "name": "Point",
      "isArray": false
    },
    "targetClass": "java.awt.Point",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "getX()",
      "comment": "{@inheritDoc}",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getY()",
    "name": "getY",
    "containingClass": {
      "qualifiedName": "java.awt.Point",
      "name": "Point",
      "isArray": false
    },
    "targetClass": "java.awt.Point",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "getY()",
      "comment": "{@inheritDoc}",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getLocation()",
    "name": "getLocation",
    "containingClass": {
      "qualifiedName": "java.awt.Point",
      "name": "Point",
      "isArray": false
    },
    "targetClass": "java.awt.Point",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.awt.Point",
      "name": "java.awt.Point",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "getLocation()",
      "comment": "Returns the location of this point. This method is included for completeness, to parallel the getLocation method of Component.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setLocation(java.awt.Point p)",
    "name": "setLocation",
    "containingClass": {
      "qualifiedName": "java.awt.Point",
      "name": "Point",
      "isArray": false
    },
    "targetClass": "java.awt.Point",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.awt.Point",
          "name": "Point",
          "isArray": false
        },
        "name": "p"
      }
    ],
    "equivalence": {
      "member": "setLocation(java.awt.Point p)",
      "comment": "Sets the location of the point to the specified location. This method is included for completeness, to parallel the setLocation method of Component.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setLocation(int x, int y)",
    "name": "setLocation",
    "containingClass": {
      "qualifiedName": "java.awt.Point",
      "name": "Point",
      "isArray": false
    },
    "targetClass": "java.awt.Point",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "y"
      }
    ],
    "equivalence": {
      "member": "setLocation(int x, int y)",
      "comment": "Changes the point to have the specified location.  This method is included for completeness, to parallel the setLocation method of Component. Its behavior is identical with move(int,&nbsp;int).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setLocation(double x, double y)",
    "name": "setLocation",
    "containingClass": {
      "qualifiedName": "java.awt.Point",
      "name": "Point",
      "isArray": false
    },
    "targetClass": "java.awt.Point",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "y"
      }
    ],
    "equivalence": {
      "member": "setLocation(double x, double y)",
      "comment": "Sets the location of this point to the specified double coordinates. The double values will be rounded to integer values. Any number smaller than Integer.MIN_VALUE will be reset to MIN_VALUE, and any number larger than Integer.MAX_VALUE will be reset to MAX_VALUE.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "move(int x, int y)",
    "name": "move",
    "containingClass": {
      "qualifiedName": "java.awt.Point",
      "name": "Point",
      "isArray": false
    },
    "targetClass": "java.awt.Point",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "y"
      }
    ],
    "equivalence": {
      "member": "move(int x, int y)",
      "comment": "Moves this point to the specified location in the (x,y) coordinate plane. This method is identical with setLocation(int,&nbsp;int).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "translate(int dx, int dy)",
    "name": "translate",
    "containingClass": {
      "qualifiedName": "java.awt.Point",
      "name": "Point",
      "isArray": false
    },
    "targetClass": "java.awt.Point",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "dx"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "dy"
      }
    ],
    "equivalence": {
      "member": "translate(int dx, int dy)",
      "comment": "Translates this point, at location (x,y), by dx along the x axis and dy along the y axis so that it now represents the point (x+dx,y+dy).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "equals(java.lang.Object obj)",
    "name": "equals",
    "containingClass": {
      "qualifiedName": "java.awt.Point",
      "name": "Point",
      "isArray": false
    },
    "targetClass": "java.awt.Point",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "obj"
      }
    ],
    "equivalence": {
      "member": "equals(java.lang.Object obj)",
      "comment": "Determines whether or not two points are equal. Two instances of Point2D are equal if the values of their x and y member fields, representing their position in the coordinate space, are the same.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toString()",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "java.awt.Point",
      "name": "Point",
      "isArray": false
    },
    "targetClass": "java.awt.Point",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "toString()",
      "comment": "Returns a string representation of this point and its location in the (x,y) coordinate space. This method is intended to be used only for debugging purposes, and the content and format of the returned string may vary between implementations. The returned string may be empty but may not be null.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]