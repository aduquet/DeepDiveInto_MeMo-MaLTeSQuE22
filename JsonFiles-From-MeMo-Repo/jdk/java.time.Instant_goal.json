[
  {
    "signature": "now()",
    "name": "now",
    "containingClass": {
      "qualifiedName": "java.time.Instant",
      "name": "Instant",
      "isArray": false
    },
    "targetClass": "java.time.Instant",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.Instant",
      "name": "java.time.Instant",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "now()",
      "comment": "Obtains the current instant from the system clock.  This will query the Clock#systemUTC() system UTC clock to obtain the current instant.  Using this method will prevent the ability to use an alternate time-source for testing because the clock is effectively hard-coded.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "now(java.time.Clock clock)",
    "name": "now",
    "containingClass": {
      "qualifiedName": "java.time.Instant",
      "name": "Instant",
      "isArray": false
    },
    "targetClass": "java.time.Instant",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.Instant",
      "name": "java.time.Instant",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.Clock",
          "name": "Clock",
          "isArray": false
        },
        "name": "clock"
      }
    ],
    "equivalence": {
      "member": "now(java.time.Clock clock)",
      "comment": "Obtains the current instant from the specified clock.  This will query the specified clock to obtain the current time.  Using this method allows the use of an alternate clock for testing. The alternate clock may be introduced using Clock dependency injection.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "ofEpochSecond(long epochSecond)",
    "name": "ofEpochSecond",
    "containingClass": {
      "qualifiedName": "java.time.Instant",
      "name": "Instant",
      "isArray": false
    },
    "targetClass": "java.time.Instant",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.Instant",
      "name": "java.time.Instant",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "epochSecond"
      }
    ],
    "equivalence": {
      "member": "ofEpochSecond(long epochSecond)",
      "comment": "Obtains an instance of Instant using seconds from the epoch of 1970-01-01T00:00:00Z.  The nanosecond field is set to zero.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "ofEpochSecond(long epochSecond, long nanoAdjustment)",
    "name": "ofEpochSecond",
    "containingClass": {
      "qualifiedName": "java.time.Instant",
      "name": "Instant",
      "isArray": false
    },
    "targetClass": "java.time.Instant",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.Instant",
      "name": "java.time.Instant",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "epochSecond"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "nanoAdjustment"
      }
    ],
    "equivalence": {
      "member": "ofEpochSecond(long epochSecond, long nanoAdjustment)",
      "comment": "Obtains an instance of Instant using seconds from the epoch of 1970-01-01T00:00:00Z and nanosecond fraction of second.  This method allows an arbitrary number of nanoseconds to be passed in. The factory will alter the values of the second and nanosecond in order to ensure that the stored nanosecond is in the range 0 to 999,999,999. For example, the following will result in the exactly the same instant:  Instant.ofEpochSecond(3, 1); Instant.ofEpochSecond(4, -999_999_999); Instant.ofEpochSecond(2, 1000_000_001);",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "ofEpochMilli(long epochMilli)",
    "name": "ofEpochMilli",
    "containingClass": {
      "qualifiedName": "java.time.Instant",
      "name": "Instant",
      "isArray": false
    },
    "targetClass": "java.time.Instant",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.Instant",
      "name": "java.time.Instant",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "epochMilli"
      }
    ],
    "equivalence": {
      "member": "ofEpochMilli(long epochMilli)",
      "comment": "Obtains an instance of Instant using milliseconds from the epoch of 1970-01-01T00:00:00Z.  The seconds and nanoseconds are extracted from the specified milliseconds.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "from(java.time.temporal.TemporalAccessor temporal)",
    "name": "from",
    "containingClass": {
      "qualifiedName": "java.time.Instant",
      "name": "Instant",
      "isArray": false
    },
    "targetClass": "java.time.Instant",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.Instant",
      "name": "java.time.Instant",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.temporal.TemporalAccessor",
          "name": "TemporalAccessor",
          "isArray": false
        },
        "name": "temporal"
      }
    ],
    "equivalence": {
      "member": "from(java.time.temporal.TemporalAccessor temporal)",
      "comment": "Obtains an instance of Instant from a temporal object.  This obtains an instant based on the specified temporal. A TemporalAccessor represents an arbitrary set of date and time information, which this factory converts to an instance of Instant.  The conversion extracts the ChronoField#INSTANT_SECONDS INSTANT_SECONDS and ChronoField#NANO_OF_SECOND NANO_OF_SECOND fields.  This method matches the signature of the functional interface TemporalQuery allowing it to be used as a query via method reference, Instant::from.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "parse(java.lang.CharSequence text)",
    "name": "parse",
    "containingClass": {
      "qualifiedName": "java.time.Instant",
      "name": "Instant",
      "isArray": false
    },
    "targetClass": "java.time.Instant",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.Instant",
      "name": "java.time.Instant",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.CharSequence",
          "name": "CharSequence",
          "isArray": false
        },
        "name": "text"
      }
    ],
    "equivalence": {
      "member": "parse(java.lang.CharSequence text)",
      "comment": "Obtains an instance of Instant from a text string such as 2007-12-03T10:15:30.00Z.  The string must represent a valid instant in UTC and is parsed using DateTimeFormatter#ISO_INSTANT.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "isSupported(java.time.temporal.TemporalField field)",
    "name": "isSupported",
    "containingClass": {
      "qualifiedName": "java.time.Instant",
      "name": "Instant",
      "isArray": false
    },
    "targetClass": "java.time.Instant",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.temporal.TemporalField",
          "name": "TemporalField",
          "isArray": false
        },
        "name": "field"
      }
    ],
    "equivalence": {
      "member": "isSupported(java.time.temporal.TemporalField field)",
      "comment": "Checks if the specified field is supported.  This checks if this instant can be queried for the specified field. If false, then calling the #range(TemporalField) range, #get(TemporalField) get and #with(TemporalField, long) methods will throw an exception.  If the field is a ChronoField then the query is implemented here. The supported fields are:  <li>NANO_OF_SECOND <li>MICRO_OF_SECOND <li>MILLI_OF_SECOND <li>INSTANT_SECONDS  All other ChronoField instances will return false.  If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.isSupportedBy(TemporalAccessor) passing this as the argument. Whether the field is supported is determined by the field.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "isSupported(java.time.temporal.TemporalUnit unit)",
    "name": "isSupported",
    "containingClass": {
      "qualifiedName": "java.time.Instant",
      "name": "Instant",
      "isArray": false
    },
    "targetClass": "java.time.Instant",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.temporal.TemporalUnit",
          "name": "TemporalUnit",
          "isArray": false
        },
        "name": "unit"
      }
    ],
    "equivalence": {
      "member": "isSupported(java.time.temporal.TemporalUnit unit)",
      "comment": "Checks if the specified unit is supported.  This checks if the specified unit can be added to, or subtracted from, this date-time. If false, then calling the #plus(long, TemporalUnit) and #minus(long, TemporalUnit) minus methods will throw an exception.  If the unit is a ChronoUnit then the query is implemented here. The supported units are:  <li>NANOS <li>MICROS <li>MILLIS <li>SECONDS <li>MINUTES <li>HOURS <li>HALF_DAYS <li>DAYS  All other ChronoUnit instances will return false.  If the unit is not a ChronoUnit, then the result of this method is obtained by invoking TemporalUnit.isSupportedBy(Temporal) passing this as the argument. Whether the unit is supported is determined by the unit.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "range(java.time.temporal.TemporalField field)",
    "name": "range",
    "containingClass": {
      "qualifiedName": "java.time.Instant",
      "name": "Instant",
      "isArray": false
    },
    "targetClass": "java.time.Instant",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.temporal.ValueRange",
      "name": "java.time.temporal.ValueRange",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.temporal.TemporalField",
          "name": "TemporalField",
          "isArray": false
        },
        "name": "field"
      }
    ],
    "equivalence": {
      "member": "range(java.time.temporal.TemporalField field)",
      "comment": "Gets the range of valid values for the specified field.  The range object expresses the minimum and maximum valid values for a field. This instant is used to enhance the accuracy of the returned range. If it is not possible to return the range, because the field is not supported or for some other reason, an exception is thrown.  If the field is a ChronoField then the query is implemented here. The #isSupported(TemporalField) supported fields will return appropriate range instances. All other ChronoField instances will throw an UnsupportedTemporalTypeException.  If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.rangeRefinedBy(TemporalAccessor) passing this as the argument. Whether the range can be obtained is determined by the field.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "get(java.time.temporal.TemporalField field)",
    "name": "get",
    "containingClass": {
      "qualifiedName": "java.time.Instant",
      "name": "Instant",
      "isArray": false
    },
    "targetClass": "java.time.Instant",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.temporal.TemporalField",
          "name": "TemporalField",
          "isArray": false
        },
        "name": "field"
      }
    ],
    "equivalence": {
      "member": "get(java.time.temporal.TemporalField field)",
      "comment": "Gets the value of the specified field from this instant as an int.  This queries this instant for the value for the specified field. The returned value will always be within the valid range of values for the field. If it is not possible to return the value, because the field is not supported or for some other reason, an exception is thrown.  If the field is a ChronoField then the query is implemented here. The #isSupported(TemporalField) supported fields will return valid values based on this date-time, except INSTANT_SECONDS which is too large to fit in an int and throws a DateTimeException. All other ChronoField instances will throw an UnsupportedTemporalTypeException.  If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.getFrom(TemporalAccessor) passing this as the argument. Whether the value can be obtained, and what the value represents, is determined by the field.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getLong(java.time.temporal.TemporalField field)",
    "name": "getLong",
    "containingClass": {
      "qualifiedName": "java.time.Instant",
      "name": "Instant",
      "isArray": false
    },
    "targetClass": "java.time.Instant",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.temporal.TemporalField",
          "name": "TemporalField",
          "isArray": false
        },
        "name": "field"
      }
    ],
    "equivalence": {
      "member": "getLong(java.time.temporal.TemporalField field)",
      "comment": "Gets the value of the specified field from this instant as a long.  This queries this instant for the value for the specified field. If it is not possible to return the value, because the field is not supported or for some other reason, an exception is thrown.  If the field is a ChronoField then the query is implemented here. The #isSupported(TemporalField) supported fields will return valid values based on this date-time. All other ChronoField instances will throw an UnsupportedTemporalTypeException.  If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.getFrom(TemporalAccessor) passing this as the argument. Whether the value can be obtained, and what the value represents, is determined by the field.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getEpochSecond()",
    "name": "getEpochSecond",
    "containingClass": {
      "qualifiedName": "java.time.Instant",
      "name": "Instant",
      "isArray": false
    },
    "targetClass": "java.time.Instant",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "getEpochSecond()",
      "comment": "Gets the number of seconds from the Java epoch of 1970-01-01T00:00:00Z.  The epoch second count is a simple incrementing count of seconds where second 0 is 1970-01-01T00:00:00Z. The nanosecond part of the day is returned by getNanosOfSecond.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getNano()",
    "name": "getNano",
    "containingClass": {
      "qualifiedName": "java.time.Instant",
      "name": "Instant",
      "isArray": false
    },
    "targetClass": "java.time.Instant",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "getNano()",
      "comment": "Gets the number of nanoseconds, later along the time-line, from the start of the second.  The nanosecond-of-second value measures the total number of nanoseconds from the second returned by getEpochSecond.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "with(java.time.temporal.TemporalAdjuster adjuster)",
    "name": "with",
    "containingClass": {
      "qualifiedName": "java.time.Instant",
      "name": "Instant",
      "isArray": false
    },
    "targetClass": "java.time.Instant",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.Instant",
      "name": "java.time.Instant",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.temporal.TemporalAdjuster",
          "name": "TemporalAdjuster",
          "isArray": false
        },
        "name": "adjuster"
      }
    ],
    "equivalence": {
      "member": "with(java.time.temporal.TemporalAdjuster adjuster)",
      "comment": "Returns an adjusted copy of this instant.  This returns an Instant, based on this one, with the instant adjusted. The adjustment takes place using the specified adjuster strategy object. Read the documentation of the adjuster to understand what adjustment will be made.  The result of this method is obtained by invoking the TemporalAdjuster#adjustInto(Temporal) method on the specified adjuster passing this as the argument.  This instance is immutable and unaffected by this method call.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "with(java.time.temporal.TemporalField field, long newValue)",
    "name": "with",
    "containingClass": {
      "qualifiedName": "java.time.Instant",
      "name": "Instant",
      "isArray": false
    },
    "targetClass": "java.time.Instant",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.Instant",
      "name": "java.time.Instant",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.temporal.TemporalField",
          "name": "TemporalField",
          "isArray": false
        },
        "name": "field"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "newValue"
      }
    ],
    "equivalence": {
      "member": "with(java.time.temporal.TemporalField field, long newValue)",
      "comment": "Returns a copy of this instant with the specified field set to a new value.  This returns an Instant, based on this one, with the value for the specified field changed. If it is not possible to set the value, because the field is not supported or for some other reason, an exception is thrown.  If the field is a ChronoField then the adjustment is implemented here. The supported fields behave as follows:  <li>NANO_OF_SECOND - Returns an Instant with the specified nano-of-second. The epoch-second will be unchanged. <li>MICRO_OF_SECOND - Returns an Instant with the nano-of-second replaced by the specified micro-of-second multiplied by 1,000. The epoch-second will be unchanged. <li>MILLI_OF_SECOND - Returns an Instant with the nano-of-second replaced by the specified milli-of-second multiplied by 1,000,000. The epoch-second will be unchanged. <li>INSTANT_SECONDS - Returns an Instant with the specified epoch-second. The nano-of-second will be unchanged.   In all cases, if the new value is outside the valid range of values for the field then a DateTimeException will be thrown.  All other ChronoField instances will throw an UnsupportedTemporalTypeException.  If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.adjustInto(Temporal, long) passing this as the argument. In this case, the field determines whether and how to adjust the instant.  This instance is immutable and unaffected by this method call.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "truncatedTo(java.time.temporal.TemporalUnit unit)",
    "name": "truncatedTo",
    "containingClass": {
      "qualifiedName": "java.time.Instant",
      "name": "Instant",
      "isArray": false
    },
    "targetClass": "java.time.Instant",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.Instant",
      "name": "java.time.Instant",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.temporal.TemporalUnit",
          "name": "TemporalUnit",
          "isArray": false
        },
        "name": "unit"
      }
    ],
    "equivalence": {
      "member": "truncatedTo(java.time.temporal.TemporalUnit unit)",
      "comment": "Returns a copy of this Instant truncated to the specified unit.  Truncating the instant returns a copy of the original with fields smaller than the specified unit set to zero. The fields are calculated on the basis of using a UTC offset as seen in toString. For example, truncating with the ChronoUnit#MINUTES MINUTES unit will round down to the nearest minute, setting the seconds and nanoseconds to zero.  The unit must have a TemporalUnit#getDuration() duration that divides into the length of a standard day without remainder. This includes all supplied time units on ChronoUnit and ChronoUnit#DAYS DAYS. Other units throw an exception.  This instance is immutable and unaffected by this method call.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "plus(java.time.temporal.TemporalAmount amountToAdd)",
    "name": "plus",
    "containingClass": {
      "qualifiedName": "java.time.Instant",
      "name": "Instant",
      "isArray": false
    },
    "targetClass": "java.time.Instant",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.Instant",
      "name": "java.time.Instant",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.temporal.TemporalAmount",
          "name": "TemporalAmount",
          "isArray": false
        },
        "name": "amountToAdd"
      }
    ],
    "equivalence": {
      "member": "plus(java.time.temporal.TemporalAmount amountToAdd)",
      "comment": "Returns a copy of this instant with the specified amount added.  This returns an Instant, based on this one, with the specified amount added. The amount is typically Duration but may be any other type implementing the TemporalAmount interface.  The calculation is delegated to the amount object by calling TemporalAmount#addTo(Temporal). The amount implementation is free to implement the addition in any way it wishes, however it typically calls back to #plus(long, TemporalUnit). Consult the documentation of the amount implementation to determine if it can be successfully added.  This instance is immutable and unaffected by this method call.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "plus(long amountToAdd, java.time.temporal.TemporalUnit unit)",
    "name": "plus",
    "containingClass": {
      "qualifiedName": "java.time.Instant",
      "name": "Instant",
      "isArray": false
    },
    "targetClass": "java.time.Instant",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.Instant",
      "name": "java.time.Instant",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "amountToAdd"
      },
      {
        "type": {
          "qualifiedName": "java.time.temporal.TemporalUnit",
          "name": "TemporalUnit",
          "isArray": false
        },
        "name": "unit"
      }
    ],
    "equivalence": {
      "member": "plus(long amountToAdd, java.time.temporal.TemporalUnit unit)",
      "comment": "Returns a copy of this instant with the specified amount added.  This returns an Instant, based on this one, with the amount in terms of the unit added. If it is not possible to add the amount, because the unit is not supported or for some other reason, an exception is thrown.  If the field is a ChronoUnit then the addition is implemented here. The supported fields behave as follows:  <li>NANOS - Returns a Instant with the specified number of nanoseconds added. This is equivalent to #plusNanos(long). <li>MICROS - Returns a Instant with the specified number of microseconds added. This is equivalent to #plusNanos(long) with the amount multiplied by 1,000. <li>MILLIS - Returns a Instant with the specified number of milliseconds added. This is equivalent to #plusNanos(long) with the amount multiplied by 1,000,000. <li>SECONDS - Returns a Instant with the specified number of seconds added. This is equivalent to #plusSeconds(long). <li>MINUTES - Returns a Instant with the specified number of minutes added. This is equivalent to #plusSeconds(long) with the amount multiplied by 60. <li>HOURS - Returns a Instant with the specified number of hours added. This is equivalent to #plusSeconds(long) with the amount multiplied by 3,600. <li>HALF_DAYS - Returns a Instant with the specified number of half-days added. This is equivalent to #plusSeconds(long) with the amount multiplied by 43,200 (12 hours). <li>DAYS - Returns a Instant with the specified number of days added. This is equivalent to #plusSeconds(long) with the amount multiplied by 86,400 (24 hours).   All other ChronoUnit instances will throw an UnsupportedTemporalTypeException.  If the field is not a ChronoUnit, then the result of this method is obtained by invoking TemporalUnit.addTo(Temporal, long) passing this as the argument. In this case, the unit determines whether and how to perform the addition.  This instance is immutable and unaffected by this method call.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "plusSeconds(long secondsToAdd)",
    "name": "plusSeconds",
    "containingClass": {
      "qualifiedName": "java.time.Instant",
      "name": "Instant",
      "isArray": false
    },
    "targetClass": "java.time.Instant",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.Instant",
      "name": "java.time.Instant",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "secondsToAdd"
      }
    ],
    "equivalence": {
      "member": "plusSeconds(long secondsToAdd)",
      "comment": "Returns a copy of this instant with the specified duration in seconds added.  This instance is immutable and unaffected by this method call.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "plusMillis(long millisToAdd)",
    "name": "plusMillis",
    "containingClass": {
      "qualifiedName": "java.time.Instant",
      "name": "Instant",
      "isArray": false
    },
    "targetClass": "java.time.Instant",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.Instant",
      "name": "java.time.Instant",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "millisToAdd"
      }
    ],
    "equivalence": {
      "member": "plusMillis(long millisToAdd)",
      "comment": "Returns a copy of this instant with the specified duration in milliseconds added.  This instance is immutable and unaffected by this method call.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "plusNanos(long nanosToAdd)",
    "name": "plusNanos",
    "containingClass": {
      "qualifiedName": "java.time.Instant",
      "name": "Instant",
      "isArray": false
    },
    "targetClass": "java.time.Instant",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.Instant",
      "name": "java.time.Instant",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "nanosToAdd"
      }
    ],
    "equivalence": {
      "member": "plusNanos(long nanosToAdd)",
      "comment": "Returns a copy of this instant with the specified duration in nanoseconds added.  This instance is immutable and unaffected by this method call.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "minus(java.time.temporal.TemporalAmount amountToSubtract)",
    "name": "minus",
    "containingClass": {
      "qualifiedName": "java.time.Instant",
      "name": "Instant",
      "isArray": false
    },
    "targetClass": "java.time.Instant",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.Instant",
      "name": "java.time.Instant",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.temporal.TemporalAmount",
          "name": "TemporalAmount",
          "isArray": false
        },
        "name": "amountToSubtract"
      }
    ],
    "equivalence": {
      "member": "minus(java.time.temporal.TemporalAmount amountToSubtract)",
      "comment": "Returns a copy of this instant with the specified amount subtracted.  This returns an Instant, based on this one, with the specified amount subtracted. The amount is typically Duration but may be any other type implementing the TemporalAmount interface.  The calculation is delegated to the amount object by calling TemporalAmount#subtractFrom(Temporal). The amount implementation is free to implement the subtraction in any way it wishes, however it typically calls back to #minus(long, TemporalUnit). Consult the documentation of the amount implementation to determine if it can be successfully subtracted.  This instance is immutable and unaffected by this method call.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "minus(long amountToSubtract, java.time.temporal.TemporalUnit unit)",
    "name": "minus",
    "containingClass": {
      "qualifiedName": "java.time.Instant",
      "name": "Instant",
      "isArray": false
    },
    "targetClass": "java.time.Instant",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.Instant",
      "name": "java.time.Instant",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "amountToSubtract"
      },
      {
        "type": {
          "qualifiedName": "java.time.temporal.TemporalUnit",
          "name": "TemporalUnit",
          "isArray": false
        },
        "name": "unit"
      }
    ],
    "equivalence": {
      "member": "minus(long amountToSubtract, java.time.temporal.TemporalUnit unit)",
      "comment": "Returns a copy of this instant with the specified amount subtracted.  This returns a Instant, based on this one, with the amount in terms of the unit subtracted. If it is not possible to subtract the amount, because the unit is not supported or for some other reason, an exception is thrown.  This method is equivalent to #plus(long, TemporalUnit) with the amount negated. See that method for a full description of how addition, and thus subtraction, works.  This instance is immutable and unaffected by this method call.",
      "kind": "FreeText",
      "condition": "methodResultID.equals(receiverObjectClone.plus(args[0],args[1]))"
    }
  },
  {
    "signature": "minusSeconds(long secondsToSubtract)",
    "name": "minusSeconds",
    "containingClass": {
      "qualifiedName": "java.time.Instant",
      "name": "Instant",
      "isArray": false
    },
    "targetClass": "java.time.Instant",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.Instant",
      "name": "java.time.Instant",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "secondsToSubtract"
      }
    ],
    "equivalence": {
      "member": "minusSeconds(long secondsToSubtract)",
      "comment": "Returns a copy of this instant with the specified duration in seconds subtracted.  This instance is immutable and unaffected by this method call.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "minusMillis(long millisToSubtract)",
    "name": "minusMillis",
    "containingClass": {
      "qualifiedName": "java.time.Instant",
      "name": "Instant",
      "isArray": false
    },
    "targetClass": "java.time.Instant",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.Instant",
      "name": "java.time.Instant",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "millisToSubtract"
      }
    ],
    "equivalence": {
      "member": "minusMillis(long millisToSubtract)",
      "comment": "Returns a copy of this instant with the specified duration in milliseconds subtracted.  This instance is immutable and unaffected by this method call.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "minusNanos(long nanosToSubtract)",
    "name": "minusNanos",
    "containingClass": {
      "qualifiedName": "java.time.Instant",
      "name": "Instant",
      "isArray": false
    },
    "targetClass": "java.time.Instant",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.Instant",
      "name": "java.time.Instant",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "nanosToSubtract"
      }
    ],
    "equivalence": {
      "member": "minusNanos(long nanosToSubtract)",
      "comment": "Returns a copy of this instant with the specified duration in nanoseconds subtracted.  This instance is immutable and unaffected by this method call.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "query(java.time.temporal.TemporalQuery<R> query)",
    "name": "query",
    "containingClass": {
      "qualifiedName": "java.time.Instant",
      "name": "Instant",
      "isArray": false
    },
    "targetClass": "java.time.Instant",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "R",
      "name": "R",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.temporal.TemporalQuery",
          "name": "TemporalQuery",
          "isArray": false
        },
        "name": "query"
      }
    ],
    "equivalence": {
      "member": "query(java.time.temporal.TemporalQuery<R> query)",
      "comment": "Queries this instant using the specified query.  This queries this instant using the specified query strategy object. The TemporalQuery object defines the logic to be used to obtain the result. Read the documentation of the query to understand what the result of this method will be.  The result of this method is obtained by invoking the TemporalQuery#queryFrom(TemporalAccessor) method on the specified query passing this as the argument.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "adjustInto(java.time.temporal.Temporal temporal)",
    "name": "adjustInto",
    "containingClass": {
      "qualifiedName": "java.time.Instant",
      "name": "Instant",
      "isArray": false
    },
    "targetClass": "java.time.Instant",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.temporal.Temporal",
      "name": "java.time.temporal.Temporal",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.temporal.Temporal",
          "name": "Temporal",
          "isArray": false
        },
        "name": "temporal"
      }
    ],
    "equivalence": {
      "member": "adjustInto(java.time.temporal.Temporal temporal)",
      "comment": "Adjusts the specified temporal object to have this instant.  This returns a temporal object of the same observable type as the input with the instant changed to be the same as this.  The adjustment is equivalent to using Temporal#with(TemporalField, long) twice, passing ChronoField#INSTANT_SECONDS and ChronoField#NANO_OF_SECOND as the fields.  In most cases, it is clearer to reverse the calling pattern by using Temporal#with(TemporalAdjuster):  // these two lines are equivalent, but the second approach is recommended temporal = thisInstant.adjustInto(temporal); temporal = temporal.with(thisInstant);   This instance is immutable and unaffected by this method call.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "until(java.time.temporal.Temporal endExclusive, java.time.temporal.TemporalUnit unit)",
    "name": "until",
    "containingClass": {
      "qualifiedName": "java.time.Instant",
      "name": "Instant",
      "isArray": false
    },
    "targetClass": "java.time.Instant",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.temporal.Temporal",
          "name": "Temporal",
          "isArray": false
        },
        "name": "endExclusive"
      },
      {
        "type": {
          "qualifiedName": "java.time.temporal.TemporalUnit",
          "name": "TemporalUnit",
          "isArray": false
        },
        "name": "unit"
      }
    ],
    "equivalence": {
      "member": "until(java.time.temporal.Temporal endExclusive, java.time.temporal.TemporalUnit unit)",
      "comment": "Calculates the amount of time until another instant in terms of the specified unit.  This calculates the amount of time between two Instant objects in terms of a single TemporalUnit. The start and end points are this and the specified instant. The result will be negative if the end is before the start. The calculation returns a whole number, representing the number of complete units between the two instants. The Temporal passed to this method is converted to a Instant using #from(TemporalAccessor). For example, the amount in days between two dates can be calculated using startInstant.until(endInstant, SECONDS).  There are two equivalent ways of using this method. The first is to invoke this method. The second is to use TemporalUnit#between(Temporal, Temporal):  // these two lines are equivalent amount = start.until(end, SECONDS); amount = SECONDS.between(start, end);  The choice should be made based on which makes the code more readable.  The calculation is implemented in this method for ChronoUnit. The units NANOS, MICROS, MILLIS, SECONDS, MINUTES, HOURS, HALF_DAYS and DAYS are supported. Other ChronoUnit values will throw an exception.  If the unit is not a ChronoUnit, then the result of this method is obtained by invoking TemporalUnit.between(Temporal, Temporal) passing this as the first argument and the converted input temporal as the second argument.  This instance is immutable and unaffected by this method call.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "atOffset(java.time.ZoneOffset offset)",
    "name": "atOffset",
    "containingClass": {
      "qualifiedName": "java.time.Instant",
      "name": "Instant",
      "isArray": false
    },
    "targetClass": "java.time.Instant",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.OffsetDateTime",
      "name": "java.time.OffsetDateTime",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.ZoneOffset",
          "name": "ZoneOffset",
          "isArray": false
        },
        "name": "offset"
      }
    ],
    "equivalence": {
      "member": "atOffset(java.time.ZoneOffset offset)",
      "comment": "Combines this instant with an offset to create an OffsetDateTime.  This returns an OffsetDateTime formed from this instant at the specified offset from UTC/Greenwich. An exception will be thrown if the instant is too large to fit into an offset date-time.  This method is equivalent to OffsetDateTime#ofInstant(Instant, ZoneId) OffsetDateTime.ofInstant(this, offset).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "atZone(java.time.ZoneId zone)",
    "name": "atZone",
    "containingClass": {
      "qualifiedName": "java.time.Instant",
      "name": "Instant",
      "isArray": false
    },
    "targetClass": "java.time.Instant",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.ZonedDateTime",
      "name": "java.time.ZonedDateTime",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.ZoneId",
          "name": "ZoneId",
          "isArray": false
        },
        "name": "zone"
      }
    ],
    "equivalence": {
      "member": "atZone(java.time.ZoneId zone)",
      "comment": "Combines this instant with a time-zone to create a ZonedDateTime.  This returns an ZonedDateTime formed from this instant at the specified time-zone. An exception will be thrown if the instant is too large to fit into a zoned date-time.  This method is equivalent to ZonedDateTime#ofInstant(Instant, ZoneId) ZonedDateTime.ofInstant(this, zone).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toEpochMilli()",
    "name": "toEpochMilli",
    "containingClass": {
      "qualifiedName": "java.time.Instant",
      "name": "Instant",
      "isArray": false
    },
    "targetClass": "java.time.Instant",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "toEpochMilli()",
      "comment": "Converts this instant to the number of milliseconds from the epoch of 1970-01-01T00:00:00Z.  If this instant represents a point on the time-line too far in the future or past to fit in a long milliseconds, then an exception is thrown.  If this instant has greater than millisecond precision, then the conversion will drop any excess precision information as though the amount in nanoseconds was subject to integer division by one million.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "compareTo(java.time.Instant otherInstant)",
    "name": "compareTo",
    "containingClass": {
      "qualifiedName": "java.time.Instant",
      "name": "Instant",
      "isArray": false
    },
    "targetClass": "java.time.Instant",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.Instant",
          "name": "Instant",
          "isArray": false
        },
        "name": "otherInstant"
      }
    ],
    "equivalence": {
      "member": "compareTo(java.time.Instant otherInstant)",
      "comment": "Compares this instant to the specified instant.  The comparison is based on the time-line position of the instants. It is \"consistent with equals\", as defined by Comparable.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "isAfter(java.time.Instant otherInstant)",
    "name": "isAfter",
    "containingClass": {
      "qualifiedName": "java.time.Instant",
      "name": "Instant",
      "isArray": false
    },
    "targetClass": "java.time.Instant",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.Instant",
          "name": "Instant",
          "isArray": false
        },
        "name": "otherInstant"
      }
    ],
    "equivalence": {
      "member": "isAfter(java.time.Instant otherInstant)",
      "comment": "Checks if this instant is after the specified instant.  The comparison is based on the time-line position of the instants.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "isBefore(java.time.Instant otherInstant)",
    "name": "isBefore",
    "containingClass": {
      "qualifiedName": "java.time.Instant",
      "name": "Instant",
      "isArray": false
    },
    "targetClass": "java.time.Instant",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.Instant",
          "name": "Instant",
          "isArray": false
        },
        "name": "otherInstant"
      }
    ],
    "equivalence": {
      "member": "isBefore(java.time.Instant otherInstant)",
      "comment": "Checks if this instant is before the specified instant.  The comparison is based on the time-line position of the instants.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "equals(java.lang.Object otherInstant)",
    "name": "equals",
    "containingClass": {
      "qualifiedName": "java.time.Instant",
      "name": "Instant",
      "isArray": false
    },
    "targetClass": "java.time.Instant",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "otherInstant"
      }
    ],
    "equivalence": {
      "member": "equals(java.lang.Object otherInstant)",
      "comment": "Checks if this instant is equal to the specified instant.  The comparison is based on the time-line position of the instants.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "hashCode()",
    "name": "hashCode",
    "containingClass": {
      "qualifiedName": "java.time.Instant",
      "name": "Instant",
      "isArray": false
    },
    "targetClass": "java.time.Instant",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "hashCode()",
      "comment": "Returns a hash code for this instant.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toString()",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "java.time.Instant",
      "name": "Instant",
      "isArray": false
    },
    "targetClass": "java.time.Instant",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "toString()",
      "comment": "A string representation of this instant using ISO-8601 representation.  The format used is the same as DateTimeFormatter#ISO_INSTANT.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "writeExternal(java.io.DataOutput out)",
    "name": "writeExternal",
    "containingClass": {
      "qualifiedName": "java.time.Instant",
      "name": "Instant",
      "isArray": false
    },
    "targetClass": "java.time.Instant",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.DataOutput",
          "name": "DataOutput",
          "isArray": false
        },
        "name": "out"
      }
    ],
    "equivalence": {
      "member": "writeExternal(java.io.DataOutput out)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "readExternal(java.io.DataInput in)",
    "name": "readExternal",
    "containingClass": {
      "qualifiedName": "java.time.Instant",
      "name": "Instant",
      "isArray": false
    },
    "targetClass": "java.time.Instant",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.Instant",
      "name": "java.time.Instant",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.DataInput",
          "name": "DataInput",
          "isArray": false
        },
        "name": "in"
      }
    ],
    "equivalence": {
      "member": "readExternal(java.io.DataInput in)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  }
]