[
  {
    "signature": "getId()",
    "name": "getId",
    "containingClass": {
      "qualifiedName": "java.time.chrono.IsoChronology",
      "name": "IsoChronology",
      "isArray": false
    },
    "targetClass": "java.time.chrono.IsoChronology",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "getId()",
      "comment": "Gets the ID of the chronology - 'ISO'.  The ID uniquely identifies the Chronology. It can be used to lookup the Chronology using #of(String).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getCalendarType()",
    "name": "getCalendarType",
    "containingClass": {
      "qualifiedName": "java.time.chrono.IsoChronology",
      "name": "IsoChronology",
      "isArray": false
    },
    "targetClass": "java.time.chrono.IsoChronology",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "getCalendarType()",
      "comment": "Gets the calendar type of the underlying calendar system - 'iso8601'.  The calendar type is an identifier defined by the Unicode Locale Data Markup Language (LDML) specification. It can be used to lookup the Chronology using #of(String). It can also be used as part of a locale, accessible via Locale#getUnicodeLocaleType(String) with the key 'ca'.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "date(java.time.chrono.Era era, int yearOfEra, int month, int dayOfMonth)",
    "name": "date",
    "containingClass": {
      "qualifiedName": "java.time.chrono.IsoChronology",
      "name": "IsoChronology",
      "isArray": false
    },
    "targetClass": "java.time.chrono.IsoChronology",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.LocalDate",
      "name": "java.time.LocalDate",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.chrono.Era",
          "name": "Era",
          "isArray": false
        },
        "name": "era"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "yearOfEra"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "month"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "dayOfMonth"
      }
    ],
    "equivalence": {
      "member": "date(java.time.chrono.Era era, int yearOfEra, int month, int dayOfMonth)",
      "comment": "Obtains an ISO local date from the era, year-of-era, month-of-year and day-of-month fields.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "date(int prolepticYear, int month, int dayOfMonth)",
    "name": "date",
    "containingClass": {
      "qualifiedName": "java.time.chrono.IsoChronology",
      "name": "IsoChronology",
      "isArray": false
    },
    "targetClass": "java.time.chrono.IsoChronology",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.LocalDate",
      "name": "java.time.LocalDate",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "prolepticYear"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "month"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "dayOfMonth"
      }
    ],
    "equivalence": {
      "member": "date(int prolepticYear, int month, int dayOfMonth)",
      "comment": "Obtains an ISO local date from the proleptic-year, month-of-year and day-of-month fields.  This is equivalent to LocalDate#of(int, int, int).",
      "kind": "FreeText",
      "condition": "methodResultID.equals(java.time.LocalDate.of(args[0],args[0],args[0]))"
    }
  },
  {
    "signature": "dateYearDay(java.time.chrono.Era era, int yearOfEra, int dayOfYear)",
    "name": "dateYearDay",
    "containingClass": {
      "qualifiedName": "java.time.chrono.IsoChronology",
      "name": "IsoChronology",
      "isArray": false
    },
    "targetClass": "java.time.chrono.IsoChronology",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.LocalDate",
      "name": "java.time.LocalDate",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.chrono.Era",
          "name": "Era",
          "isArray": false
        },
        "name": "era"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "yearOfEra"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "dayOfYear"
      }
    ],
    "equivalence": {
      "member": "dateYearDay(java.time.chrono.Era era, int yearOfEra, int dayOfYear)",
      "comment": "Obtains an ISO local date from the era, year-of-era and day-of-year fields.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "dateYearDay(int prolepticYear, int dayOfYear)",
    "name": "dateYearDay",
    "containingClass": {
      "qualifiedName": "java.time.chrono.IsoChronology",
      "name": "IsoChronology",
      "isArray": false
    },
    "targetClass": "java.time.chrono.IsoChronology",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.LocalDate",
      "name": "java.time.LocalDate",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "prolepticYear"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "dayOfYear"
      }
    ],
    "equivalence": {
      "member": "dateYearDay(int prolepticYear, int dayOfYear)",
      "comment": "Obtains an ISO local date from the proleptic-year and day-of-year fields.  This is equivalent to LocalDate#ofYearDay(int, int).",
      "kind": "FreeText",
      "condition": "methodResultID.equals(java.time.LocalDate.ofYearDay(args[0],args[0]))"
    }
  },
  {
    "signature": "dateEpochDay(long epochDay)",
    "name": "dateEpochDay",
    "containingClass": {
      "qualifiedName": "java.time.chrono.IsoChronology",
      "name": "IsoChronology",
      "isArray": false
    },
    "targetClass": "java.time.chrono.IsoChronology",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.LocalDate",
      "name": "java.time.LocalDate",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "epochDay"
      }
    ],
    "equivalence": {
      "member": "dateEpochDay(long epochDay)",
      "comment": "Obtains an ISO local date from the epoch-day.  This is equivalent to LocalDate#ofEpochDay(long).",
      "kind": "FreeText",
      "condition": "methodResultID.equals(java.time.LocalDate.ofEpochDay(args[0]))"
    }
  },
  {
    "signature": "date(java.time.temporal.TemporalAccessor temporal)",
    "name": "date",
    "containingClass": {
      "qualifiedName": "java.time.chrono.IsoChronology",
      "name": "IsoChronology",
      "isArray": false
    },
    "targetClass": "java.time.chrono.IsoChronology",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.LocalDate",
      "name": "java.time.LocalDate",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.temporal.TemporalAccessor",
          "name": "TemporalAccessor",
          "isArray": false
        },
        "name": "temporal"
      }
    ],
    "equivalence": {
      "member": "date(java.time.temporal.TemporalAccessor temporal)",
      "comment": "Obtains an ISO local date from another date-time object.  This is equivalent to LocalDate#from(TemporalAccessor).",
      "kind": "FreeText",
      "condition": "methodResultID.equals(java.time.LocalDate.from(args[0]))"
    }
  },
  {
    "signature": "localDateTime(java.time.temporal.TemporalAccessor temporal)",
    "name": "localDateTime",
    "containingClass": {
      "qualifiedName": "java.time.chrono.IsoChronology",
      "name": "IsoChronology",
      "isArray": false
    },
    "targetClass": "java.time.chrono.IsoChronology",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.LocalDateTime",
      "name": "java.time.LocalDateTime",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.temporal.TemporalAccessor",
          "name": "TemporalAccessor",
          "isArray": false
        },
        "name": "temporal"
      }
    ],
    "equivalence": {
      "member": "localDateTime(java.time.temporal.TemporalAccessor temporal)",
      "comment": "Obtains an ISO local date-time from another date-time object.  This is equivalent to LocalDateTime#from(TemporalAccessor).",
      "kind": "FreeText",
      "condition": "methodResultID.equals(java.time.LocalDateTime.from(args[0]))"
    }
  },
  {
    "signature": "zonedDateTime(java.time.temporal.TemporalAccessor temporal)",
    "name": "zonedDateTime",
    "containingClass": {
      "qualifiedName": "java.time.chrono.IsoChronology",
      "name": "IsoChronology",
      "isArray": false
    },
    "targetClass": "java.time.chrono.IsoChronology",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.ZonedDateTime",
      "name": "java.time.ZonedDateTime",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.temporal.TemporalAccessor",
          "name": "TemporalAccessor",
          "isArray": false
        },
        "name": "temporal"
      }
    ],
    "equivalence": {
      "member": "zonedDateTime(java.time.temporal.TemporalAccessor temporal)",
      "comment": "Obtains an ISO zoned date-time from another date-time object.  This is equivalent to ZonedDateTime#from(TemporalAccessor).",
      "kind": "FreeText",
      "condition": "methodResultID.equals(java.time.ZonedDateTime.from(args[0]))"
    }
  },
  {
    "signature": "zonedDateTime(java.time.Instant instant, java.time.ZoneId zone)",
    "name": "zonedDateTime",
    "containingClass": {
      "qualifiedName": "java.time.chrono.IsoChronology",
      "name": "IsoChronology",
      "isArray": false
    },
    "targetClass": "java.time.chrono.IsoChronology",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.ZonedDateTime",
      "name": "java.time.ZonedDateTime",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.Instant",
          "name": "Instant",
          "isArray": false
        },
        "name": "instant"
      },
      {
        "type": {
          "qualifiedName": "java.time.ZoneId",
          "name": "ZoneId",
          "isArray": false
        },
        "name": "zone"
      }
    ],
    "equivalence": {
      "member": "zonedDateTime(java.time.Instant instant, java.time.ZoneId zone)",
      "comment": "Obtains an ISO zoned date-time in this chronology from an Instant.  This is equivalent to ZonedDateTime#ofInstant(Instant, ZoneId).",
      "kind": "FreeText",
      "condition": "methodResultID.equals(java.time.ZonedDateTime.ofInstant(args[0],args[1]))"
    }
  },
  {
    "signature": "dateNow()",
    "name": "dateNow",
    "containingClass": {
      "qualifiedName": "java.time.chrono.IsoChronology",
      "name": "IsoChronology",
      "isArray": false
    },
    "targetClass": "java.time.chrono.IsoChronology",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.LocalDate",
      "name": "java.time.LocalDate",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "dateNow()",
      "comment": "Obtains the current ISO local date from the system clock in the default time-zone.  This will query the Clock#systemDefaultZone() system clock in the default time-zone to obtain the current date.  Using this method will prevent the ability to use an alternate clock for testing because the clock is hard-coded.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "dateNow(java.time.ZoneId zone)",
    "name": "dateNow",
    "containingClass": {
      "qualifiedName": "java.time.chrono.IsoChronology",
      "name": "IsoChronology",
      "isArray": false
    },
    "targetClass": "java.time.chrono.IsoChronology",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.LocalDate",
      "name": "java.time.LocalDate",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.ZoneId",
          "name": "ZoneId",
          "isArray": false
        },
        "name": "zone"
      }
    ],
    "equivalence": {
      "member": "dateNow(java.time.ZoneId zone)",
      "comment": "Obtains the current ISO local date from the system clock in the specified time-zone.  This will query the Clock#system(ZoneId) system clock to obtain the current date. Specifying the time-zone avoids dependence on the default time-zone.  Using this method will prevent the ability to use an alternate clock for testing because the clock is hard-coded.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "dateNow(java.time.Clock clock)",
    "name": "dateNow",
    "containingClass": {
      "qualifiedName": "java.time.chrono.IsoChronology",
      "name": "IsoChronology",
      "isArray": false
    },
    "targetClass": "java.time.chrono.IsoChronology",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.LocalDate",
      "name": "java.time.LocalDate",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.Clock",
          "name": "Clock",
          "isArray": false
        },
        "name": "clock"
      }
    ],
    "equivalence": {
      "member": "dateNow(java.time.Clock clock)",
      "comment": "Obtains the current ISO local date from the specified clock.  This will query the specified clock to obtain the current date - today. Using this method allows the use of an alternate clock for testing. The alternate clock may be introduced using Clock dependency injection.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "isLeapYear(long prolepticYear)",
    "name": "isLeapYear",
    "containingClass": {
      "qualifiedName": "java.time.chrono.IsoChronology",
      "name": "IsoChronology",
      "isArray": false
    },
    "targetClass": "java.time.chrono.IsoChronology",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "prolepticYear"
      }
    ],
    "equivalence": {
      "member": "isLeapYear(long prolepticYear)",
      "comment": "Checks if the year is a leap year, according to the ISO proleptic calendar system rules.  This method applies the current rules for leap years across the whole time-line. In general, a year is a leap year if it is divisible by four without remainder. However, years divisible by 100, are not leap years, with the exception of years divisible by 400 which are.  For example, 1904 is a leap year it is divisible by 4. 1900 was not a leap year as it is divisible by 100, however 2000 was a leap year as it is divisible by 400.  The calculation is proleptic - applying the same rules into the far future and far past. This is historically inaccurate, but is correct for the ISO-8601 standard.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "prolepticYear(java.time.chrono.Era era, int yearOfEra)",
    "name": "prolepticYear",
    "containingClass": {
      "qualifiedName": "java.time.chrono.IsoChronology",
      "name": "IsoChronology",
      "isArray": false
    },
    "targetClass": "java.time.chrono.IsoChronology",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.chrono.Era",
          "name": "Era",
          "isArray": false
        },
        "name": "era"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "yearOfEra"
      }
    ],
    "equivalence": {
      "member": "prolepticYear(java.time.chrono.Era era, int yearOfEra)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "eraOf(int eraValue)",
    "name": "eraOf",
    "containingClass": {
      "qualifiedName": "java.time.chrono.IsoChronology",
      "name": "IsoChronology",
      "isArray": false
    },
    "targetClass": "java.time.chrono.IsoChronology",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.chrono.IsoEra",
      "name": "java.time.chrono.IsoEra",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "eraValue"
      }
    ],
    "equivalence": {
      "member": "eraOf(int eraValue)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "eras()",
    "name": "eras",
    "containingClass": {
      "qualifiedName": "java.time.chrono.IsoChronology",
      "name": "IsoChronology",
      "isArray": false
    },
    "targetClass": "java.time.chrono.IsoChronology",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List<java.time.chrono.Era>",
      "name": "java.util.List<java.time.chrono.Era>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "eras()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "resolveDate(java.util.Map<java.time.temporal.TemporalField, java.lang.Long> fieldValues, java.time.format.ResolverStyle resolverStyle)",
    "name": "resolveDate",
    "containingClass": {
      "qualifiedName": "java.time.chrono.IsoChronology",
      "name": "IsoChronology",
      "isArray": false
    },
    "targetClass": "java.time.chrono.IsoChronology",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.LocalDate",
      "name": "java.time.LocalDate",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Map",
          "name": "Map",
          "isArray": false
        },
        "name": "fieldValues"
      },
      {
        "type": {
          "qualifiedName": "java.time.format.ResolverStyle",
          "name": "ResolverStyle",
          "isArray": false
        },
        "name": "resolverStyle"
      }
    ],
    "equivalence": {
      "member": "resolveDate(java.util.Map<java.time.temporal.TemporalField, java.lang.Long> fieldValues, java.time.format.ResolverStyle resolverStyle)",
      "comment": "Resolves parsed ChronoField values into a date during parsing.  Most TemporalField implementations are resolved using the resolve method on the field. By contrast, the ChronoField class defines fields that only have meaning relative to the chronology. As such, ChronoField date fields are resolved here in the context of a specific chronology.  ChronoField instances on the ISO calendar system are resolved as follows.  <li>EPOCH_DAY - If present, this is converted to a LocalDate and all other date fields are then cross-checked against the date. <li>PROLEPTIC_MONTH - If present, then it is split into the YEAR and MONTH_OF_YEAR. If the mode is strict or smart then the field is validated. <li>YEAR_OF_ERA and ERA - If both are present, then they are combined to form a YEAR. In lenient mode, the YEAR_OF_ERA range is not validated, in smart and strict mode it is. The ERA is validated for range in all three modes. If only the YEAR_OF_ERA is present, and the mode is smart or lenient, then the current era (CE/AD) is assumed. In strict mode, no era is assumed and the YEAR_OF_ERA is left untouched. If only the ERA is present, then it is left untouched. <li>YEAR, MONTH_OF_YEAR and DAY_OF_MONTH - If all three are present, then they are combined to form a LocalDate. In all three modes, the YEAR is validated. If the mode is smart or strict, then the month and day are validated, with the day validated from 1 to 31. If the mode is lenient, then the date is combined in a manner equivalent to creating a date on the first of January in the requested year, then adding the difference in months, then the difference in days. If the mode is smart, and the day-of-month is greater than the maximum for the year-month, then the day-of-month is adjusted to the last day-of-month. If the mode is strict, then the three fields must form a valid date. <li>YEAR and DAY_OF_YEAR - If both are present, then they are combined to form a LocalDate. In all three modes, the YEAR is validated. If the mode is lenient, then the date is combined in a manner equivalent to creating a date on the first of January in the requested year, then adding the difference in days. If the mode is smart or strict, then the two fields must form a valid date. <li>YEAR, MONTH_OF_YEAR, ALIGNED_WEEK_OF_MONTH and ALIGNED_DAY_OF_WEEK_IN_MONTH - If all four are present, then they are combined to form a LocalDate. In all three modes, the YEAR is validated. If the mode is lenient, then the date is combined in a manner equivalent to creating a date on the first of January in the requested year, then adding the difference in months, then the difference in weeks, then in days. If the mode is smart or strict, then the all four fields are validated to their outer ranges. The date is then combined in a manner equivalent to creating a date on the first day of the requested year and month, then adding the amount in weeks and days to reach their values. If the mode is strict, the date is additionally validated to check that the day and week adjustment did not change the month. <li>YEAR, MONTH_OF_YEAR, ALIGNED_WEEK_OF_MONTH and DAY_OF_WEEK - If all four are present, then they are combined to form a LocalDate. The approach is the same as described above for years, months and weeks in ALIGNED_DAY_OF_WEEK_IN_MONTH. The day-of-week is adjusted as the next or same matching day-of-week once the years, months and weeks have been handled. <li>YEAR, ALIGNED_WEEK_OF_YEAR and ALIGNED_DAY_OF_WEEK_IN_YEAR - If all three are present, then they are combined to form a LocalDate. In all three modes, the YEAR is validated. If the mode is lenient, then the date is combined in a manner equivalent to creating a date on the first of January in the requested year, then adding the difference in weeks, then in days. If the mode is smart or strict, then the all three fields are validated to their outer ranges. The date is then combined in a manner equivalent to creating a date on the first day of the requested year, then adding the amount in weeks and days to reach their values. If the mode is strict, the date is additionally validated to check that the day and week adjustment did not change the year. <li>YEAR, ALIGNED_WEEK_OF_YEAR and DAY_OF_WEEK - If all three are present, then they are combined to form a LocalDate. The approach is the same as described above for years and weeks in ALIGNED_DAY_OF_WEEK_IN_YEAR. The day-of-week is adjusted as the next or same matching day-of-week once the years and weeks have been handled.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "resolveProlepticMonth(java.util.Map<java.time.temporal.TemporalField, java.lang.Long> fieldValues, java.time.format.ResolverStyle resolverStyle)",
    "name": "resolveProlepticMonth",
    "containingClass": {
      "qualifiedName": "java.time.chrono.IsoChronology",
      "name": "IsoChronology",
      "isArray": false
    },
    "targetClass": "java.time.chrono.IsoChronology",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Map",
          "name": "Map",
          "isArray": false
        },
        "name": "fieldValues"
      },
      {
        "type": {
          "qualifiedName": "java.time.format.ResolverStyle",
          "name": "ResolverStyle",
          "isArray": false
        },
        "name": "resolverStyle"
      }
    ],
    "equivalence": {
      "member": "resolveProlepticMonth(java.util.Map<java.time.temporal.TemporalField, java.lang.Long> fieldValues, java.time.format.ResolverStyle resolverStyle)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "resolveYearOfEra(java.util.Map<java.time.temporal.TemporalField, java.lang.Long> fieldValues, java.time.format.ResolverStyle resolverStyle)",
    "name": "resolveYearOfEra",
    "containingClass": {
      "qualifiedName": "java.time.chrono.IsoChronology",
      "name": "IsoChronology",
      "isArray": false
    },
    "targetClass": "java.time.chrono.IsoChronology",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.LocalDate",
      "name": "java.time.LocalDate",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Map",
          "name": "Map",
          "isArray": false
        },
        "name": "fieldValues"
      },
      {
        "type": {
          "qualifiedName": "java.time.format.ResolverStyle",
          "name": "ResolverStyle",
          "isArray": false
        },
        "name": "resolverStyle"
      }
    ],
    "equivalence": {
      "member": "resolveYearOfEra(java.util.Map<java.time.temporal.TemporalField, java.lang.Long> fieldValues, java.time.format.ResolverStyle resolverStyle)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "resolveYMD(java.util.Map<java.time.temporal.TemporalField, java.lang.Long> fieldValues, java.time.format.ResolverStyle resolverStyle)",
    "name": "resolveYMD",
    "containingClass": {
      "qualifiedName": "java.time.chrono.IsoChronology",
      "name": "IsoChronology",
      "isArray": false
    },
    "targetClass": "java.time.chrono.IsoChronology",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.LocalDate",
      "name": "java.time.LocalDate",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Map",
          "name": "Map",
          "isArray": false
        },
        "name": "fieldValues"
      },
      {
        "type": {
          "qualifiedName": "java.time.format.ResolverStyle",
          "name": "ResolverStyle",
          "isArray": false
        },
        "name": "resolverStyle"
      }
    ],
    "equivalence": {
      "member": "resolveYMD(java.util.Map<java.time.temporal.TemporalField, java.lang.Long> fieldValues, java.time.format.ResolverStyle resolverStyle)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "range(java.time.temporal.ChronoField field)",
    "name": "range",
    "containingClass": {
      "qualifiedName": "java.time.chrono.IsoChronology",
      "name": "IsoChronology",
      "isArray": false
    },
    "targetClass": "java.time.chrono.IsoChronology",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.temporal.ValueRange",
      "name": "java.time.temporal.ValueRange",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.time.temporal.ChronoField",
          "name": "ChronoField",
          "isArray": false
        },
        "name": "field"
      }
    ],
    "equivalence": {
      "member": "range(java.time.temporal.ChronoField field)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "period(int years, int months, int days)",
    "name": "period",
    "containingClass": {
      "qualifiedName": "java.time.chrono.IsoChronology",
      "name": "IsoChronology",
      "isArray": false
    },
    "targetClass": "java.time.chrono.IsoChronology",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.time.Period",
      "name": "java.time.Period",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "years"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "months"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "days"
      }
    ],
    "equivalence": {
      "member": "period(int years, int months, int days)",
      "comment": "Obtains a period for this chronology based on years, months and days.  This returns a period tied to the ISO chronology using the specified years, months and days. See Period for further details.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "writeReplace()",
    "name": "writeReplace",
    "containingClass": {
      "qualifiedName": "java.time.chrono.IsoChronology",
      "name": "IsoChronology",
      "isArray": false
    },
    "targetClass": "java.time.chrono.IsoChronology",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Object",
      "name": "java.lang.Object",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "writeReplace()",
      "comment": "Writes the Chronology using a dedicated serialized form. @serialData  out.writeByte(1); // identifies a Chronology out.writeUTF(getId());",
      "kind": "FreeText",
      "condition": ""
    }
  }
]