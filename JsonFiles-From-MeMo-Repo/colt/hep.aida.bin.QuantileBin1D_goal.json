[
  {
    "signature": "hep.aida.bin.QuantileBin1D()",
    "name": "hep.aida.bin.QuantileBin1D",
    "containingClass": {
      "qualifiedName": "hep.aida.bin.QuantileBin1D",
      "name": "QuantileBin1D",
      "isArray": false
    },
    "targetClass": "hep.aida.bin.QuantileBin1D",
    "isVarArgs": false,
    "parameters": [],
    "equivalence": {
      "member": "hep.aida.bin.QuantileBin1D()",
      "comment": "Not public; for use by subclasses only! Constructs and returns an empty bin.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "hep.aida.bin.QuantileBin1D(double epsilon)",
    "name": "hep.aida.bin.QuantileBin1D",
    "containingClass": {
      "qualifiedName": "hep.aida.bin.QuantileBin1D",
      "name": "QuantileBin1D",
      "isArray": false
    },
    "targetClass": "hep.aida.bin.QuantileBin1D",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "epsilon"
      }
    ],
    "equivalence": {
      "member": "hep.aida.bin.QuantileBin1D(double epsilon)",
      "comment": "Equivalent to new QuantileBin1D(false, Long.MAX_VALUE, epsilon, 0.001, 10000, new cern.jet.random.engine.DRand(new java.util.Date()).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "hep.aida.bin.QuantileBin1D(boolean known_N, long N, double epsilon, double delta, int quantiles, cern.jet.random.engine.RandomEngine randomGenerator)",
    "name": "hep.aida.bin.QuantileBin1D",
    "containingClass": {
      "qualifiedName": "hep.aida.bin.QuantileBin1D",
      "name": "QuantileBin1D",
      "isArray": false
    },
    "targetClass": "hep.aida.bin.QuantileBin1D",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "known_N"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "N"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "epsilon"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "delta"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "quantiles"
      },
      {
        "type": {
          "qualifiedName": "cern.jet.random.engine.RandomEngine",
          "name": "RandomEngine",
          "isArray": false
        },
        "name": "randomGenerator"
      }
    ],
    "equivalence": {
      "member": "hep.aida.bin.QuantileBin1D(boolean known_N, long N, double epsilon, double delta, int quantiles, cern.jet.random.engine.RandomEngine randomGenerator)",
      "comment": "Equivalent to new QuantileBin1D(known_N, N, epsilon, delta, quantiles, randomGenerator, false, false, 2).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "hep.aida.bin.QuantileBin1D(boolean known_N, long N, double epsilon, double delta, int quantiles, cern.jet.random.engine.RandomEngine randomGenerator, boolean hasSumOfLogarithms, boolean hasSumOfInversions, int maxOrderForSumOfPowers)",
    "name": "hep.aida.bin.QuantileBin1D",
    "containingClass": {
      "qualifiedName": "hep.aida.bin.QuantileBin1D",
      "name": "QuantileBin1D",
      "isArray": false
    },
    "targetClass": "hep.aida.bin.QuantileBin1D",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "known_N"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "N"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "epsilon"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "delta"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "quantiles"
      },
      {
        "type": {
          "qualifiedName": "cern.jet.random.engine.RandomEngine",
          "name": "RandomEngine",
          "isArray": false
        },
        "name": "randomGenerator"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "hasSumOfLogarithms"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "hasSumOfInversions"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "maxOrderForSumOfPowers"
      }
    ],
    "equivalence": {
      "member": "hep.aida.bin.QuantileBin1D(boolean known_N, long N, double epsilon, double delta, int quantiles, cern.jet.random.engine.RandomEngine randomGenerator, boolean hasSumOfLogarithms, boolean hasSumOfInversions, int maxOrderForSumOfPowers)",
      "comment": "Constructs and returns an empty bin that, under the given constraints, minimizes the amount of memory needed. Some applications exactly know in advance over how many elements quantiles are to be computed. Provided with such information the main memory requirements of this class are small. Other applications don't know in advance over how many elements quantiles are to be computed. However, some of them can give an upper limit, which will reduce main memory requirements. For example, if elements are selected from a database and filled into histograms, it is usually not known in advance how many elements are being filled, but one may know that at most S elements, the number of elements in the database, are filled. A third type of application knowns nothing at all about the number of elements to be filled; from zero to infinitely many elements may actually be filled. This method efficiently supports all three types of applications.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "addAllOfFromTo(cern.colt.list.DoubleArrayList list, int from, int to)",
    "name": "addAllOfFromTo",
    "containingClass": {
      "qualifiedName": "hep.aida.bin.QuantileBin1D",
      "name": "QuantileBin1D",
      "isArray": false
    },
    "targetClass": "hep.aida.bin.QuantileBin1D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "cern.colt.list.DoubleArrayList",
          "name": "DoubleArrayList",
          "isArray": false
        },
        "name": "list"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "from"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "to"
      }
    ],
    "equivalence": {
      "member": "addAllOfFromTo(cern.colt.list.DoubleArrayList list, int from, int to)",
      "comment": "Adds the part of the specified list between indexes from (inclusive) and to (inclusive) to the receiver.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "clear()",
    "name": "clear",
    "containingClass": {
      "qualifiedName": "hep.aida.bin.QuantileBin1D",
      "name": "QuantileBin1D",
      "isArray": false
    },
    "targetClass": "hep.aida.bin.QuantileBin1D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "clear()",
      "comment": "Removes all elements from the receiver. The receiver will be empty after this call returns.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "clone()",
    "name": "clone",
    "containingClass": {
      "qualifiedName": "hep.aida.bin.QuantileBin1D",
      "name": "QuantileBin1D",
      "isArray": false
    },
    "targetClass": "hep.aida.bin.QuantileBin1D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Object",
      "name": "java.lang.Object",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "clone()",
      "comment": "Returns a deep copy of the receiver.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "compareWith(hep.aida.bin.AbstractBin1D other)",
    "name": "compareWith",
    "containingClass": {
      "qualifiedName": "hep.aida.bin.QuantileBin1D",
      "name": "QuantileBin1D",
      "isArray": false
    },
    "targetClass": "hep.aida.bin.QuantileBin1D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "hep.aida.bin.AbstractBin1D",
          "name": "AbstractBin1D",
          "isArray": false
        },
        "name": "other"
      }
    ],
    "equivalence": {
      "member": "compareWith(hep.aida.bin.AbstractBin1D other)",
      "comment": "Computes the deviations from the receiver's measures to another bin's measures.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "median()",
    "name": "median",
    "containingClass": {
      "qualifiedName": "hep.aida.bin.QuantileBin1D",
      "name": "QuantileBin1D",
      "isArray": false
    },
    "targetClass": "hep.aida.bin.QuantileBin1D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "median()",
      "comment": "Returns the median.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "quantile(double phi)",
    "name": "quantile",
    "containingClass": {
      "qualifiedName": "hep.aida.bin.QuantileBin1D",
      "name": "QuantileBin1D",
      "isArray": false
    },
    "targetClass": "hep.aida.bin.QuantileBin1D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "phi"
      }
    ],
    "equivalence": {
      "member": "quantile(double phi)",
      "comment": "Computes and returns the phi-quantile.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "quantileInverse(double element)",
    "name": "quantileInverse",
    "containingClass": {
      "qualifiedName": "hep.aida.bin.QuantileBin1D",
      "name": "QuantileBin1D",
      "isArray": false
    },
    "targetClass": "hep.aida.bin.QuantileBin1D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "element"
      }
    ],
    "equivalence": {
      "member": "quantileInverse(double element)",
      "comment": "Returns how many percent of the elements contained in the receiver are <= element. Does linear interpolation if the element is not contained but lies in between two contained elements.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "quantiles(cern.colt.list.DoubleArrayList phis)",
    "name": "quantiles",
    "containingClass": {
      "qualifiedName": "hep.aida.bin.QuantileBin1D",
      "name": "QuantileBin1D",
      "isArray": false
    },
    "targetClass": "hep.aida.bin.QuantileBin1D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.list.DoubleArrayList",
      "name": "cern.colt.list.DoubleArrayList",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "cern.colt.list.DoubleArrayList",
          "name": "DoubleArrayList",
          "isArray": false
        },
        "name": "phis"
      }
    ],
    "equivalence": {
      "member": "quantiles(cern.colt.list.DoubleArrayList phis)",
      "comment": "Returns the quantiles of the specified percentages. For implementation reasons considerably more efficient than calling #quantile(double) various times.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "sizeOfRange(double minElement, double maxElement)",
    "name": "sizeOfRange",
    "containingClass": {
      "qualifiedName": "hep.aida.bin.QuantileBin1D",
      "name": "QuantileBin1D",
      "isArray": false
    },
    "targetClass": "hep.aida.bin.QuantileBin1D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "minElement"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "maxElement"
      }
    ],
    "equivalence": {
      "member": "sizeOfRange(double minElement, double maxElement)",
      "comment": "Returns how many elements are contained in the range [minElement,maxElement]. Does linear interpolation if one or both of the parameter elements are not contained. Returns exact or approximate results, depending on the parametrization of this class or subclasses.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "splitApproximately(cern.colt.list.DoubleArrayList percentages, int k)",
    "name": "splitApproximately",
    "containingClass": {
      "qualifiedName": "hep.aida.bin.QuantileBin1D",
      "name": "QuantileBin1D",
      "isArray": false
    },
    "targetClass": "hep.aida.bin.QuantileBin1D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "hep.aida.bin.MightyStaticBin1D[]",
      "name": "hep.aida.bin.MightyStaticBin1D[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "cern.colt.list.DoubleArrayList",
          "name": "DoubleArrayList",
          "isArray": false
        },
        "name": "percentages"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "k"
      }
    ],
    "equivalence": {
      "member": "splitApproximately(cern.colt.list.DoubleArrayList percentages, int k)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "splitApproximately(hep.aida.IAxis axis, int k)",
    "name": "splitApproximately",
    "containingClass": {
      "qualifiedName": "hep.aida.bin.QuantileBin1D",
      "name": "QuantileBin1D",
      "isArray": false
    },
    "targetClass": "hep.aida.bin.QuantileBin1D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "hep.aida.bin.MightyStaticBin1D[]",
      "name": "hep.aida.bin.MightyStaticBin1D[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "hep.aida.IAxis",
          "name": "IAxis",
          "isArray": false
        },
        "name": "axis"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "k"
      }
    ],
    "equivalence": {
      "member": "splitApproximately(hep.aida.IAxis axis, int k)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toString()",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "hep.aida.bin.QuantileBin1D",
      "name": "QuantileBin1D",
      "isArray": false
    },
    "targetClass": "hep.aida.bin.QuantileBin1D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "toString()",
      "comment": "Returns a String representation of the receiver.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]