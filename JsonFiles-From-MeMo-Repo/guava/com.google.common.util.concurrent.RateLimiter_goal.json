[
  {
    "signature": "acquire()",
    "name": "acquire",
    "containingClass": {
      "qualifiedName": "com.google.common.util.concurrent.RateLimiter",
      "name": "RateLimiter",
      "isArray": false
    },
    "targetClass": "com.google.common.util.concurrent.RateLimiter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Acquires a single permit from this RateLimiter, blocking until the request can be granted. Tells the amount of time slept, if any. <p>This method is equivalent to acquire(1).",
      "kind": "FreeText",
      "condition": "methodResultID==(receiverObjectClone.acquire(1))"
    }
  },
  {
    "signature": "toString()",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "com.google.common.util.concurrent.RateLimiter",
      "name": "RateLimiter",
      "isArray": false
    },
    "targetClass": "com.google.common.util.concurrent.RateLimiter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": ".",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "tryAcquire(int permits)",
    "name": "tryAcquire",
    "containingClass": {
      "qualifiedName": "com.google.common.util.concurrent.RateLimiter",
      "name": "RateLimiter",
      "isArray": false
    },
    "targetClass": "com.google.common.util.concurrent.RateLimiter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "permits"
      }
    ],
    "equivalence": {
      "comment": "Acquires permits from this RateLimiter if it can be acquired immediately without delay. <p> This method is equivalent to tryAcquire(permits, 0, anyUnit).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "tryAcquire()",
    "name": "tryAcquire",
    "containingClass": {
      "qualifiedName": "com.google.common.util.concurrent.RateLimiter",
      "name": "RateLimiter",
      "isArray": false
    },
    "targetClass": "com.google.common.util.concurrent.RateLimiter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Acquires a permit from this RateLimiter if it can be acquired immediately without delay. <p> This method is equivalent to tryAcquire(1).",
      "kind": "FreeText",
      "condition": "methodResultID==(receiverObjectClone.tryAcquire(1))"
    }
  },
  {
    "signature": "reserveAndGetWaitLength(int permits, long nowMicros)",
    "name": "reserveAndGetWaitLength",
    "containingClass": {
      "qualifiedName": "com.google.common.util.concurrent.RateLimiter",
      "name": "RateLimiter",
      "isArray": false
    },
    "targetClass": "com.google.common.util.concurrent.RateLimiter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "permits"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "nowMicros"
      }
    ],
    "equivalence": {
      "comment": "Reserves next ticket and returns the wait time that the caller must wait for.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getRate()",
    "name": "getRate",
    "containingClass": {
      "qualifiedName": "com.google.common.util.concurrent.RateLimiter",
      "name": "RateLimiter",
      "isArray": false
    },
    "targetClass": "com.google.common.util.concurrent.RateLimiter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Returns the stable rate (as permits per seconds) with which this RateLimiter is configured with. The initial value of this is the same as the permitsPerSecond argument passed in the factory method that produced this RateLimiter, and it is only updated after invocations to {@linkplain #setRate}.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "tryAcquire(long timeout, java.util.concurrent.TimeUnit unit)",
    "name": "tryAcquire",
    "containingClass": {
      "qualifiedName": "com.google.common.util.concurrent.RateLimiter",
      "name": "RateLimiter",
      "isArray": false
    },
    "targetClass": "com.google.common.util.concurrent.RateLimiter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "timeout"
      },
      {
        "type": {
          "qualifiedName": "java.util.concurrent.TimeUnit",
          "name": "TimeUnit",
          "isArray": false
        },
        "name": "unit"
      }
    ],
    "equivalence": {
      "comment": "Acquires a permit from this RateLimiter if it can be obtained without exceeding the specified timeout, or returns false immediately (without waiting) if the permit would not have been granted before the timeout expired. <p>This method is equivalent to tryAcquire(1, timeout, unit).",
      "kind": "FreeText",
      "condition": "methodResultID==(receiverObjectClone.tryAcquire(1,args[0],args[1]))"
    }
  },
  {
    "signature": "com.google.common.util.concurrent.RateLimiter(com.google.common.util.concurrent.RateLimiter$SleepingStopwatch stopwatch)",
    "name": "com.google.common.util.concurrent.RateLimiter",
    "containingClass": {
      "qualifiedName": "com.google.common.util.concurrent.RateLimiter",
      "name": "RateLimiter",
      "isArray": false
    },
    "targetClass": "com.google.common.util.concurrent.RateLimiter",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.util.concurrent.RateLimiter$SleepingStopwatch",
          "name": "SleepingStopwatch",
          "isArray": false
        },
        "name": "stopwatch"
      }
    ],
    "equivalence": {
      "comment": ".",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "tryAcquire(int permits, long timeout, java.util.concurrent.TimeUnit unit)",
    "name": "tryAcquire",
    "containingClass": {
      "qualifiedName": "com.google.common.util.concurrent.RateLimiter",
      "name": "RateLimiter",
      "isArray": false
    },
    "targetClass": "com.google.common.util.concurrent.RateLimiter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "permits"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "timeout"
      },
      {
        "type": {
          "qualifiedName": "java.util.concurrent.TimeUnit",
          "name": "TimeUnit",
          "isArray": false
        },
        "name": "unit"
      }
    ],
    "equivalence": {
      "comment": "Acquires the given number of permits from this RateLimiter if it can be obtained without exceeding the specified timeout, or returns false immediately (without waiting) if the permits would not have been granted before the timeout expired.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "queryEarliestAvailable(long nowMicros)",
    "name": "queryEarliestAvailable",
    "containingClass": {
      "qualifiedName": "com.google.common.util.concurrent.RateLimiter",
      "name": "RateLimiter",
      "isArray": false
    },
    "targetClass": "com.google.common.util.concurrent.RateLimiter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "nowMicros"
      }
    ],
    "equivalence": {
      "comment": "Returns the earliest time that permits are available (with one caveat).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "doSetRate(double permitsPerSecond, long nowMicros)",
    "name": "doSetRate",
    "containingClass": {
      "qualifiedName": "com.google.common.util.concurrent.RateLimiter",
      "name": "RateLimiter",
      "isArray": false
    },
    "targetClass": "com.google.common.util.concurrent.RateLimiter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "permitsPerSecond"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "nowMicros"
      }
    ],
    "equivalence": {
      "comment": ".",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "doGetRate()",
    "name": "doGetRate",
    "containingClass": {
      "qualifiedName": "com.google.common.util.concurrent.RateLimiter",
      "name": "RateLimiter",
      "isArray": false
    },
    "targetClass": "com.google.common.util.concurrent.RateLimiter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": ".",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "acquire(int permits)",
    "name": "acquire",
    "containingClass": {
      "qualifiedName": "com.google.common.util.concurrent.RateLimiter",
      "name": "RateLimiter",
      "isArray": false
    },
    "targetClass": "com.google.common.util.concurrent.RateLimiter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "permits"
      }
    ],
    "equivalence": {
      "comment": "Acquires the given number of permits from this RateLimiter, blocking until the request can be granted. Tells the amount of time slept, if any.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "reserveEarliestAvailable(int permits, long nowMicros)",
    "name": "reserveEarliestAvailable",
    "containingClass": {
      "qualifiedName": "com.google.common.util.concurrent.RateLimiter",
      "name": "RateLimiter",
      "isArray": false
    },
    "targetClass": "com.google.common.util.concurrent.RateLimiter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "permits"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "nowMicros"
      }
    ],
    "equivalence": {
      "comment": "Reserves the requested number of permits and returns the time that those permits can be used (with one caveat).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "create(double permitsPerSecond)",
    "name": "create",
    "containingClass": {
      "qualifiedName": "com.google.common.util.concurrent.RateLimiter",
      "name": "RateLimiter",
      "isArray": false
    },
    "targetClass": "com.google.common.util.concurrent.RateLimiter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.util.concurrent.RateLimiter",
      "name": "com.google.common.util.concurrent.RateLimiter",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "permitsPerSecond"
      }
    ],
    "equivalence": {
      "comment": ".",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "reserve(int permits)",
    "name": "reserve",
    "containingClass": {
      "qualifiedName": "com.google.common.util.concurrent.RateLimiter",
      "name": "RateLimiter",
      "isArray": false
    },
    "targetClass": "com.google.common.util.concurrent.RateLimiter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "permits"
      }
    ],
    "equivalence": {
      "comment": "Reserves the given number of permits from this RateLimiter for future use, returning the number of microseconds until the reservation can be consumed.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "create(double permitsPerSecond, long warmupPeriod, java.util.concurrent.TimeUnit unit)",
    "name": "create",
    "containingClass": {
      "qualifiedName": "com.google.common.util.concurrent.RateLimiter",
      "name": "RateLimiter",
      "isArray": false
    },
    "targetClass": "com.google.common.util.concurrent.RateLimiter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.util.concurrent.RateLimiter",
      "name": "com.google.common.util.concurrent.RateLimiter",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "permitsPerSecond"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "warmupPeriod"
      },
      {
        "type": {
          "qualifiedName": "java.util.concurrent.TimeUnit",
          "name": "TimeUnit",
          "isArray": false
        },
        "name": "unit"
      }
    ],
    "equivalence": {
      "comment": "Creates a RateLimiter with the specified stable throughput, given as \"permits per second\" (commonly referred to as QPS, queries per second), and a warmup period, during which the RateLimiter smoothly ramps up its rate, until it reaches its maximum rate at the end of the period (as long as there are enough requests to saturate it). Similarly, if the RateLimiter is left unused for a duration of warmupPeriod, it will gradually return to its \"cold\" state, i.e. it will go through the same warming up process as when it was first created. <p>The returned RateLimiter is intended for cases where the resource that actually fulfills the requests (e.g., a remote server) needs \"warmup\" time, rather than being immediately accessed at the stable (maximum) rate. <p>The returned RateLimiter starts in a \"cold\" state (i.e. the warmup period will follow), and if it is left unused for long enough, it will return to that state.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "create(com.google.common.util.concurrent.RateLimiter$SleepingStopwatch stopwatch, double permitsPerSecond, long warmupPeriod, java.util.concurrent.TimeUnit unit, double coldFactor)",
    "name": "create",
    "containingClass": {
      "qualifiedName": "com.google.common.util.concurrent.RateLimiter",
      "name": "RateLimiter",
      "isArray": false
    },
    "targetClass": "com.google.common.util.concurrent.RateLimiter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.util.concurrent.RateLimiter",
      "name": "com.google.common.util.concurrent.RateLimiter",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.util.concurrent.RateLimiter$SleepingStopwatch",
          "name": "SleepingStopwatch",
          "isArray": false
        },
        "name": "stopwatch"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "permitsPerSecond"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "warmupPeriod"
      },
      {
        "type": {
          "qualifiedName": "java.util.concurrent.TimeUnit",
          "name": "TimeUnit",
          "isArray": false
        },
        "name": "unit"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "coldFactor"
      }
    ],
    "equivalence": {
      "comment": ".",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setRate(double permitsPerSecond)",
    "name": "setRate",
    "containingClass": {
      "qualifiedName": "com.google.common.util.concurrent.RateLimiter",
      "name": "RateLimiter",
      "isArray": false
    },
    "targetClass": "com.google.common.util.concurrent.RateLimiter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "permitsPerSecond"
      }
    ],
    "equivalence": {
      "comment": "Updates the stable rate of this RateLimiter, that is, the permitsPerSecond argument provided in the factory method that constructed the RateLimiter. Currently throttled threads will not be awakened as a result of this invocation, thus they do not observe the new rate; only subsequent requests will. <p>Note though that, since each request repays (by waiting, if necessary) the cost of the previous request, this means that the very next request after an invocation to setRate will not be affected by the new rate; it will pay the cost of the previous request, which is in terms of the previous rate. <p>The behavior of the RateLimiter is not modified in any other way, e.g. if the RateLimiter was configured with a warmup period of 20 seconds, it still has a warmup period of 20 seconds after this method invocation.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "create(com.google.common.util.concurrent.RateLimiter$SleepingStopwatch stopwatch, double permitsPerSecond)",
    "name": "create",
    "containingClass": {
      "qualifiedName": "com.google.common.util.concurrent.RateLimiter",
      "name": "RateLimiter",
      "isArray": false
    },
    "targetClass": "com.google.common.util.concurrent.RateLimiter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.util.concurrent.RateLimiter",
      "name": "com.google.common.util.concurrent.RateLimiter",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.util.concurrent.RateLimiter$SleepingStopwatch",
          "name": "SleepingStopwatch",
          "isArray": false
        },
        "name": "stopwatch"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "permitsPerSecond"
      }
    ],
    "equivalence": {
      "comment": ".",
      "kind": "FreeText",
      "condition": ""
    }
  }
]