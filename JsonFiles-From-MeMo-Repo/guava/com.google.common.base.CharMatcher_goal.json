[
  {
    "signature": "apply(java.lang.Character character)",
    "name": "apply",
    "containingClass": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "CharMatcher",
      "isArray": false
    },
    "targetClass": "com.google.common.base.CharMatcher",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Character",
          "name": "Character",
          "isArray": false
        },
        "name": "character"
      }
    ],
    "equivalence": {
      "comment": "@deprecated Provided only to satisfy the Predicate interface; use matches instead.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "and(com.google.common.base.CharMatcher other)",
    "name": "and",
    "containingClass": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "CharMatcher",
      "isArray": false
    },
    "targetClass": "com.google.common.base.CharMatcher",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "com.google.common.base.CharMatcher",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.base.CharMatcher",
          "name": "CharMatcher",
          "isArray": false
        },
        "name": "other"
      }
    ],
    "equivalence": {
      "comment": "Returns a matcher that matches any character matched by both this matcher and other.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "javaLetterOrDigit()",
    "name": "9",
    "containingClass": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "CharMatcher",
      "isArray": false
    },
    "targetClass": "com.google.common.base.CharMatcher",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "com.google.common.base.CharMatcher",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Determines whether a character is a letter or digit according to {@linkplain Character#isLetterOrDigit(char) Java's definition}.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "countIn(java.lang.CharSequence sequence)",
    "name": "countIn",
    "containingClass": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "CharMatcher",
      "isArray": false
    },
    "targetClass": "com.google.common.base.CharMatcher",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.CharSequence",
          "name": "CharSequence",
          "isArray": false
        },
        "name": "sequence"
      }
    ],
    "equivalence": {
      "comment": "Returns the number of matching characters found in a character sequence.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "ascii()",
    "name": "ascii",
    "containingClass": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "CharMatcher",
      "isArray": false
    },
    "targetClass": "com.google.common.base.CharMatcher",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "com.google.common.base.CharMatcher",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Determines whether a character is ASCII, meaning that its code point is less than 128.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "whitespace()",
    "name": "whitespace",
    "containingClass": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "CharMatcher",
      "isArray": false
    },
    "targetClass": "com.google.common.base.CharMatcher",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "com.google.common.base.CharMatcher",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Determines whether a character is whitespace according to the latest Unicode standard, as illustrated here. This is not the same definition used by other Java APIs. (See a comparison of several definitions of \"whitespace\".) <p>Note: as the Unicode definition evolves, we will modify this matcher to keep it up to date.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setBits(java.util.BitSet table)",
    "name": "setBits",
    "containingClass": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "CharMatcher",
      "isArray": false
    },
    "targetClass": "com.google.common.base.CharMatcher",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.BitSet",
          "name": "BitSet",
          "isArray": false
        },
        "name": "table"
      }
    ],
    "equivalence": {
      "comment": "Sets bits in table matched by this matcher.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "indexIn(java.lang.CharSequence sequence)",
    "name": "indexIn",
    "containingClass": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "CharMatcher",
      "isArray": false
    },
    "targetClass": "com.google.common.base.CharMatcher",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.CharSequence",
          "name": "CharSequence",
          "isArray": false
        },
        "name": "sequence"
      }
    ],
    "equivalence": {
      "comment": "Returns the index of the first matching character in a character sequence, or -1 if no matching character is present. <p>The default implementation iterates over the sequence in forward order calling matches for each character.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "noneOf(java.lang.CharSequence sequence)",
    "name": "noneOf",
    "containingClass": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "CharMatcher",
      "isArray": false
    },
    "targetClass": "com.google.common.base.CharMatcher",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "com.google.common.base.CharMatcher",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.CharSequence",
          "name": "CharSequence",
          "isArray": false
        },
        "name": "sequence"
      }
    ],
    "equivalence": {
      "comment": "Returns a char matcher that matches any character not present in the given character sequence.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "matchesNoneOf(java.lang.CharSequence sequence)",
    "name": "matchesNoneOf",
    "containingClass": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "CharMatcher",
      "isArray": false
    },
    "targetClass": "com.google.common.base.CharMatcher",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.CharSequence",
          "name": "CharSequence",
          "isArray": false
        },
        "name": "sequence"
      }
    ],
    "equivalence": {
      "comment": "Returns true if a character sequence contains no matching characters. Equivalent to !matchesAnyOf(sequence). <p>The default implementation iterates over the sequence, invoking matches for each character, until this returns false or the end is reached.",
      "kind": "FreeText",
      "condition": "methodResultID==(!receiverObjectClone.matchesAnyOf(args[0]))"
    }
  },
  {
    "signature": "collapseFrom(java.lang.CharSequence sequence, char replacement)",
    "name": "collapseFrom",
    "containingClass": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "CharMatcher",
      "isArray": false
    },
    "targetClass": "com.google.common.base.CharMatcher",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.CharSequence",
          "name": "CharSequence",
          "isArray": false
        },
        "name": "sequence"
      },
      {
        "type": {
          "qualifiedName": "char",
          "name": "char",
          "isArray": false
        },
        "name": "replacement"
      }
    ],
    "equivalence": {
      "comment": "Returns a string copy of the input character sequence, with each group of consecutive characters that match this matcher replaced by a single replacement character. For example: CharMatcher.anyOf(\"eko\").collapseFrom(\"bookkeeper\", '-') ... returns \"b-p-r\". <p>The default implementation uses indexIn(CharSequence) to find the first matching character, then iterates the remainder of the sequence calling matches(char) for each character.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "trimTrailingFrom(java.lang.CharSequence sequence)",
    "name": "trimTrailingFrom",
    "containingClass": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "CharMatcher",
      "isArray": false
    },
    "targetClass": "com.google.common.base.CharMatcher",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.CharSequence",
          "name": "CharSequence",
          "isArray": false
        },
        "name": "sequence"
      }
    ],
    "equivalence": {
      "comment": "Returns a substring of the input character sequence that omits all characters this matcher matches from the end of the string. For example: CharMatcher.anyOf(\"ab\").trimTrailingFrom(\"abacatbab\") ... returns \"abacat\".",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "breakingWhitespace()",
    "name": "breakingWhitespace",
    "containingClass": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "CharMatcher",
      "isArray": false
    },
    "targetClass": "com.google.common.base.CharMatcher",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "com.google.common.base.CharMatcher",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Determines whether a character is a breaking whitespace (that is, a whitespace which can be interpreted as a break between words for formatting purposes). See whitespace() for a discussion of that term.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "javaLowerCase()",
    "name": "javaLowerCase",
    "containingClass": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "CharMatcher",
      "isArray": false
    },
    "targetClass": "com.google.common.base.CharMatcher",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "com.google.common.base.CharMatcher",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Determines whether a character is lower case according to {@linkplain Character#isLowerCase(char) Java's definition}.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "inRange(char startInclusive, char endInclusive)",
    "name": "inRange",
    "containingClass": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "CharMatcher",
      "isArray": false
    },
    "targetClass": "com.google.common.base.CharMatcher",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "com.google.common.base.CharMatcher",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "char",
          "name": "char",
          "isArray": false
        },
        "name": "startInclusive"
      },
      {
        "type": {
          "qualifiedName": "char",
          "name": "char",
          "isArray": false
        },
        "name": "endInclusive"
      }
    ],
    "equivalence": {
      "comment": "Returns a char matcher that matches any character in a given range (both endpoints are inclusive). For example, to match any lowercase letter of the English alphabet, use CharMatcher.inRange('a', 'z').",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "retainFrom(java.lang.CharSequence sequence)",
    "name": "retainFrom",
    "containingClass": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "CharMatcher",
      "isArray": false
    },
    "targetClass": "com.google.common.base.CharMatcher",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.CharSequence",
          "name": "CharSequence",
          "isArray": false
        },
        "name": "sequence"
      }
    ],
    "equivalence": {
      "comment": "Returns a string containing all matching characters of a character sequence, in order. For example: CharMatcher.is('a').retainFrom(\"bazaar\") ... returns \"aaa\".",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "replaceFrom(java.lang.CharSequence sequence, java.lang.CharSequence replacement)",
    "name": "replaceFrom",
    "containingClass": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "CharMatcher",
      "isArray": false
    },
    "targetClass": "com.google.common.base.CharMatcher",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.CharSequence",
          "name": "CharSequence",
          "isArray": false
        },
        "name": "sequence"
      },
      {
        "type": {
          "qualifiedName": "java.lang.CharSequence",
          "name": "CharSequence",
          "isArray": false
        },
        "name": "replacement"
      }
    ],
    "equivalence": {
      "comment": "Returns a string copy of the input character sequence, with each character that matches this matcher replaced by a given replacement sequence. For example: CharMatcher.is('a').replaceFrom(\"yaha\", \"oo\") ... returns \"yoohoo\". <p>Note: If the replacement is a fixed string with only one character, you are better off calling char) directly.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "isNot(char match)",
    "name": "isNot",
    "containingClass": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "CharMatcher",
      "isArray": false
    },
    "targetClass": "com.google.common.base.CharMatcher",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "com.google.common.base.CharMatcher",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "char",
          "name": "char",
          "isArray": false
        },
        "name": "match"
      }
    ],
    "equivalence": {
      "comment": "Returns a char matcher that matches any character except the one specified. <p>To negate another CharMatcher, use negate().",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "precomputed()",
    "name": "precomputed",
    "containingClass": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "CharMatcher",
      "isArray": false
    },
    "targetClass": "com.google.common.base.CharMatcher",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "com.google.common.base.CharMatcher",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Returns a char matcher functionally equivalent to this one, but which may be faster to query than the original; your mileage may vary. Precomputation takes time and is likely to be worthwhile only if the precomputed matcher is queried many thousands of times. <p>This method has no effect (returns this) when called in GWT: it's unclear whether a precomputed matcher is faster, but it certainly consumes more memory, which doesn't seem like a worthwhile tradeoff in a browser.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "removeFrom(java.lang.CharSequence sequence)",
    "name": "removeFrom",
    "containingClass": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "CharMatcher",
      "isArray": false
    },
    "targetClass": "com.google.common.base.CharMatcher",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.CharSequence",
          "name": "CharSequence",
          "isArray": false
        },
        "name": "sequence"
      }
    ],
    "equivalence": {
      "comment": "Returns a string containing all non-matching characters of a character sequence, in order. For example: CharMatcher.is('a').removeFrom(\"bazaar\") ... returns \"bzr\".",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "trimLeadingFrom(java.lang.CharSequence sequence)",
    "name": "trimLeadingFrom",
    "containingClass": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "CharMatcher",
      "isArray": false
    },
    "targetClass": "com.google.common.base.CharMatcher",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.CharSequence",
          "name": "CharSequence",
          "isArray": false
        },
        "name": "sequence"
      }
    ],
    "equivalence": {
      "comment": "Returns a substring of the input character sequence that omits all characters this matcher matches from the beginning of the string. For example: CharMatcher.anyOf(\"ab\").trimLeadingFrom(\"abacatbab\") ... returns \"catbab\".",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "singleWidth()",
    "name": "singleWidth",
    "containingClass": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "CharMatcher",
      "isArray": false
    },
    "targetClass": "com.google.common.base.CharMatcher",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "com.google.common.base.CharMatcher",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Determines whether a character is single-width (not double-width). When in doubt, this matcher errs on the side of returning false (that is, it tends to assume a character is double-width). <p>Note: as the reference file evolves, we will modify this matcher to keep it up to date.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toString()",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "CharMatcher",
      "isArray": false
    },
    "targetClass": "com.google.common.base.CharMatcher",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Returns a string representation of this CharMatcher, such as CharMatcher.or(WHITESPACE, JAVA_DIGIT).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "none()",
    "name": "none",
    "containingClass": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "CharMatcher",
      "isArray": false
    },
    "targetClass": "com.google.common.base.CharMatcher",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "com.google.common.base.CharMatcher",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Matches no characters.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "matchesAllOf(java.lang.CharSequence sequence)",
    "name": "matchesAllOf",
    "containingClass": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "CharMatcher",
      "isArray": false
    },
    "targetClass": "com.google.common.base.CharMatcher",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.CharSequence",
          "name": "CharSequence",
          "isArray": false
        },
        "name": "sequence"
      }
    ],
    "equivalence": {
      "comment": "Returns true if a character sequence contains only matching characters. <p>The default implementation iterates over the sequence, invoking matches for each character, until this returns false or the end is reached.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "lastIndexIn(java.lang.CharSequence sequence)",
    "name": "lastIndexIn",
    "containingClass": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "CharMatcher",
      "isArray": false
    },
    "targetClass": "com.google.common.base.CharMatcher",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.CharSequence",
          "name": "CharSequence",
          "isArray": false
        },
        "name": "sequence"
      }
    ],
    "equivalence": {
      "comment": "Returns the index of the last matching character in a character sequence, or -1 if no matching character is present. <p>The default implementation iterates over the sequence in reverse order calling matches for each character.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "javaDigit()",
    "name": "javaDigit",
    "containingClass": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "CharMatcher",
      "isArray": false
    },
    "targetClass": "com.google.common.base.CharMatcher",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "com.google.common.base.CharMatcher",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Determines whether a character is a digit according to {@linkplain Character#isDigit(char) Java's definition}. If you only care to match ASCII digits, you can use inRange('0', '9').",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "matchesAnyOf(java.lang.CharSequence sequence)",
    "name": "matchesAnyOf",
    "containingClass": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "CharMatcher",
      "isArray": false
    },
    "targetClass": "com.google.common.base.CharMatcher",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.CharSequence",
          "name": "CharSequence",
          "isArray": false
        },
        "name": "sequence"
      }
    ],
    "equivalence": {
      "comment": "Returns true if a character sequence contains at least one matching character. Equivalent to !matchesNoneOf(sequence). <p>The default implementation iterates over the sequence, invoking matches for each character, until this returns true or the end is reached.",
      "kind": "FreeText",
      "condition": "methodResultID==(!receiverObjectClone.matchesNoneOf(args[0]))"
    }
  },
  {
    "signature": "com.google.common.base.CharMatcher()",
    "name": "com.google.common.base.CharMatcher",
    "containingClass": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "CharMatcher",
      "isArray": false
    },
    "targetClass": "com.google.common.base.CharMatcher",
    "isVarArgs": false,
    "parameters": [],
    "equivalence": {
      "comment": "Constructor for use by subclasses. When subclassing, you may want to override toString() to provide a useful description.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "any()",
    "name": "any",
    "containingClass": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "CharMatcher",
      "isArray": false
    },
    "targetClass": "com.google.common.base.CharMatcher",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "com.google.common.base.CharMatcher",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Matches any character.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "javaLetter()",
    "name": "javaLetter",
    "containingClass": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "CharMatcher",
      "isArray": false
    },
    "targetClass": "com.google.common.base.CharMatcher",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "com.google.common.base.CharMatcher",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Determines whether a character is a letter according to {@linkplain Character#isLetter(char) Java's definition}. If you only care to match letters of the Latin alphabet, you can use inRange('a', 'z').or(inRange('A', 'Z')).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "is(char match)",
    "name": "is",
    "containingClass": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "CharMatcher",
      "isArray": false
    },
    "targetClass": "com.google.common.base.CharMatcher",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "com.google.common.base.CharMatcher",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "char",
          "name": "char",
          "isArray": false
        },
        "name": "match"
      }
    ],
    "equivalence": {
      "comment": "Returns a char matcher that matches only one specified character.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "digit()",
    "name": "digit",
    "containingClass": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "CharMatcher",
      "isArray": false
    },
    "targetClass": "com.google.common.base.CharMatcher",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "com.google.common.base.CharMatcher",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Determines whether a character is a digit according to Unicode. If you only care to match ASCII digits, you can use inRange('0', '9').",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "invisible()",
    "name": "invisible",
    "containingClass": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "CharMatcher",
      "isArray": false
    },
    "targetClass": "com.google.common.base.CharMatcher",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "com.google.common.base.CharMatcher",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Determines whether a character is invisible; that is, if its Unicode category is any of SPACE_SEPARATOR, LINE_SEPARATOR, PARAGRAPH_SEPARATOR, CONTROL, FORMAT, SURROGATE, and PRIVATE_USE according to ICU4J.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "indexIn(java.lang.CharSequence sequence, int start)",
    "name": "indexIn",
    "containingClass": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "CharMatcher",
      "isArray": false
    },
    "targetClass": "com.google.common.base.CharMatcher",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.CharSequence",
          "name": "CharSequence",
          "isArray": false
        },
        "name": "sequence"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "start"
      }
    ],
    "equivalence": {
      "comment": "Returns the index of the first matching character in a character sequence, starting from a given position, or -1 if no character matches after that position. <p>The default implementation iterates over the sequence in forward order, beginning at start, calling matches for each character.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "forPredicate(com.google.common.base.Predicate<? super java.lang.Character> predicate)",
    "name": "forPredicate",
    "containingClass": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "CharMatcher",
      "isArray": false
    },
    "targetClass": "com.google.common.base.CharMatcher",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "com.google.common.base.CharMatcher",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.base.Predicate",
          "name": "Predicate",
          "isArray": false
        },
        "name": "predicate"
      }
    ],
    "equivalence": {
      "comment": "Returns a matcher with identical behavior to the given Character-based predicate, but which operates on primitive char instances instead.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "or(com.google.common.base.CharMatcher other)",
    "name": "or",
    "containingClass": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "CharMatcher",
      "isArray": false
    },
    "targetClass": "com.google.common.base.CharMatcher",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "com.google.common.base.CharMatcher",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.base.CharMatcher",
          "name": "CharMatcher",
          "isArray": false
        },
        "name": "other"
      }
    ],
    "equivalence": {
      "comment": "Returns a matcher that matches any character matched by either this matcher or other.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "javaIsoControl()",
    "name": "javaIsoControl",
    "containingClass": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "CharMatcher",
      "isArray": false
    },
    "targetClass": "com.google.common.base.CharMatcher",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "com.google.common.base.CharMatcher",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Determines whether a character is an ISO control character as specified by Character#isISOControl(char).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "negate()",
    "name": "negate",
    "containingClass": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "CharMatcher",
      "isArray": false
    },
    "targetClass": "com.google.common.base.CharMatcher",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "com.google.common.base.CharMatcher",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Returns a matcher that matches any character not matched by this matcher.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "trimFrom(java.lang.CharSequence sequence)",
    "name": "trimFrom",
    "containingClass": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "CharMatcher",
      "isArray": false
    },
    "targetClass": "com.google.common.base.CharMatcher",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.CharSequence",
          "name": "CharSequence",
          "isArray": false
        },
        "name": "sequence"
      }
    ],
    "equivalence": {
      "comment": "Returns a substring of the input character sequence that omits all characters this matcher matches from the beginning and from the end of the string. For example: CharMatcher.anyOf(\"ab\").trimFrom(\"abacatbab\") ... returns \"cat\". <p>Note that: CharMatcher.inRange('\\0', ' ').trimFrom(str) ... is equivalent to String#trim().",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "anyOf(java.lang.CharSequence sequence)",
    "name": "anyOf",
    "containingClass": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "CharMatcher",
      "isArray": false
    },
    "targetClass": "com.google.common.base.CharMatcher",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "com.google.common.base.CharMatcher",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.CharSequence",
          "name": "CharSequence",
          "isArray": false
        },
        "name": "sequence"
      }
    ],
    "equivalence": {
      "comment": "Returns a char matcher that matches any character present in the given character sequence.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "javaUpperCase()",
    "name": "javaUpperCase",
    "containingClass": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "CharMatcher",
      "isArray": false
    },
    "targetClass": "com.google.common.base.CharMatcher",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "com.google.common.base.CharMatcher",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Determines whether a character is upper case according to {@linkplain Character#isUpperCase(char) Java's definition}.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "matches(char c)",
    "name": "matches",
    "containingClass": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "CharMatcher",
      "isArray": false
    },
    "targetClass": "com.google.common.base.CharMatcher",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "char",
          "name": "char",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "equivalence": {
      "comment": ".",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "precomputedInternal()",
    "name": "precomputedInternal",
    "containingClass": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "CharMatcher",
      "isArray": false
    },
    "targetClass": "com.google.common.base.CharMatcher",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "com.google.common.base.CharMatcher",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "This is the actual implementation of precomputed, but we bounce calls through a method on Platform so that we can have different behavior in GWT. <p>This implementation tries to be smart in a number of ways. It recognizes cases where the negation is cheaper to precompute than the matcher itself; it tries to build small hash tables for matchers that only match a few characters, and so on. In the worst-case scenario, it constructs an eight-kilobyte bit array and queries that. In many situations this produces a matcher which is faster to query than the original.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "trimAndCollapseFrom(java.lang.CharSequence sequence, char replacement)",
    "name": "trimAndCollapseFrom",
    "containingClass": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "CharMatcher",
      "isArray": false
    },
    "targetClass": "com.google.common.base.CharMatcher",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.CharSequence",
          "name": "CharSequence",
          "isArray": false
        },
        "name": "sequence"
      },
      {
        "type": {
          "qualifiedName": "char",
          "name": "char",
          "isArray": false
        },
        "name": "replacement"
      }
    ],
    "equivalence": {
      "comment": "Collapses groups of matching characters exactly as collapseFrom does, except that groups of matching characters at the start or end of the sequence are removed without replacement.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "replaceFrom(java.lang.CharSequence sequence, char replacement)",
    "name": "replaceFrom",
    "containingClass": {
      "qualifiedName": "com.google.common.base.CharMatcher",
      "name": "CharMatcher",
      "isArray": false
    },
    "targetClass": "com.google.common.base.CharMatcher",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.CharSequence",
          "name": "CharSequence",
          "isArray": false
        },
        "name": "sequence"
      },
      {
        "type": {
          "qualifiedName": "char",
          "name": "char",
          "isArray": false
        },
        "name": "replacement"
      }
    ],
    "equivalence": {
      "comment": "Returns a string copy of the input character sequence, with each character that matches this matcher replaced by a given replacement character. For example: CharMatcher.is('a').replaceFrom(\"radar\", 'o') ... returns \"rodor\". <p>The default implementation uses indexIn(CharSequence) to find the first matching character, then iterates the remainder of the sequence calling matches(char) for each character.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]