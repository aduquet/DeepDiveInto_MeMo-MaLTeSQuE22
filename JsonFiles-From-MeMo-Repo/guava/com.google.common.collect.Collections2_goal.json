[
  {
    "signature": "safeContains(java.util.Collection<?> collection, java.lang.Object object)",
    "name": "safeContains",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Collections2",
      "name": "Collections2",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Collections2",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "collection"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "object",
        "nullable": true
      }
    ],
    "equivalence": {
      "comment": "Delegates to Collection#contains. Returns false if the contains method throws a ClassCastException or NullPointerException.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "orderedPermutations(java.lang.Iterable<E> elements)",
    "name": "orderedPermutations",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Collections2",
      "name": "Collections2",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Collections2",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Collection<java.util.List<E>>",
      "name": "java.util.Collection<java.util.List<E>>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "elements"
      }
    ],
    "equivalence": {
      "comment": "Returns a Collection of all the permutations of the specified Iterable. <p>Notes: This is an implementation of the algorithm for Lexicographical Permutations Generation, described in Knuth's \"The Art of Computer Programming\", Volume 4, Chapter 7, Section 7.2.1.2. The iteration order follows the lexicographical order. This means that the first permutation will be in ascending order, and the last will be in descending order. <p>Duplicate elements are considered equal. For example, the list [1, 1] will have only one permutation, instead of two. This is why the elements have to implement Comparable. <p>An empty iterable has only one permutation, which is an empty list. <p>This method is equivalent to Collections2.orderedPermutations(list, Ordering.natural()).",
      "kind": "FreeText",
      "condition": "methodResultID.equals(Collections2.orderedPermutations(list, Ordering.natural()))"
    }
  },
  {
    "signature": "safeRemove(java.util.Collection<?> collection, java.lang.Object object)",
    "name": "safeRemove",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Collections2",
      "name": "Collections2",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Collections2",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "collection"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "object",
        "nullable": true
      }
    ],
    "equivalence": {
      "comment": "Delegates to Collection#remove. Returns false if the remove method throws a ClassCastException or NullPointerException.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "containsAllImpl(java.util.Collection<?> self, java.util.Collection<?> c)",
    "name": "containsAllImpl",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Collections2",
      "name": "Collections2",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Collections2",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "self"
      },
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "equivalence": {
      "comment": "Returns true if the collection self contains all of the elements in the collection c. <p>This method iterates over the specified collection c, checking each element returned by the iterator in turn to see if it is contained in the specified collection self. If all elements are so contained, true is returned, otherwise false.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "permutations(java.util.Collection<E> elements)",
    "name": "permutations",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Collections2",
      "name": "Collections2",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Collections2",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Collection<java.util.List<E>>",
      "name": "java.util.Collection<java.util.List<E>>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "elements"
      }
    ],
    "equivalence": {
      "comment": "Returns a Collection of all the permutations of the specified Collection. <p>Notes: This is an implementation of the Plain Changes algorithm for permutations generation, described in Knuth's \"The Art of Computer Programming\", Volume 4, Chapter 7, Section 7.2.1.2. <p>If the input list contains equal elements, some of the generated permutations will be equal. <p>An empty collection has only one permutation, which is an empty list.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "filter(java.util.Collection<E> unfiltered, com.google.common.base.Predicate<? super E> predicate)",
    "name": "filter",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Collections2",
      "name": "Collections2",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Collections2",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Collection<E>",
      "name": "java.util.Collection<E>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "unfiltered"
      },
      {
        "type": {
          "qualifiedName": "com.google.common.base.Predicate",
          "name": "Predicate",
          "isArray": false
        },
        "name": "predicate"
      }
    ],
    "equivalence": {
      "comment": ".",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "newStringBuilderForCollection(int size)",
    "name": "newStringBuilderForCollection",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Collections2",
      "name": "Collections2",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Collections2",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.StringBuilder",
      "name": "java.lang.StringBuilder",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "size"
      }
    ],
    "equivalence": {
      "comment": "Returns best-effort-sized StringBuilder based on the given collection size.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "orderedPermutations(java.lang.Iterable<E> elements, java.util.Comparator<? super E> comparator)",
    "name": "orderedPermutations",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Collections2",
      "name": "Collections2",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Collections2",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Collection<java.util.List<E>>",
      "name": "java.util.Collection<java.util.List<E>>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "elements"
      },
      {
        "type": {
          "qualifiedName": "java.util.Comparator",
          "name": "Comparator",
          "isArray": false
        },
        "name": "comparator"
      }
    ],
    "equivalence": {
      "comment": "Returns a Collection of all the permutations of the specified Iterable using the specified Comparator for establishing the lexicographical ordering. <p>Examples: for (List<String> perm : orderedPermutations(asList(\"b\", \"c\", \"a\"))) { println(perm); // -> [\"a\", \"b\", \"c\"] // -> [\"a\", \"c\", \"b\"] // -> [\"b\", \"a\", \"c\"] // -> [\"b\", \"c\", \"a\"] // -> [\"c\", \"a\", \"b\"] // -> [\"c\", \"b\", \"a\"] for (List<Integer> perm : orderedPermutations(asList(1, 2, 2, 1))) { println(perm); } // -> [1, 1, 2, 2] // -> [1, 2, 1, 2] // -> [1, 2, 2, 1] // -> [2, 1, 1, 2] // -> [2, 1, 2, 1] // -> [2, 2, 1, 1]} <p>Notes: This is an implementation of the algorithm for Lexicographical Permutations Generation, described in Knuth's \"The Art of Computer Programming\", Volume 4, Chapter 7, Section 7.2.1.2. The iteration order follows the lexicographical order. This means that the first permutation will be in ascending order, and the last will be in descending order. <p>Elements that compare equal are considered equal and no new permutations are created by swapping them. <p>An empty iterable has only one permutation, which is an empty list.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "cast(java.lang.Iterable<T> iterable)",
    "name": "cast",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Collections2",
      "name": "Collections2",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Collections2",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Collection<T>",
      "name": "java.util.Collection<T>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "iterable"
      }
    ],
    "equivalence": {
      "comment": "Used to avoid http://bugs.sun.com/view_bug.do?bug_id=6558557.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toStringImpl(java.util.Collection<?> collection)",
    "name": "toStringImpl",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Collections2",
      "name": "Collections2",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Collections2",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "collection"
      }
    ],
    "equivalence": {
      "comment": "An implementation of Collection#toString().",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "transform(java.util.Collection<F> fromCollection, com.google.common.base.Function<? super F, T> function)",
    "name": "transform",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Collections2",
      "name": "Collections2",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Collections2",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Collection<T>",
      "name": "java.util.Collection<T>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "fromCollection"
      },
      {
        "type": {
          "qualifiedName": "com.google.common.base.Function",
          "name": "Function",
          "isArray": false
        },
        "name": "function"
      }
    ],
    "equivalence": {
      "comment": "Returns a collection that applies function to each element of fromCollection. The returned collection is a live view of fromCollection; changes to one affect the other. <p>The returned collection's add() and addAll() methods throw an UnsupportedOperationException. All other collection methods are supported, as long as fromCollection supports them. <p>The returned collection isn't threadsafe or serializable, even if fromCollection is. <p>When a live view is not needed, it may be faster to copy the transformed collection and use the copy. <p>If the input Collection is known to be a List, consider Lists#transform. If only an Iterable is available, use Iterables#transform.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]