[
  {
    "signature": "mean(double... values)",
    "name": "mean",
    "containingClass": {
      "qualifiedName": "com.google.common.math.DoubleMath",
      "name": "DoubleMath",
      "isArray": false
    },
    "targetClass": "com.google.common.math.DoubleMath",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "values"
      }
    ],
    "equivalence": {
      "comment": "Returns the arithmetic mean of values. <p>If these values are a sample drawn from a population, this is also an unbiased estimator of the arithmetic mean of the population.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "log2(double x, java.math.RoundingMode mode)",
    "name": "log2",
    "containingClass": {
      "qualifiedName": "com.google.common.math.DoubleMath",
      "name": "DoubleMath",
      "isArray": false
    },
    "targetClass": "com.google.common.math.DoubleMath",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "java.math.RoundingMode",
          "name": "RoundingMode",
          "isArray": false
        },
        "name": "mode"
      }
    ],
    "equivalence": {
      "comment": "Returns the base 2 logarithm of a double value, rounded with the specified rounding mode to an int. <p>Regardless of the rounding mode, this is faster than (int) log2(x).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "roundToLong(double x, java.math.RoundingMode mode)",
    "name": "roundToLong",
    "containingClass": {
      "qualifiedName": "com.google.common.math.DoubleMath",
      "name": "DoubleMath",
      "isArray": false
    },
    "targetClass": "com.google.common.math.DoubleMath",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "java.math.RoundingMode",
          "name": "RoundingMode",
          "isArray": false
        },
        "name": "mode"
      }
    ],
    "equivalence": {
      "comment": "Returns the long value that is equal to x rounded with the specified rounding mode, if possible.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "mean(int... values)",
    "name": "mean",
    "containingClass": {
      "qualifiedName": "com.google.common.math.DoubleMath",
      "name": "DoubleMath",
      "isArray": false
    },
    "targetClass": "com.google.common.math.DoubleMath",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[I",
          "name": "int[]",
          "isArray": true
        },
        "name": "values"
      }
    ],
    "equivalence": {
      "comment": "Returns the arithmetic mean of values. <p>If these values are a sample drawn from a population, this is also an unbiased estimator of the arithmetic mean of the population.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "roundToBigInteger(double x, java.math.RoundingMode mode)",
    "name": "roundToBigInteger",
    "containingClass": {
      "qualifiedName": "com.google.common.math.DoubleMath",
      "name": "DoubleMath",
      "isArray": false
    },
    "targetClass": "com.google.common.math.DoubleMath",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.math.BigInteger",
      "name": "java.math.BigInteger",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "java.math.RoundingMode",
          "name": "RoundingMode",
          "isArray": false
        },
        "name": "mode"
      }
    ],
    "equivalence": {
      "comment": "Returns the BigInteger value that is equal to x rounded with the specified rounding mode, if possible.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "mean(long... values)",
    "name": "mean",
    "containingClass": {
      "qualifiedName": "com.google.common.math.DoubleMath",
      "name": "DoubleMath",
      "isArray": false
    },
    "targetClass": "com.google.common.math.DoubleMath",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[J",
          "name": "long[]",
          "isArray": true
        },
        "name": "values"
      }
    ],
    "equivalence": {
      "comment": "Returns the arithmetic mean of values. <p>If these values are a sample drawn from a population, this is also an unbiased estimator of the arithmetic mean of the population.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "fuzzyEquals(double a, double b, double tolerance)",
    "name": "fuzzyEquals",
    "containingClass": {
      "qualifiedName": "com.google.common.math.DoubleMath",
      "name": "DoubleMath",
      "isArray": false
    },
    "targetClass": "com.google.common.math.DoubleMath",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "b"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "tolerance"
      }
    ],
    "equivalence": {
      "comment": "Returns true if a and b are within tolerance of each other. <p>Technically speaking, this is equivalent to Math.abs(a - b) <= tolerance || Double.valueOf(a).equals(Double.valueOf(b)). <p>Notable special cases include: <ul> All NaNs are fuzzily equal. <li>If a == b, then a and b are always fuzzily equal. <li>Positive and negative zero are always fuzzily equal. <li>If tolerance is zero, and neither a nor b is NaN, then a and b are fuzzily equal if and only if a == b. <li>With Double#POSITIVE_INFINITY tolerance, all non-NaN values are fuzzily equal. <li>With finite tolerance, Double.POSITIVE_INFINITY and Double.NEGATIVE_INFINITY are fuzzily equal only to themselves. <p>This is reflexive and symmetric, but not transitive, so it is not an equivalence relation and not suitable for use in Object#equals implementations.",
      "kind": "FreeText",
      "condition": "methodResultID==(Math.abs(args[0] - args[1]) <= args[2] || Double.valueOf(args[0]).equals(Double.valueOf(args[1])))"
    }
  },
  {
    "signature": "roundToInt(double x, java.math.RoundingMode mode)",
    "name": "roundToInt",
    "containingClass": {
      "qualifiedName": "com.google.common.math.DoubleMath",
      "name": "DoubleMath",
      "isArray": false
    },
    "targetClass": "com.google.common.math.DoubleMath",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "java.math.RoundingMode",
          "name": "RoundingMode",
          "isArray": false
        },
        "name": "mode"
      }
    ],
    "equivalence": {
      "comment": "Returns the int value that is equal to x rounded with the specified rounding mode, if possible.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "fuzzyCompare(double a, double b, double tolerance)",
    "name": "fuzzyCompare",
    "containingClass": {
      "qualifiedName": "com.google.common.math.DoubleMath",
      "name": "DoubleMath",
      "isArray": false
    },
    "targetClass": "com.google.common.math.DoubleMath",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "b"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "tolerance"
      }
    ],
    "equivalence": {
      "comment": "Compares a and b \"fuzzily,\" with a tolerance for nearly-equal values. <p>This method is equivalent to fuzzyEquals(a, b, tolerance) ? 0 : Double.compare(a, b). In particular, like double), it treats all NaN values as equal and greater than all other values (including Double#POSITIVE_INFINITY). <p>This is not a total ordering and is not suitable for use in Comparable#compareTo implementations. In particular, it is not transitive.",
      "kind": "FreeText",
      "condition": "methodResultID==(com.google.common.math.DoubleMath.fuzzyEquals(args[0], args[1], args[2]) ? 0 : Double.compare(args[0], args[1]))"
    }
  },
  {
    "signature": "isPowerOfTwo(double x)",
    "name": "isPowerOfTwo",
    "containingClass": {
      "qualifiedName": "com.google.common.math.DoubleMath",
      "name": "DoubleMath",
      "isArray": false
    },
    "targetClass": "com.google.common.math.DoubleMath",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "x"
      }
    ],
    "equivalence": {
      "comment": "Returns true if x is exactly equal to 2^k for some finite integer k.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "mean(java.lang.Iterable<? extends java.lang.Number> values)",
    "name": "mean",
    "containingClass": {
      "qualifiedName": "com.google.common.math.DoubleMath",
      "name": "DoubleMath",
      "isArray": false
    },
    "targetClass": "com.google.common.math.DoubleMath",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "values"
      }
    ],
    "equivalence": {
      "comment": "Returns the arithmetic mean of values. <p>If these values are a sample drawn from a population, this is also an unbiased estimator of the arithmetic mean of the population.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "mean(java.util.Iterator<? extends java.lang.Number> values)",
    "name": "mean",
    "containingClass": {
      "qualifiedName": "com.google.common.math.DoubleMath",
      "name": "DoubleMath",
      "isArray": false
    },
    "targetClass": "com.google.common.math.DoubleMath",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "values"
      }
    ],
    "equivalence": {
      "comment": "Returns the arithmetic mean of values. <p>If these values are a sample drawn from a population, this is also an unbiased estimator of the arithmetic mean of the population.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "roundIntermediate(double x, java.math.RoundingMode mode)",
    "name": "roundIntermediate",
    "containingClass": {
      "qualifiedName": "com.google.common.math.DoubleMath",
      "name": "DoubleMath",
      "isArray": false
    },
    "targetClass": "com.google.common.math.DoubleMath",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "x"
      },
      {
        "type": {
          "qualifiedName": "java.math.RoundingMode",
          "name": "RoundingMode",
          "isArray": false
        },
        "name": "mode"
      }
    ],
    "equivalence": {
      "comment": ".",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "log2(double x)",
    "name": "log2",
    "containingClass": {
      "qualifiedName": "com.google.common.math.DoubleMath",
      "name": "DoubleMath",
      "isArray": false
    },
    "targetClass": "com.google.common.math.DoubleMath",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "x"
      }
    ],
    "equivalence": {
      "comment": "Returns the base 2 logarithm of a double value. <p>Special cases: <li>If x is NaN or less than zero, the result is NaN. <li>If x is positive infinity, the result is positive infinity. <li>If x is positive or negative zero, the result is negative infinity. <p>The computed result is within 1 ulp of the exact result. <p>If the result of this method will be immediately rounded to an int, RoundingMode) is faster.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "isMathematicalInteger(double x)",
    "name": "isMathematicalInteger",
    "containingClass": {
      "qualifiedName": "com.google.common.math.DoubleMath",
      "name": "DoubleMath",
      "isArray": false
    },
    "targetClass": "com.google.common.math.DoubleMath",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "x"
      }
    ],
    "equivalence": {
      "comment": "Returns true if x represents a mathematical integer. <p>This is equivalent to, but not necessarily implemented as, the expression !Double.isNaN(x) && !Double.isInfinite(x) && x == Math.rint(x).",
      "kind": "FreeText",
      "condition": "methodResultID==(!Double.isNaN(args[0])&&!Double.isInfinite(args[0])&&args[0]==Math.rint(args[0]))"
    }
  },
  {
    "signature": "factorial(int n)",
    "name": "factorial",
    "containingClass": {
      "qualifiedName": "com.google.common.math.DoubleMath",
      "name": "DoubleMath",
      "isArray": false
    },
    "targetClass": "com.google.common.math.DoubleMath",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "equivalence": {
      "comment": "Returns n!, that is, the product of the first n positive integers, 1 if n == 0, or n!, or Double#POSITIVE_INFINITY if n! > Double.MAX_VALUE. <p>The result is within 1 ulp of the true value.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]