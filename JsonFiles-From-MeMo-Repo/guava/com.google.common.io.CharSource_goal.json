[
  {
    "signature": "copyTo(java.lang.Appendable appendable)",
    "name": "copyTo",
    "containingClass": {
      "qualifiedName": "com.google.common.io.CharSource",
      "name": "CharSource",
      "isArray": false
    },
    "targetClass": "com.google.common.io.CharSource",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Appendable",
          "name": "Appendable",
          "isArray": false
        },
        "name": "appendable"
      }
    ],
    "equivalence": {
      "comment": "Appends the contents of this source to the given Appendable (such as a Writer). Does not close appendable if it is Closeable.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "openStream()",
    "name": "openStream",
    "containingClass": {
      "qualifiedName": "com.google.common.io.CharSource",
      "name": "CharSource",
      "isArray": false
    },
    "targetClass": "com.google.common.io.CharSource",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.io.Reader",
      "name": "java.io.Reader",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Opens a new Reader for reading from this source. This method should return a new, independent reader each time it is called. <p>The caller is responsible for ensuring that the returned reader is closed.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "readLines()",
    "name": "readLines",
    "containingClass": {
      "qualifiedName": "com.google.common.io.CharSource",
      "name": "CharSource",
      "isArray": false
    },
    "targetClass": "com.google.common.io.CharSource",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.ImmutableList<java.lang.String>",
      "name": "com.google.common.collect.ImmutableList<java.lang.String>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Reads all the lines of this source as a list of strings. The returned list will be empty if this source is empty. <p>Like BufferedReader, this method breaks lines on any of \\n, \\r or \\r\\n, does not include the line separator in the returned lines and does not consider there to be an extra empty line at the end if the content is terminated with a line separator.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "isEmpty()",
    "name": "isEmpty",
    "containingClass": {
      "qualifiedName": "com.google.common.io.CharSource",
      "name": "CharSource",
      "isArray": false
    },
    "targetClass": "com.google.common.io.CharSource",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Returns whether the source has zero chars. The default implementation returns true if lengthIfKnown returns zero, falling back to opening a stream and checking for EOF if the length is not known. <p>Note that, in cases where lengthIfKnown returns zero, it is possible that chars are actually available for reading. This means that a source may return true from isEmpty() despite having readable content.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "readFirstLine()",
    "name": "readFirstLine",
    "containingClass": {
      "qualifiedName": "com.google.common.io.CharSource",
      "name": "CharSource",
      "isArray": false
    },
    "targetClass": "com.google.common.io.CharSource",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Reads the first link of this source as a string. Returns null if this source is empty. <p>Like BufferedReader, this method breaks lines on any of \\n, \\r or \\r\\n, does not include the line separator in the returned line and does not consider there to be an extra empty line at the end if the content is terminated with a line separator.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "length()",
    "name": "length",
    "containingClass": {
      "qualifiedName": "com.google.common.io.CharSource",
      "name": "CharSource",
      "isArray": false
    },
    "targetClass": "com.google.common.io.CharSource",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Returns the length of this source in chars, even if doing so requires opening and traversing an entire stream. To avoid a potentially expensive operation, see lengthIfKnown. <p>The default implementation calls lengthIfKnown and returns the value if present. If absent, it will fall back to a heavyweight operation that will open a stream, skip to the end of the stream, and return the total number of chars that were skipped. <p>Note that for sources that implement lengthIfKnown to provide a more efficient implementation, it is possible that this method will return a different number of chars than would be returned by reading all of the chars. <p>In either case, for mutable sources such as files, a subsequent read may return a different number of chars if the contents are changed.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "empty()",
    "name": "empty",
    "containingClass": {
      "qualifiedName": "com.google.common.io.CharSource",
      "name": "CharSource",
      "isArray": false
    },
    "targetClass": "com.google.common.io.CharSource",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.io.CharSource",
      "name": "com.google.common.io.CharSource",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Returns an immutable CharSource that contains no characters.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "concat(java.lang.Iterable<? extends com.google.common.io.CharSource> sources)",
    "name": "concat",
    "containingClass": {
      "qualifiedName": "com.google.common.io.CharSource",
      "name": "CharSource",
      "isArray": false
    },
    "targetClass": "com.google.common.io.CharSource",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.io.CharSource",
      "name": "com.google.common.io.CharSource",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "sources"
      }
    ],
    "equivalence": {
      "comment": "Concatenates multiple CharSource instances into a single source. Streams returned from the source will contain the concatenated data from the streams of the underlying sources. <p>Only one underlying stream will be open at a time. Closing the concatenated stream will close the open underlying stream.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "wrap(java.lang.CharSequence charSequence)",
    "name": "wrap",
    "containingClass": {
      "qualifiedName": "com.google.common.io.CharSource",
      "name": "CharSource",
      "isArray": false
    },
    "targetClass": "com.google.common.io.CharSource",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.io.CharSource",
      "name": "com.google.common.io.CharSource",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.CharSequence",
          "name": "CharSequence",
          "isArray": false
        },
        "name": "charSequence"
      }
    ],
    "equivalence": {
      "comment": "Returns a view of the given character sequence as a CharSource. The behavior of the returned CharSource and any Reader instances created by it is unspecified if the charSequence is mutated while it is being read, so don't do that.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "read()",
    "name": "read",
    "containingClass": {
      "qualifiedName": "com.google.common.io.CharSource",
      "name": "CharSource",
      "isArray": false
    },
    "targetClass": "com.google.common.io.CharSource",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Reads the contents of this source as a string.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "com.google.common.io.CharSource()",
    "name": "com.google.common.io.CharSource",
    "containingClass": {
      "qualifiedName": "com.google.common.io.CharSource",
      "name": "CharSource",
      "isArray": false
    },
    "targetClass": "com.google.common.io.CharSource",
    "isVarArgs": false,
    "parameters": [],
    "equivalence": {
      "comment": "Constructor for use by subclasses.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "lengthIfKnown()",
    "name": "lengthIfKnown",
    "containingClass": {
      "qualifiedName": "com.google.common.io.CharSource",
      "name": "CharSource",
      "isArray": false
    },
    "targetClass": "com.google.common.io.CharSource",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.base.Optional<java.lang.Long>",
      "name": "com.google.common.base.Optional<java.lang.Long>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Returns the size of this source in chars, if the size can be easily determined without actually opening the data stream. <p>The default implementation returns Optional#absent. Some sources, such as a CharSequence, may return a non-absent value. Note that in such cases, it is possible that this method will return a different number of chars than would be returned by reading all of the chars. <p>Additionally, for mutable sources such as StringBuilders, a subsequent read may return a different number of chars if the contents are changed.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "concat(java.util.Iterator<? extends com.google.common.io.CharSource> sources)",
    "name": "concat",
    "containingClass": {
      "qualifiedName": "com.google.common.io.CharSource",
      "name": "CharSource",
      "isArray": false
    },
    "targetClass": "com.google.common.io.CharSource",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.io.CharSource",
      "name": "com.google.common.io.CharSource",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "sources"
      }
    ],
    "equivalence": {
      "comment": "Concatenates multiple CharSource instances into a single source. Streams returned from the source will contain the concatenated data from the streams of the underlying sources. <p>Only one underlying stream will be open at a time. Closing the concatenated stream will close the open underlying stream. <p>Note: The input Iterator will be copied to an ImmutableList when this method is called. This will fail if the iterator is infinite and may cause problems if the iterator eagerly fetches data for each source when iterated (rather than producing sources that only load data through their streams). Prefer using the concat(Iterable) overload if possible.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "concat(com.google.common.io.CharSource... sources)",
    "name": "concat",
    "containingClass": {
      "qualifiedName": "com.google.common.io.CharSource",
      "name": "CharSource",
      "isArray": false
    },
    "targetClass": "com.google.common.io.CharSource",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "com.google.common.io.CharSource",
      "name": "com.google.common.io.CharSource",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Lcom.google.common.io.CharSource;",
          "name": "CharSource[]",
          "isArray": true
        },
        "name": "sources"
      }
    ],
    "equivalence": {
      "comment": "Concatenates multiple CharSource instances into a single source. Streams returned from the source will contain the concatenated data from the streams of the underlying sources. <p>Only one underlying stream will be open at a time. Closing the concatenated stream will close the open underlying stream.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "openBufferedStream()",
    "name": "openBufferedStream",
    "containingClass": {
      "qualifiedName": "com.google.common.io.CharSource",
      "name": "CharSource",
      "isArray": false
    },
    "targetClass": "com.google.common.io.CharSource",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.io.BufferedReader",
      "name": "java.io.BufferedReader",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Opens a new BufferedReader for reading from this source. This method should return a new, independent reader each time it is called. <p>The caller is responsible for ensuring that the returned reader is closed.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "copyTo(com.google.common.io.CharSink sink)",
    "name": "copyTo",
    "containingClass": {
      "qualifiedName": "com.google.common.io.CharSource",
      "name": "CharSource",
      "isArray": false
    },
    "targetClass": "com.google.common.io.CharSource",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.io.CharSink",
          "name": "CharSink",
          "isArray": false
        },
        "name": "sink"
      }
    ],
    "equivalence": {
      "comment": "Copies the contents of this source to the given sink.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "readLines(com.google.common.io.LineProcessor<T> processor)",
    "name": "readLines",
    "containingClass": {
      "qualifiedName": "com.google.common.io.CharSource",
      "name": "CharSource",
      "isArray": false
    },
    "targetClass": "com.google.common.io.CharSource",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "T",
      "name": "T",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.io.LineProcessor",
          "name": "LineProcessor",
          "isArray": false
        },
        "name": "processor"
      }
    ],
    "equivalence": {
      "comment": "Reads lines of text from this source, processing each line as it is read using the given processor. Stops when all lines have been processed or the processor returns false and returns the result produced by the processor. <p>Like BufferedReader, this method breaks lines on any of \\n, \\r or \\r\\n, does not include the line separator in the lines passed to the processor and does not consider there to be an extra empty line at the end if the content is terminated with a line separator.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]