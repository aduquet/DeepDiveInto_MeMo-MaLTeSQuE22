[
  {
    "signature": "empty()",
    "name": "empty",
    "containingClass": {
      "qualifiedName": "com.google.common.io.ByteSource",
      "name": "ByteSource",
      "isArray": false
    },
    "targetClass": "com.google.common.io.ByteSource",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.io.ByteSource",
      "name": "com.google.common.io.ByteSource",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Returns an immutable ByteSource that contains no bytes.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "isEmpty()",
    "name": "isEmpty",
    "containingClass": {
      "qualifiedName": "com.google.common.io.ByteSource",
      "name": "ByteSource",
      "isArray": false
    },
    "targetClass": "com.google.common.io.ByteSource",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Returns whether the source has zero bytes. The default implementation returns true if sizeIfKnown returns zero, falling back to opening a stream and checking for EOF if the size is not known. <p>Note that, in cases where sizeIfKnown returns zero, it is possible that bytes are actually available for reading. (For example, some special files may return a size of 0 despite actually having content when read.) This means that a source may return true from isEmpty() despite having readable content.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "hash(com.google.common.hash.HashFunction hashFunction)",
    "name": "hash",
    "containingClass": {
      "qualifiedName": "com.google.common.io.ByteSource",
      "name": "ByteSource",
      "isArray": false
    },
    "targetClass": "com.google.common.io.ByteSource",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.hash.HashCode",
      "name": "com.google.common.hash.HashCode",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.hash.HashFunction",
          "name": "HashFunction",
          "isArray": false
        },
        "name": "hashFunction"
      }
    ],
    "equivalence": {
      "comment": "Hashes the contents of this byte source using the given hash function.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "com.google.common.io.ByteSource()",
    "name": "com.google.common.io.ByteSource",
    "containingClass": {
      "qualifiedName": "com.google.common.io.ByteSource",
      "name": "ByteSource",
      "isArray": false
    },
    "targetClass": "com.google.common.io.ByteSource",
    "isVarArgs": false,
    "parameters": [],
    "equivalence": {
      "comment": "Constructor for use by subclasses.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "copyTo(com.google.common.io.ByteSink sink)",
    "name": "copyTo",
    "containingClass": {
      "qualifiedName": "com.google.common.io.ByteSource",
      "name": "ByteSource",
      "isArray": false
    },
    "targetClass": "com.google.common.io.ByteSource",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.io.ByteSink",
          "name": "ByteSink",
          "isArray": false
        },
        "name": "sink"
      }
    ],
    "equivalence": {
      "comment": "Copies the contents of this byte source to the given ByteSink.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "openStream()",
    "name": "openStream",
    "containingClass": {
      "qualifiedName": "com.google.common.io.ByteSource",
      "name": "ByteSource",
      "isArray": false
    },
    "targetClass": "com.google.common.io.ByteSource",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.io.InputStream",
      "name": "java.io.InputStream",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Opens a new InputStream for reading from this source. This method should return a new, independent stream each time it is called. <p>The caller is responsible for ensuring that the returned stream is closed.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "concat(java.lang.Iterable<? extends com.google.common.io.ByteSource> sources)",
    "name": "concat",
    "containingClass": {
      "qualifiedName": "com.google.common.io.ByteSource",
      "name": "ByteSource",
      "isArray": false
    },
    "targetClass": "com.google.common.io.ByteSource",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.io.ByteSource",
      "name": "com.google.common.io.ByteSource",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "sources"
      }
    ],
    "equivalence": {
      "comment": "Concatenates multiple ByteSource instances into a single source. Streams returned from the source will contain the concatenated data from the streams of the underlying sources. <p>Only one underlying stream will be open at a time. Closing the concatenated stream will close the open underlying stream.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "openBufferedStream()",
    "name": "openBufferedStream",
    "containingClass": {
      "qualifiedName": "com.google.common.io.ByteSource",
      "name": "ByteSource",
      "isArray": false
    },
    "targetClass": "com.google.common.io.ByteSource",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.io.InputStream",
      "name": "java.io.InputStream",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Opens a new buffered InputStream for reading from this source. The returned stream is not required to be a BufferedInputStream in order to allow implementations to simply delegate to openStream() when the stream returned by that method does not benefit from additional buffering (for example, a ByteArrayInputStream). This method should return a new, independent stream each time it is called. <p>The caller is responsible for ensuring that the returned stream is closed.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "contentEquals(com.google.common.io.ByteSource other)",
    "name": "contentEquals",
    "containingClass": {
      "qualifiedName": "com.google.common.io.ByteSource",
      "name": "ByteSource",
      "isArray": false
    },
    "targetClass": "com.google.common.io.ByteSource",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.io.ByteSource",
          "name": "ByteSource",
          "isArray": false
        },
        "name": "other"
      }
    ],
    "equivalence": {
      "comment": "Checks that the contents of this byte source are equal to the contents of the given byte source.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "read()",
    "name": "read",
    "containingClass": {
      "qualifiedName": "com.google.common.io.ByteSource",
      "name": "ByteSource",
      "isArray": false
    },
    "targetClass": "com.google.common.io.ByteSource",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "byte[]",
      "name": "byte[]",
      "isArray": true
    },
    "parameters": [],
    "equivalence": {
      "comment": "Reads the full contents of this byte source as a byte array.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "size()",
    "name": "size",
    "containingClass": {
      "qualifiedName": "com.google.common.io.ByteSource",
      "name": "ByteSource",
      "isArray": false
    },
    "targetClass": "com.google.common.io.ByteSource",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Returns the size of this source in bytes, even if doing so requires opening and traversing an entire stream. To avoid a potentially expensive operation, see sizeIfKnown. <p>The default implementation calls sizeIfKnown and returns the value if present. If absent, it will fall back to a heavyweight operation that will open a stream, read (or skip, if possible) to the end of the stream and return the total number of bytes that were read. <p>Note that for some sources that implement sizeIfKnown to provide a more efficient implementation, it is possible that this method will return a different number of bytes than would be returned by reading all of the bytes (for example, some special files may return a size of 0 despite actually having content when read). <p>In either case, for mutable sources such as files, a subsequent read may return a different number of bytes if the contents are changed.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "wrap(byte[] b)",
    "name": "wrap",
    "containingClass": {
      "qualifiedName": "com.google.common.io.ByteSource",
      "name": "ByteSource",
      "isArray": false
    },
    "targetClass": "com.google.common.io.ByteSource",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.io.ByteSource",
      "name": "com.google.common.io.ByteSource",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[B",
          "name": "byte[]",
          "isArray": true
        },
        "name": "b"
      }
    ],
    "equivalence": {
      "comment": "Returns a view of the given byte array as a ByteSource. To view only a specific range in the array, use ByteSource.wrap(b).slice(offset, length).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "asCharSource(java.nio.charset.Charset charset)",
    "name": "asCharSource",
    "containingClass": {
      "qualifiedName": "com.google.common.io.ByteSource",
      "name": "ByteSource",
      "isArray": false
    },
    "targetClass": "com.google.common.io.ByteSource",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.io.CharSource",
      "name": "com.google.common.io.CharSource",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.nio.charset.Charset",
          "name": "Charset",
          "isArray": false
        },
        "name": "charset"
      }
    ],
    "equivalence": {
      "comment": "Returns a CharSource view of this byte source that decodes bytes read from this source as characters using the given Charset.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "sizeIfKnown()",
    "name": "sizeIfKnown",
    "containingClass": {
      "qualifiedName": "com.google.common.io.ByteSource",
      "name": "ByteSource",
      "isArray": false
    },
    "targetClass": "com.google.common.io.ByteSource",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.base.Optional<java.lang.Long>",
      "name": "com.google.common.base.Optional<java.lang.Long>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Returns the size of this source in bytes, if the size can be easily determined without actually opening the data stream. <p>The default implementation returns Optional#absent. Some sources, such as a file, may return a non-absent value. Note that in such cases, it is possible that this method will return a different number of bytes than would be returned by reading all of the bytes (for example, some special files may return a size of 0 despite actually having content when read). <p>Additionally, for mutable sources such as files, a subsequent read may return a different number of bytes if the contents are changed.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "copyTo(java.io.OutputStream output)",
    "name": "copyTo",
    "containingClass": {
      "qualifiedName": "com.google.common.io.ByteSource",
      "name": "ByteSource",
      "isArray": false
    },
    "targetClass": "com.google.common.io.ByteSource",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.OutputStream",
          "name": "OutputStream",
          "isArray": false
        },
        "name": "output"
      }
    ],
    "equivalence": {
      "comment": "Copies the contents of this byte source to the given OutputStream. Does not close output.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "concat(java.util.Iterator<? extends com.google.common.io.ByteSource> sources)",
    "name": "concat",
    "containingClass": {
      "qualifiedName": "com.google.common.io.ByteSource",
      "name": "ByteSource",
      "isArray": false
    },
    "targetClass": "com.google.common.io.ByteSource",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.io.ByteSource",
      "name": "com.google.common.io.ByteSource",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "sources"
      }
    ],
    "equivalence": {
      "comment": "Concatenates multiple ByteSource instances into a single source. Streams returned from the source will contain the concatenated data from the streams of the underlying sources. <p>Only one underlying stream will be open at a time. Closing the concatenated stream will close the open underlying stream. <p>Note: The input Iterator will be copied to an ImmutableList when this method is called. This will fail if the iterator is infinite and may cause problems if the iterator eagerly fetches data for each source when iterated (rather than producing sources that only load data through their streams). Prefer using the concat(Iterable) overload if possible.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "concat(com.google.common.io.ByteSource... sources)",
    "name": "concat",
    "containingClass": {
      "qualifiedName": "com.google.common.io.ByteSource",
      "name": "ByteSource",
      "isArray": false
    },
    "targetClass": "com.google.common.io.ByteSource",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "com.google.common.io.ByteSource",
      "name": "com.google.common.io.ByteSource",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Lcom.google.common.io.ByteSource;",
          "name": "ByteSource[]",
          "isArray": true
        },
        "name": "sources"
      }
    ],
    "equivalence": {
      "comment": "Concatenates multiple ByteSource instances into a single source. Streams returned from the source will contain the concatenated data from the streams of the underlying sources. <p>Only one underlying stream will be open at a time. Closing the concatenated stream will close the open underlying stream.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "read(com.google.common.io.ByteProcessor<T> processor)",
    "name": "read",
    "containingClass": {
      "qualifiedName": "com.google.common.io.ByteSource",
      "name": "ByteSource",
      "isArray": false
    },
    "targetClass": "com.google.common.io.ByteSource",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "T",
      "name": "T",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.io.ByteProcessor",
          "name": "ByteProcessor",
          "isArray": false
        },
        "name": "processor"
      }
    ],
    "equivalence": {
      "comment": "Reads the contents of this byte source using the given processor to process bytes as they are read. Stops when all bytes have been read or the consumer returns false. Returns the result produced by the processor.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "slice(long offset, long length)",
    "name": "slice",
    "containingClass": {
      "qualifiedName": "com.google.common.io.ByteSource",
      "name": "ByteSource",
      "isArray": false
    },
    "targetClass": "com.google.common.io.ByteSource",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.io.ByteSource",
      "name": "com.google.common.io.ByteSource",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "offset"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "length"
      }
    ],
    "equivalence": {
      "comment": "Returns a view of a slice of this byte source that is at most length bytes long starting at the given offset. If offset is greater than the size of this source, the returned source will be empty. If offset + length is greater than the size of this source, the returned source will contain the slice starting at offset and ending at the end of this source.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]