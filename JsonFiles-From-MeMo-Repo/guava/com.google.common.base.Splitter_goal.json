[
  {
    "signature": "on(java.lang.String separator)",
    "name": "on",
    "containingClass": {
      "qualifiedName": "com.google.common.base.Splitter",
      "name": "Splitter",
      "isArray": false
    },
    "targetClass": "com.google.common.base.Splitter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.base.Splitter",
      "name": "com.google.common.base.Splitter",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "separator"
      }
    ],
    "equivalence": {
      "comment": "Returns a splitter that uses the given fixed string as a separator. For example, Splitter.on(\", \").split(\"foo, bar,baz\") returns an iterable containing [\"foo\", \"bar,baz\"].",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "withKeyValueSeparator(java.lang.String separator)",
    "name": "withKeyValueSeparator",
    "containingClass": {
      "qualifiedName": "com.google.common.base.Splitter",
      "name": "Splitter",
      "isArray": false
    },
    "targetClass": "com.google.common.base.Splitter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.base.Splitter$MapSplitter",
      "name": "com.google.common.base.Splitter$MapSplitter",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "separator"
      }
    ],
    "equivalence": {
      "comment": "Returns a MapSplitter which splits entries based on this splitter, and splits entries into keys and values using the specified separator.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "withKeyValueSeparator(char separator)",
    "name": "withKeyValueSeparator",
    "containingClass": {
      "qualifiedName": "com.google.common.base.Splitter",
      "name": "Splitter",
      "isArray": false
    },
    "targetClass": "com.google.common.base.Splitter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.base.Splitter$MapSplitter",
      "name": "com.google.common.base.Splitter$MapSplitter",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "char",
          "name": "char",
          "isArray": false
        },
        "name": "separator"
      }
    ],
    "equivalence": {
      "comment": "Returns a MapSplitter which splits entries based on this splitter, and splits entries into keys and values using the specified separator.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "trimResults()",
    "name": "trimResults",
    "containingClass": {
      "qualifiedName": "com.google.common.base.Splitter",
      "name": "Splitter",
      "isArray": false
    },
    "targetClass": "com.google.common.base.Splitter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.base.Splitter",
      "name": "com.google.common.base.Splitter",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Returns a splitter that behaves equivalently to this splitter, but automatically removes leading and trailing {@linkplain CharMatcher#WHITESPACE whitespace} from each returned substring; equivalent to trimResults(CharMatcher.WHITESPACE). For example, Splitter.on(',').trimResults().split(\" a, b ,c \") returns an iterable containing [\"a\", \"b\", \"c\"].",
      "kind": "FreeText",
      "condition": "methodResultID.equals(receiverObjectClone.trimResults(com.google.common.base.CharMatcher.WHITESPACE))"
    }
  },
  {
    "signature": "limit(int limit)",
    "name": "limit",
    "containingClass": {
      "qualifiedName": "com.google.common.base.Splitter",
      "name": "Splitter",
      "isArray": false
    },
    "targetClass": "com.google.common.base.Splitter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.base.Splitter",
      "name": "com.google.common.base.Splitter",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "limit"
      }
    ],
    "equivalence": {
      "comment": "Returns a splitter that behaves equivalently to this splitter but stops splitting after it reaches the limit. The limit defines the maximum number of items returned by the iterator, or the maximum size of the list returned by splitToList. <p>For example, Splitter.on(',').limit(3).split(\"a,b,c,d\") returns an iterable containing [\"a\", \"b\", \"c,d\"]. When omitting empty strings, the omitted strings do no count. Hence, Splitter.on(',').limit(3).omitEmptyStrings().split(\"a,,,b,,,c,d\") returns an iterable containing [\"a\", \"b\", \"c,d\". When trim is requested, all entries, including the last are trimmed. Hence Splitter.on(',').limit(3).trimResults().split(\" a , b , c , d \") results in [\"a\", \"b\", \"c , d\"].",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "withKeyValueSeparator(com.google.common.base.Splitter keyValueSplitter)",
    "name": "withKeyValueSeparator",
    "containingClass": {
      "qualifiedName": "com.google.common.base.Splitter",
      "name": "Splitter",
      "isArray": false
    },
    "targetClass": "com.google.common.base.Splitter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.base.Splitter$MapSplitter",
      "name": "com.google.common.base.Splitter$MapSplitter",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.base.Splitter",
          "name": "Splitter",
          "isArray": false
        },
        "name": "keyValueSplitter"
      }
    ],
    "equivalence": {
      "comment": "Returns a MapSplitter which splits entries based on this splitter, and splits entries into keys and values using the specified key-value splitter.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "omitEmptyStrings()",
    "name": "omitEmptyStrings",
    "containingClass": {
      "qualifiedName": "com.google.common.base.Splitter",
      "name": "Splitter",
      "isArray": false
    },
    "targetClass": "com.google.common.base.Splitter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.base.Splitter",
      "name": "com.google.common.base.Splitter",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Returns a splitter that behaves equivalently to this splitter, but automatically omits empty strings from the results. For example, Splitter.on(',').omitEmptyStrings().split(\",a,,,b,c,,\") returns an iterable containing only [\"a\", \"b\", \"c\"]. <p>If either trimResults option is also specified when creating a splitter, that splitter always trims results first before checking for emptiness. So, for example, Splitter.on(':').omitEmptyStrings().trimResults().split(\": : : \") returns an empty iterable. <p>Note that it is ordinarily not possible for split(CharSequence) to return an empty iterable, but when using this option, it can (if the input sequence consists of nothing but separators).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "onPattern(java.lang.String separatorPattern)",
    "name": "onPattern",
    "containingClass": {
      "qualifiedName": "com.google.common.base.Splitter",
      "name": "Splitter",
      "isArray": false
    },
    "targetClass": "com.google.common.base.Splitter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.base.Splitter",
      "name": "com.google.common.base.Splitter",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "separatorPattern"
      }
    ],
    "equivalence": {
      "comment": "Returns a splitter that considers any subsequence matching a given pattern (regular expression) to be a separator. For example, Splitter.onPattern(\"\\r?\\n\").split(entireFile) splits a string into lines whether it uses DOS-style or UNIX-style line terminators. This is equivalent to Splitter.on(Pattern.compile(pattern)).",
      "kind": "FreeText",
      "condition": "methodResultID.equals(Splitter.on(java.util.regex.Pattern.compile(args[0])))"
    }
  },
  {
    "signature": "split(java.lang.CharSequence sequence)",
    "name": "split",
    "containingClass": {
      "qualifiedName": "com.google.common.base.Splitter",
      "name": "Splitter",
      "isArray": false
    },
    "targetClass": "com.google.common.base.Splitter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Iterable<java.lang.String>",
      "name": "java.lang.Iterable<java.lang.String>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.CharSequence",
          "name": "CharSequence",
          "isArray": false
        },
        "name": "sequence"
      }
    ],
    "equivalence": {
      "comment": "Splits sequence into string components and makes them available through an Iterator, which may be lazily evaluated. If you want an eagerly computed List, use splitToList(CharSequence).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "trimResults(com.google.common.base.CharMatcher trimmer)",
    "name": "trimResults",
    "containingClass": {
      "qualifiedName": "com.google.common.base.Splitter",
      "name": "Splitter",
      "isArray": false
    },
    "targetClass": "com.google.common.base.Splitter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.base.Splitter",
      "name": "com.google.common.base.Splitter",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.base.CharMatcher",
          "name": "CharMatcher",
          "isArray": false
        },
        "name": "trimmer"
      }
    ],
    "equivalence": {
      "comment": ".",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "on(com.google.common.base.CharMatcher separatorMatcher)",
    "name": "on",
    "containingClass": {
      "qualifiedName": "com.google.common.base.Splitter",
      "name": "Splitter",
      "isArray": false
    },
    "targetClass": "com.google.common.base.Splitter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.base.Splitter",
      "name": "com.google.common.base.Splitter",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.base.CharMatcher",
          "name": "CharMatcher",
          "isArray": false
        },
        "name": "separatorMatcher"
      }
    ],
    "equivalence": {
      "comment": "Returns a splitter that considers any single character matched by the given CharMatcher to be a separator. For example, Splitter.on(CharMatcher.anyOf(\";,\")).split(\"foo,;bar,quux\") returns an iterable containing [\"foo\", \"\", \"bar\", \"quux\"].",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "on(java.util.regex.Pattern separatorPattern)",
    "name": "on",
    "containingClass": {
      "qualifiedName": "com.google.common.base.Splitter",
      "name": "Splitter",
      "isArray": false
    },
    "targetClass": "com.google.common.base.Splitter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.base.Splitter",
      "name": "com.google.common.base.Splitter",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.regex.Pattern",
          "name": "Pattern",
          "isArray": false
        },
        "name": "separatorPattern"
      }
    ],
    "equivalence": {
      "comment": "Returns a splitter that considers any subsequence matching pattern to be a separator. For example, Splitter.on(Pattern.compile(\"\\r?\\n\")).split(entireFile) splits a string into lines whether it uses DOS-style or UNIX-style line terminators.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "on(char separator)",
    "name": "on",
    "containingClass": {
      "qualifiedName": "com.google.common.base.Splitter",
      "name": "Splitter",
      "isArray": false
    },
    "targetClass": "com.google.common.base.Splitter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.base.Splitter",
      "name": "com.google.common.base.Splitter",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "char",
          "name": "char",
          "isArray": false
        },
        "name": "separator"
      }
    ],
    "equivalence": {
      "comment": "Returns a splitter that uses the given single-character separator. For example, Splitter.on(',').split(\"foo,,bar\") returns an iterable containing [\"foo\", \"\", \"bar\"].",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "fixedLength(int length)",
    "name": "fixedLength",
    "containingClass": {
      "qualifiedName": "com.google.common.base.Splitter",
      "name": "Splitter",
      "isArray": false
    },
    "targetClass": "com.google.common.base.Splitter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.base.Splitter",
      "name": "com.google.common.base.Splitter",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "length"
      }
    ],
    "equivalence": {
      "comment": "Returns a splitter that divides strings into pieces of the given length. For example, Splitter.fixedLength(2).split(\"abcde\") returns an iterable containing [\"ab\", \"cd\", \"e\"]. The last piece can be smaller than length but will never be empty. <p>Exception: for consistency with separator-based splitters, split(\"\") does not yield an empty iterable, but an iterable containing \"\". This is the only case in which Iterables.size(split(input)) does not equal IntMath.divide(input.length(), length, CEILING). To avoid this behavior, use omitEmptyStrings.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "splitToList(java.lang.CharSequence sequence)",
    "name": "splitToList",
    "containingClass": {
      "qualifiedName": "com.google.common.base.Splitter",
      "name": "Splitter",
      "isArray": false
    },
    "targetClass": "com.google.common.base.Splitter",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List<java.lang.String>",
      "name": "java.util.List<java.lang.String>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.CharSequence",
          "name": "CharSequence",
          "isArray": false
        },
        "name": "sequence"
      }
    ],
    "equivalence": {
      "comment": "Splits sequence into string components and returns them as an immutable list. If you want an Iterable which may be lazily evaluated, use split(CharSequence).",
      "kind": "FreeText",
      "condition": ""
    }
  }
]