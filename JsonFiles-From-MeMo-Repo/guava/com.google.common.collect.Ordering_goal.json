[
  {
    "signature": "reverse()",
    "name": "reverse",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Ordering",
      "name": "Ordering",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Ordering",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.Ordering<S>",
      "name": "com.google.common.collect.Ordering<S>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": ".",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "max(java.util.Iterator<E> iterator)",
    "name": "max",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Ordering",
      "name": "Ordering",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Ordering",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "iterator"
      }
    ],
    "equivalence": {
      "comment": "Returns the greatest of the specified values according to this ordering. If there are multiple greatest values, the first of those is returned. The iterator will be left exhausted: its hasNext() method will return false.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "com.google.common.collect.Ordering()",
    "name": "com.google.common.collect.Ordering",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Ordering",
      "name": "Ordering",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Ordering",
    "isVarArgs": false,
    "parameters": [],
    "equivalence": {
      "comment": "Constructs a new instance of this class (only invokable by the subclass constructor, typically implicit).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "min(java.lang.Iterable<E> iterable)",
    "name": "min",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Ordering",
      "name": "Ordering",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Ordering",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "iterable"
      }
    ],
    "equivalence": {
      "comment": "Returns the least of the specified values according to this ordering. If there are multiple least values, the first of those is returned.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "max(E a, E b, E c, E... rest)",
    "name": "max",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Ordering",
      "name": "Ordering",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Ordering",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "a",
        "nullable": true
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "b",
        "nullable": true
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "c",
        "nullable": true
      },
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Object;",
          "name": "Object[]",
          "isArray": true
        },
        "name": "rest"
      }
    ],
    "equivalence": {
      "comment": "Returns the greatest of the specified values according to this ordering. If there are multiple greatest values, the first of those is returned.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "compare(T left, T right)",
    "name": "compare",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Ordering",
      "name": "Ordering",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Ordering",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "left",
        "nullable": true
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "right",
        "nullable": true
      }
    ],
    "equivalence": {
      "comment": ".",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "natural()",
    "name": "natural",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Ordering",
      "name": "Ordering",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Ordering",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.Ordering<C>",
      "name": "com.google.common.collect.Ordering<C>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Returns a serializable ordering that uses the natural order of the values. The ordering throws a NullPointerException when passed a null parameter. <p>The type specification is <C extends Comparable>, instead of the technically correct <C extends Comparable<? super C>>, to support legacy types from before Java 5.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "explicit(java.util.List<T> valuesInOrder)",
    "name": "explicit",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Ordering",
      "name": "Ordering",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Ordering",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.Ordering<T>",
      "name": "com.google.common.collect.Ordering<T>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.List",
          "name": "List",
          "isArray": false
        },
        "name": "valuesInOrder"
      }
    ],
    "equivalence": {
      "comment": "Returns an ordering that compares objects according to the order in which they appear in the given list. Only objects present in the list (according to Object#equals) may be compared. This comparator imposes a \"partial ordering\" over the type T. Subsequent changes to the valuesInOrder list will have no effect on the returned comparator. Null values in the list are not supported. <p>The returned comparator throws an ClassCastException when it receives an input parameter that isn't among the provided values. <p>The generated comparator is serializable if all the provided values are serializable.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "min(java.util.Iterator<E> iterator)",
    "name": "min",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Ordering",
      "name": "Ordering",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Ordering",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "iterator"
      }
    ],
    "equivalence": {
      "comment": "Returns the least of the specified values according to this ordering. If there are multiple least values, the first of those is returned. The iterator will be left exhausted: its hasNext() method will return false.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "binarySearch(java.util.List<? extends T> sortedList, T key)",
    "name": "binarySearch",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Ordering",
      "name": "Ordering",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Ordering",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.List",
          "name": "List",
          "isArray": false
        },
        "name": "sortedList"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "key",
        "nullable": true
      }
    ],
    "equivalence": {
      "comment": "Object, Comparator) Searches sortedList for key using the binary search algorithm. The list must be sorted using this ordering.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "greatestOf(java.util.Iterator<E> iterator, int k)",
    "name": "greatestOf",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Ordering",
      "name": "Ordering",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Ordering",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List<E>",
      "name": "java.util.List<E>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "iterator"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "k"
      }
    ],
    "equivalence": {
      "comment": "Returns the k greatest elements from the given iterator according to this ordering, in order from greatest to least. If there are fewer than k elements present, all will be included. <p>The implementation does not necessarily use a stable sorting algorithm; when multiple elements are equivalent, it is undefined which will come first.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "lexicographical()",
    "name": "lexicographical",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Ordering",
      "name": "Ordering",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Ordering",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.Ordering<java.lang.Iterable<S>>",
      "name": "com.google.common.collect.Ordering<java.lang.Iterable<S>>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Returns a new ordering which sorts iterables by comparing corresponding elements pairwise until a nonzero result is found; imposes \"dictionary order\". If the end of one iterable is reached, but not the other, the shorter iterable is considered to be less than the longer one. For example, a lexicographical natural ordering over integers considers [] < [1] < [1, 1] < [1, 2] < [2]. <p>Note that ordering.lexicographical().reverse() is not equivalent to ordering.reverse().lexicographical() (consider how each would order [1] and [1, 1]).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "from(java.util.Comparator<T> comparator)",
    "name": "from",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Ordering",
      "name": "Ordering",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Ordering",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.Ordering<T>",
      "name": "com.google.common.collect.Ordering<T>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Comparator",
          "name": "Comparator",
          "isArray": false
        },
        "name": "comparator"
      }
    ],
    "equivalence": {
      "comment": "Returns an ordering based on an existing comparator instance. Note that it is unnecessary to create a new anonymous inner class implementing Comparator just to pass it in here. Instead, simply subclass Ordering and implement its compare method directly.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "leastOf(java.util.Iterator<E> elements, int k)",
    "name": "leastOf",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Ordering",
      "name": "Ordering",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Ordering",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List<E>",
      "name": "java.util.List<E>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "elements"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "k"
      }
    ],
    "equivalence": {
      "comment": "Returns the k least elements from the given iterator according to this ordering, in order from least to greatest. If there are fewer than k elements present, all will be included. <p>The implementation does not necessarily use a stable sorting algorithm; when multiple elements are equivalent, it is undefined which will come first.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "compound(java.lang.Iterable<? extends java.util.Comparator<? super T>> comparators)",
    "name": "compound",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Ordering",
      "name": "Ordering",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Ordering",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.Ordering<T>",
      "name": "com.google.common.collect.Ordering<T>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "comparators"
      }
    ],
    "equivalence": {
      "comment": "Returns an ordering which tries each given comparator in order until a non-zero result is found, returning that result, and returning zero only if all comparators return zero. The returned ordering is based on the state of the comparators iterable at the time it was provided to this method. <p>The returned ordering is equivalent to that produced using Ordering.from(comp1).compound(comp2).compound(comp3) . . .. <p>Warning: Supplying an argument with undefined iteration order, such as a HashSet, will produce non-deterministic results.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "usingToString()",
    "name": "usingToString",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Ordering",
      "name": "Ordering",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Ordering",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.Ordering<java.lang.Object>",
      "name": "com.google.common.collect.Ordering<java.lang.Object>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Returns an ordering that compares objects by the natural ordering of their string representations as returned by toString(). It does not support null values. <p>The comparator is serializable.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "nullsFirst()",
    "name": "nullsFirst",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Ordering",
      "name": "Ordering",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Ordering",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.Ordering<S>",
      "name": "com.google.common.collect.Ordering<S>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": ".",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "isStrictlyOrdered(java.lang.Iterable<? extends T> iterable)",
    "name": "isStrictlyOrdered",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Ordering",
      "name": "Ordering",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Ordering",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "iterable"
      }
    ],
    "equivalence": {
      "comment": "Returns true if each element in iterable after the first is strictly greater than the element that preceded it, according to this ordering. Note that this is always true when the iterable has fewer than two elements.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "nullsLast()",
    "name": "nullsLast",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Ordering",
      "name": "Ordering",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Ordering",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.Ordering<S>",
      "name": "com.google.common.collect.Ordering<S>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": ".",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "isOrdered(java.lang.Iterable<? extends T> iterable)",
    "name": "isOrdered",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Ordering",
      "name": "Ordering",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Ordering",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "iterable"
      }
    ],
    "equivalence": {
      "comment": "Returns true if each element in iterable after the first is greater than or equal to the element that preceded it, according to this ordering. Note that this is always true when the iterable has fewer than two elements.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "immutableSortedCopy(java.lang.Iterable<E> elements)",
    "name": "immutableSortedCopy",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Ordering",
      "name": "Ordering",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Ordering",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.ImmutableList<E>",
      "name": "com.google.common.collect.ImmutableList<E>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "elements"
      }
    ],
    "equivalence": {
      "comment": "Returns an immutable list containing elements sorted by this ordering. The input is not modified. <p>Unlike Sets#newTreeSet(Iterable), this method does not discard elements that are duplicates according to the comparator. The sort performed is stable, meaning that such elements will appear in the returned list in the same order they appeared in elements. <p>Performance note: According to our benchmarking on Open JDK 7, this method is the most efficient way to make a sorted copy of a collection.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "allEqual()",
    "name": "allEqual",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Ordering",
      "name": "Ordering",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Ordering",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.Ordering<java.lang.Object>",
      "name": "com.google.common.collect.Ordering<java.lang.Object>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Returns an ordering which treats all values as equal, indicating \"no ordering.\" Passing this ordering to any stable sort algorithm results in no change to the order of elements. Note especially that sortedCopy and immutableSortedCopy are stable, and in the returned instance these are implemented by simply copying the source list. <p>Example: Ordering.allEqual().nullsLast().sortedCopy( asList(t, null, e, s, null, t, null)) <p>Assuming t, e and s are non-null, this returns [t, e, s, t, null, null, null] regardlesss of the true comparison order of those three values (which might not even implement Comparable at all). <p>Warning: by definition, this comparator is not consistent with equals (as defined {@linkplain Comparator here}). Avoid its use in APIs, such as TreeSet#TreeSet(Comparator), where such consistency is expected. <p>The returned comparator is serializable.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "explicit(T leastValue, T... remainingValuesInOrder)",
    "name": "explicit",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Ordering",
      "name": "Ordering",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Ordering",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "com.google.common.collect.Ordering<T>",
      "name": "com.google.common.collect.Ordering<T>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "leastValue"
      },
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Object;",
          "name": "Object[]",
          "isArray": true
        },
        "name": "remainingValuesInOrder"
      }
    ],
    "equivalence": {
      "comment": "Returns an ordering that compares objects according to the order in which they are given to this method. Only objects present in the argument list (according to Object#equals) may be compared. This comparator imposes a \"partial ordering\" over the type T. Null values in the argument list are not supported. <p>The returned comparator throws a ClassCastException when it receives an input parameter that isn't among the provided values. <p>The generated comparator is serializable if all the provided values are serializable.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "min(E a, E b)",
    "name": "min",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Ordering",
      "name": "Ordering",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Ordering",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "a",
        "nullable": true
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "b",
        "nullable": true
      }
    ],
    "equivalence": {
      "comment": "Returns the lesser of the two values according to this ordering. If the values compare as 0, the first is returned. <p>Implementation note: this method is invoked by the default implementations of the other min overloads, so overriding it will affect their behavior.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "arbitrary()",
    "name": "arbitrary",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Ordering",
      "name": "Ordering",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Ordering",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.Ordering<java.lang.Object>",
      "name": "com.google.common.collect.Ordering<java.lang.Object>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Returns an arbitrary ordering over all objects, for which compare(a, b) == 0 implies a == b (identity equality). There is no meaning whatsoever to the order imposed, but it is constant for the life of the VM. <p>Because the ordering is identity-based, it is not \"consistent with Object#equals(Object)\" as defined by Comparator. Use caution when building a SortedSet or SortedMap from it, as the resulting collection will not behave exactly according to spec. <p>This ordering is not serializable, as its implementation relies on System#identityHashCode(Object), so its behavior cannot be preserved across serialization.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "onKeys()",
    "name": "onKeys",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Ordering",
      "name": "Ordering",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Ordering",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.Ordering<java.util.Map$Entry<T2, ?>>",
      "name": "com.google.common.collect.Ordering<java.util.Map$Entry<T2, ?>>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": ".",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "from(com.google.common.collect.Ordering<T> ordering)",
    "name": "from",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Ordering",
      "name": "Ordering",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Ordering",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.Ordering<T>",
      "name": "com.google.common.collect.Ordering<T>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.collect.Ordering",
          "name": "Ordering",
          "isArray": false
        },
        "name": "ordering"
      }
    ],
    "equivalence": {
      "comment": "Simply returns its argument. @deprecated no need to use this.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "sortedCopy(java.lang.Iterable<E> elements)",
    "name": "sortedCopy",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Ordering",
      "name": "Ordering",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Ordering",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List<E>",
      "name": "java.util.List<E>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "elements"
      }
    ],
    "equivalence": {
      "comment": "Returns a mutable list containing elements sorted by this ordering; use this only when the resulting list may need further modification, or may contain null. The input is not modified. The returned list is serializable and has random access. <p>Unlike Sets#newTreeSet(Iterable), this method does not discard elements that are duplicates according to the comparator. The sort performed is stable, meaning that such elements will appear in the returned list in the same order they appeared in elements. <p>Performance note: According to our benchmarking on Open JDK 7, immutableSortedCopy generally performs better (in both time and space) than this method, and this method in turn generally performs better than copying the list and calling Collections#sort(List).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "onResultOf(com.google.common.base.Function<F, ? extends T> function)",
    "name": "onResultOf",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Ordering",
      "name": "Ordering",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Ordering",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.Ordering<F>",
      "name": "com.google.common.collect.Ordering<F>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.base.Function",
          "name": "Function",
          "isArray": false
        },
        "name": "function"
      }
    ],
    "equivalence": {
      "comment": "Returns a new ordering on F which orders elements by first applying a function to them, then comparing those results using this. For example, to compare objects by their string forms, in a case-insensitive manner, use: Ordering.from(String.CASE_INSENSITIVE_ORDER) .onResultOf(Functions.toStringFunction()).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "max(E a, E b)",
    "name": "max",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Ordering",
      "name": "Ordering",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Ordering",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "a",
        "nullable": true
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "b",
        "nullable": true
      }
    ],
    "equivalence": {
      "comment": "Returns the greater of the two values according to this ordering. If the values compare as 0, the first is returned. <p>Implementation note: this method is invoked by the default implementations of the other max overloads, so overriding it will affect their behavior.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "greatestOf(java.lang.Iterable<E> iterable, int k)",
    "name": "greatestOf",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Ordering",
      "name": "Ordering",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Ordering",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List<E>",
      "name": "java.util.List<E>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "iterable"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "k"
      }
    ],
    "equivalence": {
      "comment": "Returns the k greatest elements of the given iterable according to this ordering, in order from greatest to least. If there are fewer than k elements present, all will be included. <p>The implementation does not necessarily use a stable sorting algorithm; when multiple elements are equivalent, it is undefined which will come first.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "leastOf(java.lang.Iterable<E> iterable, int k)",
    "name": "leastOf",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Ordering",
      "name": "Ordering",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Ordering",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List<E>",
      "name": "java.util.List<E>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "iterable"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "k"
      }
    ],
    "equivalence": {
      "comment": "Returns the k least elements of the given iterable according to this ordering, in order from least to greatest. If there are fewer than k elements present, all will be included. <p>The implementation does not necessarily use a stable sorting algorithm; when multiple elements are equivalent, it is undefined which will come first.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "max(java.lang.Iterable<E> iterable)",
    "name": "max",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Ordering",
      "name": "Ordering",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Ordering",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "iterable"
      }
    ],
    "equivalence": {
      "comment": "Returns the greatest of the specified values according to this ordering. If there are multiple greatest values, the first of those is returned.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "min(E a, E b, E c, E... rest)",
    "name": "min",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Ordering",
      "name": "Ordering",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Ordering",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "a",
        "nullable": true
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "b",
        "nullable": true
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "c",
        "nullable": true
      },
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Object;",
          "name": "Object[]",
          "isArray": true
        },
        "name": "rest"
      }
    ],
    "equivalence": {
      "comment": "Returns the least of the specified values according to this ordering. If there are multiple least values, the first of those is returned.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "compound(java.util.Comparator<? super U> secondaryComparator)",
    "name": "compound",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Ordering",
      "name": "Ordering",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Ordering",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.Ordering<U>",
      "name": "com.google.common.collect.Ordering<U>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Comparator",
          "name": "Comparator",
          "isArray": false
        },
        "name": "secondaryComparator"
      }
    ],
    "equivalence": {
      "comment": "Returns an ordering which first uses the ordering this, but which in the event of a \"tie\", then delegates to secondaryComparator. For example, to sort a bug list first by status and second by priority, you might use byStatus.compound(byPriority). For a compound ordering with three or more components, simply chain multiple calls to this method. <p>An ordering produced by this method, or a chain of calls to this method, is equivalent to one created using Ordering#compound(Iterable) on the same component comparators.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]