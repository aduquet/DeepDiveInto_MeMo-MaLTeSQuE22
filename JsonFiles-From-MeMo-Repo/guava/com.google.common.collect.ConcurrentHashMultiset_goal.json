[
  {
    "signature": "remove(java.lang.Object element, int occurrences)",
    "name": "remove",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.ConcurrentHashMultiset",
      "name": "ConcurrentHashMultiset",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.ConcurrentHashMultiset",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "element",
        "nullable": true
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "occurrences"
      }
    ],
    "equivalence": {
      "member": "remove(java.lang.Object element, int occurrences)",
      "comment": "Removes a number of occurrences of the specified element from this multiset. If the multiset contains fewer than this number of occurrences to begin with, all occurrences will be removed.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setCount(E element, int expectedOldCount, int newCount)",
    "name": "setCount",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.ConcurrentHashMultiset",
      "name": "ConcurrentHashMultiset",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.ConcurrentHashMultiset",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "element"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "expectedOldCount"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "newCount"
      }
    ],
    "equivalence": {
      "member": "setCount(E element, int expectedOldCount, int newCount)",
      "comment": "Sets the number of occurrences of element to newCount, but only if the count is currently expectedOldCount. If element does not appear in the multiset exactly expectedOldCount times, no changes will be made.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "createEntrySet()",
    "name": "createEntrySet",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.ConcurrentHashMultiset",
      "name": "ConcurrentHashMultiset",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.ConcurrentHashMultiset",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Set<com.google.common.collect.Multiset$Entry<E>>",
      "name": "java.util.Set<com.google.common.collect.Multiset$Entry<E>>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "createEntrySet()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toArray(T[] array)",
    "name": "toArray",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.ConcurrentHashMultiset",
      "name": "ConcurrentHashMultiset",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.ConcurrentHashMultiset",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "T[]",
      "name": "T[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Object;",
          "name": "Object[]",
          "isArray": true
        },
        "name": "array"
      }
    ],
    "equivalence": {
      "member": "toArray(T[] array)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "createElementSet()",
    "name": "createElementSet",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.ConcurrentHashMultiset",
      "name": "ConcurrentHashMultiset",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.ConcurrentHashMultiset",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Set<E>",
      "name": "java.util.Set<E>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "createElementSet()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "clear()",
    "name": "clear",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.ConcurrentHashMultiset",
      "name": "ConcurrentHashMultiset",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.ConcurrentHashMultiset",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "clear()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "count(java.lang.Object element)",
    "name": "count",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.ConcurrentHashMultiset",
      "name": "ConcurrentHashMultiset",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.ConcurrentHashMultiset",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "element",
        "nullable": true
      }
    ],
    "equivalence": {
      "member": "count(java.lang.Object element)",
      "comment": "Returns the number of occurrences of element in this multiset.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "create(java.lang.Iterable<? extends E> elements)",
    "name": "create",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.ConcurrentHashMultiset",
      "name": "ConcurrentHashMultiset",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.ConcurrentHashMultiset",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.ConcurrentHashMultiset<E>",
      "name": "com.google.common.collect.ConcurrentHashMultiset<E>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "elements"
      }
    ],
    "equivalence": {
      "member": "create(java.lang.Iterable<? extends E> elements)",
      "comment": "Creates a new ConcurrentHashMultiset containing the specified elements, using the default initial capacity, load factor, and concurrency settings. This implementation is highly efficient when elements is itself a Multiset.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "size()",
    "name": "size",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.ConcurrentHashMultiset",
      "name": "ConcurrentHashMultiset",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.ConcurrentHashMultiset",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "size()",
      "comment": "{@inheritDoc} If the data in the multiset is modified by any other threads during this method, it is undefined which (if any) of these modifications will be reflected in the result.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "isEmpty()",
    "name": "isEmpty",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.ConcurrentHashMultiset",
      "name": "ConcurrentHashMultiset",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.ConcurrentHashMultiset",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "isEmpty()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "distinctElements()",
    "name": "distinctElements",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.ConcurrentHashMultiset",
      "name": "ConcurrentHashMultiset",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.ConcurrentHashMultiset",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "distinctElements()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toArray()",
    "name": "toArray",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.ConcurrentHashMultiset",
      "name": "ConcurrentHashMultiset",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.ConcurrentHashMultiset",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Object[]",
      "name": "java.lang.Object[]",
      "isArray": true
    },
    "parameters": [],
    "equivalence": {
      "member": "toArray()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "com.google.common.collect.ConcurrentHashMultiset(java.util.concurrent.ConcurrentMap<E, java.util.concurrent.atomic.AtomicInteger> countMap)",
    "name": "com.google.common.collect.ConcurrentHashMultiset",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.ConcurrentHashMultiset",
      "name": "ConcurrentHashMultiset",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.ConcurrentHashMultiset",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.concurrent.ConcurrentMap",
          "name": "ConcurrentMap",
          "isArray": false
        },
        "name": "countMap"
      }
    ],
    "equivalence": {
      "member": "com.google.common.collect.ConcurrentHashMultiset(java.util.concurrent.ConcurrentMap<E, java.util.concurrent.atomic.AtomicInteger> countMap)",
      "comment": "Creates an instance using countMap to store elements and their counts. This instance will assume ownership of countMap, and other code should not maintain references to the map or modify it in any way.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "entryIterator()",
    "name": "entryIterator",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.ConcurrentHashMultiset",
      "name": "ConcurrentHashMultiset",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.ConcurrentHashMultiset",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Iterator<com.google.common.collect.Multiset$Entry<E>>",
      "name": "java.util.Iterator<com.google.common.collect.Multiset$Entry<E>>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "entryIterator()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "create(com.google.common.collect.MapMaker mapMaker)",
    "name": "create",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.ConcurrentHashMultiset",
      "name": "ConcurrentHashMultiset",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.ConcurrentHashMultiset",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.ConcurrentHashMultiset<E>",
      "name": "com.google.common.collect.ConcurrentHashMultiset<E>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.collect.MapMaker",
          "name": "MapMaker",
          "isArray": false
        },
        "name": "mapMaker"
      }
    ],
    "equivalence": {
      "member": "create(com.google.common.collect.MapMaker mapMaker)",
      "comment": "Creates a new, empty ConcurrentHashMultiset using mapMaker to construct the internal backing map. If this MapMaker is configured to use entry eviction of any kind, this eviction applies to all occurrences of a given element as a single unit. However, most updates to the multiset do not count as map updates at all, since we're usually just mutating the value stored in the map, so MapMaker#expireAfterAccess makes sense (evict the entry that was queried or updated longest ago), but MapMaker#expireAfterWrite doesn't, because the eviction time is measured from when we saw the first occurrence of the object. The returned multiset is serializable but any serialization caveats given in MapMaker apply. Finally, soft/weak values can be used but are not very useful: the values are created internally and not exposed externally, so no one else will have a strong reference to the values. Weak keys on the other hand can be useful in some scenarios.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "add(E element, int occurrences)",
    "name": "add",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.ConcurrentHashMultiset",
      "name": "ConcurrentHashMultiset",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.ConcurrentHashMultiset",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "element"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "occurrences"
      }
    ],
    "equivalence": {
      "member": "add(E element, int occurrences)",
      "comment": "Adds a number of occurrences of the specified element to this multiset.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "create()",
    "name": "create",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.ConcurrentHashMultiset",
      "name": "ConcurrentHashMultiset",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.ConcurrentHashMultiset",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.ConcurrentHashMultiset<E>",
      "name": "com.google.common.collect.ConcurrentHashMultiset<E>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "create()",
      "comment": "Creates a new, empty ConcurrentHashMultiset using the default initial capacity, load factor, and concurrency settings.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "removeExactly(java.lang.Object element, int occurrences)",
    "name": "removeExactly",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.ConcurrentHashMultiset",
      "name": "ConcurrentHashMultiset",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.ConcurrentHashMultiset",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "element",
        "nullable": true
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "occurrences"
      }
    ],
    "equivalence": {
      "member": "removeExactly(java.lang.Object element, int occurrences)",
      "comment": "Removes exactly the specified number of occurrences of element, or makes no change if this is not possible. This method, in contrast to #remove(Object, int), has no effect when the element count is smaller than occurrences.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setCount(E element, int count)",
    "name": "setCount",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.ConcurrentHashMultiset",
      "name": "ConcurrentHashMultiset",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.ConcurrentHashMultiset",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "element"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "count"
      }
    ],
    "equivalence": {
      "member": "setCount(E element, int count)",
      "comment": "Adds or removes occurrences of element such that the #count of the element becomes count.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]