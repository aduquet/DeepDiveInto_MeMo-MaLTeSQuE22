,library,jsonFileName,signature,name,targetClass,equivalence.comment,equivalence.kind,equivalence.condition
0,sbes-guava,com.google.common.collect.LinkedHashMultimap_goal.json,"create(com.google.common.collect.Multimap<? extends K, ? extends V> multimap)",create,com.google.common.collect.LinkedHashMultimap,"Constructs a LinkedHashMultimap with the same mappings as the specified multimap. If a key-value mapping appears multiple times in the input multimap, it only appears once in the constructed multimap. The new multimap has the same Multimap#entries() iteration order as the input multimap, except for excluding duplicate mappings.",FreeText,methodResultID.equals(receiverObjectID.entries())
1,sbes-guava,com.google.common.collect.LinkedListMultimap_goal.json,"create(com.google.common.collect.Multimap<? extends K, ? extends V> multimap)",create,com.google.common.collect.LinkedListMultimap,Constructs a LinkedListMultimap with the same mappings as the specified Multimap. The new multimap has the same Multimap#entries() iteration order as the input multimap.,FreeText,methodResultID.equals(receiverObjectID.entries())
2,sbes-guava,com.google.common.collect.LinkedListMultimap_goal.json,entries(),entries,com.google.common.collect.LinkedListMultimap,"{@inheritDoc} The iterator generated by the returned collection traverses the entries in the order they were added to the multimap. Because the entries may have duplicates and follow the insertion ordering, this method returns a List, instead of the Collection specified in the ListMultimap interface. An entry's Entry#getKey method always returns the same key, regardless of what happens subsequently. As long as the corresponding key-value mapping is not removed from the multimap, Entry#getValue returns the value from the multimap, which may change over time, and Entry#setValue modifies that value. Removing the mapping from the multimap does not alter the value returned by getValue(), though a subsequent setValue() call won't update the multimap but will lead to a revised value being returned by getValue().",FreeText,methodResultID.equals(receiverObjectID.keys())
3,sbes-guava,com.google.common.collect.Multimap_goal.json,isEmpty(),isEmpty,com.google.common.collect.Multimap,"Returns true if this multimap contains no key-value pairs. Equivalent to size() == 0, but can in some cases be more efficient.",FreeText,methodResultID == (receiverObjectID.size() == 0)
4,sbes-guava,com.google.common.collect.Multimap_goal.json,"putAll(K key, java.lang.Iterable<? extends V> values)",putAll,com.google.common.collect.Multimap,"Stores a key-value pair in this multimap for each of values, all using the same key, key. methodResultID==[ for (V value : args[1]) { receiverObjectID.put(args[0], value);} ] to (but expected to be more efficient than): for (V value : values) { put(key, value); } <p>In particular, this is a no-op if values is empty.",FreeText,"methodResultID==[ for (V value : args[1]) { receiverObjectID.put(args[0], value);} ]"
5,sbes-guava,com.google.common.collect.Multimap_goal.json,"replaceValues(K key, java.lang.Iterable<? extends V> values)",replaceValues,com.google.common.collect.Multimap,"Stores a collection of values with the same key, replacing any existing values for that key. <p>If values is empty, this is equivalent to removeAll(key).",FreeText,if(!args[1].iterator().hasNext()) {methodResultID.equals(receiverObjectID.removeAll(args[0]))}
6,sbes-guava,com.google.common.collect.Multiset_goal.json,"add(E element, int occurrences)",add,com.google.common.collect.Multiset,"Adds a number of occurrences of an element to this multiset. Note that if occurrences == 1, this method has the identical effect to add(Object). This method is functionally equivalent (except in the case of overflow) to the call addAll(Collections.nCopies(element, occurrences)), which would presumably perform much more poorly.",FreeText,"if(args[1] == 1) {receiverObjectID.add(args[0]); receiverObjectClone.add(args[0],args[1]); assert(receiverObjectClone.equals(receiverObjectID));} && methodResultID==( receiverObjectID.addAll(java.util.Collections.nCopies( args[1],args[0])) )"
7,sbes-guava,com.google.common.collect.Multiset_goal.json,"remove(java.lang.Object element, int occurrences)",remove,com.google.common.collect.Multiset,"Removes a number of occurrences of the specified element from this multiset. If the multiset contains fewer than this number of occurrences to begin with, all occurrences will be removed. Note that if occurrences == 1, this is functionally equivalent to the call remove(element).",FreeText,"if(args[1] == 1) {receiverObjectID.remove(args[0]); receiverObjectClone.remove(args[0],args[1]); assert(receiverObjectClone.equals(receiverObjectID));}"
8,sbes-guava,com.google.common.collect.Sets_goal.json,complementOf(java.util.Collection<E> collection),complementOf,com.google.common.collect.Sets,"Creates an EnumSet consisting of all enum values that are not in the specified collection. If the collection is an EnumSet, this method has the same behavior as EnumSet#complementOf. Otherwise, the specified collection must contain at least one element, in order to determine the element type. If the collection could be empty, use #complementOf(Collection, Class) instead of this method.",FreeText,if(args[0] instanceof EnumSet) {methodResultID.equals(java.util.EnumSet.complementOf(args[0]))}
9,sbes-guava,com.google.common.collect.Sets_goal.json,"complementOf(java.util.Collection<E> collection, java.lang.Class<E> type)",complementOf,com.google.common.collect.Sets,"Creates an EnumSet consisting of all enum values that are not in the specified collection. This is equivalent to EnumSet#complementOf, but can act on any input collection, as long as the elements are of enum type.",FreeText,if(args[0] instanceof EnumSet) {methodResultID.equals(java.util.EnumSet.complementOf(args[0]))}
10,sbes-guava,com.google.common.collect.SortedMultiset_goal.json,"subMultiset(E lowerBound, com.google.common.collect.BoundType lowerBoundType, E upperBound, com.google.common.collect.BoundType upperBoundType)",subMultiset,com.google.common.collect.SortedMultiset,"Returns a view of this multiset restricted to the range between lowerBound and upperBound. The returned multiset is a view of this multiset, so changes to one will be reflected in the other. The returned multiset supports all operations that this multiset supports. <p>The returned multiset will throw an IllegalArgumentException on attempts to add elements outside its range. <p>This method is equivalent to tailMultiset(lowerBound, lowerBoundType).headMultiset(upperBound, upperBoundType).",FreeText,"methodResultID.equals(receiverObjectID.tailMultiset(args[0],args[1]).headMultiset(args[2],args[3]))"
