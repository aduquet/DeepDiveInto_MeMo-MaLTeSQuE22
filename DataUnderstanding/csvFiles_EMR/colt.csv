,library,jsonFileName,signature,name,targetClass,equivalence.comment,equivalence.kind,equivalence.condition
0,colt,cern.colt.matrix.DoubleMatrix2D_goal.json,"zMult(cern.colt.matrix.DoubleMatrix1D y, cern.colt.matrix.DoubleMatrix1D z)",zMult,cern.colt.matrix.DoubleMatrix2D,"Linear algebraic matrix-vector multiplication; z = A * y; Equivalent to return A.zMult(y,z,1,0);",FreeText,"methodResultID.equals(receiverObjectClone.zMult(args[0],args[1],1,0))"
1,colt,cern.colt.matrix.DoubleMatrix2D_goal.json,"zMult(cern.colt.matrix.DoubleMatrix2D B, cern.colt.matrix.DoubleMatrix2D C)",zMult,cern.colt.matrix.DoubleMatrix2D,"Linear algebraic matrix-matrix multiplication; C = A x B; Equivalent to A.zMult(B,C,1,0,false,false).",FreeText,"methodResultID.equals(receiverObjectClone.zMult(args[0],args[1],1,0,false,false))"
2,colt,cern.colt.matrix.linalg.Algebra_goal.json,"mult(cern.colt.matrix.DoubleMatrix1D x, cern.colt.matrix.DoubleMatrix1D y)",mult,cern.colt.matrix.linalg.Algebra,Inner product of two vectors; Sum(x[i] * y[i]). Also known as dot product. <br> Equivalent to x.zDotProduct(y).,FreeText,methodResultID==args[0].zDotProduct(args[1])
3,colt,cern.colt.matrix.linalg.Algebra_goal.json,norm2(cern.colt.matrix.DoubleMatrix1D x),norm2,cern.colt.matrix.linalg.Algebra,"Returns the two-norm (aka euclidean norm) of vector x; equivalent to mult(x,x).",FreeText,"methodResultID==(receiverObjectClone.mult(args[0],args[0]))"
4,colt,cern.colt.matrix.ObjectMatrix1D_goal.json,equals(java.lang.Object otherObj),equals,cern.colt.matrix.ObjectMatrix1D,"Compares the specified Object with the receiver for equality. Equivalent to equals(otherObj,true).",FreeText,"methodResultID==(receiverObjectClone.equals(args[0],true))"
5,colt,cern.colt.matrix.ObjectMatrix2D_goal.json,equals(java.lang.Object otherObj),equals,cern.colt.matrix.ObjectMatrix2D,"Compares the specified Object with the receiver for equality. Equivalent to equals(otherObj,true).",FreeText,"methodResultID==(receiverObjectClone.equals(args[0],true))"
6,colt,cern.colt.matrix.ObjectMatrix3D_goal.json,equals(java.lang.Object otherObj),equals,cern.colt.matrix.ObjectMatrix3D,"Compares the specified Object with the receiver for equality. Equivalent to equals(otherObj,true).",FreeText,"methodResultID==(receiverObjectClone.equals(args[0],true))"
7,colt,cern.colt.Partitioning_goal.json,"partition(cern.colt.list.DoubleArrayList list, int from, int to, cern.colt.list.DoubleArrayList splitters, cern.colt.list.IntArrayList splitIndexes)",partition,cern.colt.Partitioning,"Equivalent to partition(list.elements(), from, to, splitters.elements(), 0, splitters.size()-1, splitIndexes.elements()).",FreeText,"receiverObjectID.partition(args[0], args[1], args[2], args[3], args[4]); receiverObjectClone.partition(args[0].elements(), args[1], args[2], args[3].elements(), 0, args[3].size()-1, args[4].elements())"
8,colt,cern.colt.Partitioning_goal.json,"partition(cern.colt.list.IntArrayList list, int from, int to, cern.colt.list.IntArrayList splitters, cern.colt.list.IntArrayList splitIndexes)",partition,cern.colt.Partitioning,"Equivalent to partition(list.elements(), from, to, splitters.elements(), 0, splitters.size()-1, splitIndexes.elements()).",FreeText,"receiverObjectID.partition(args[0], args[1], args[2], args[3], args[4]); receiverObjectClone.partition(args[0].elements(), args[1], args[2], args[3].elements(), 0, args[3].size()-1, args[4].elements())"
9,colt,cern.colt.Timer_goal.json,elapsedTime(),elapsedTime,cern.colt.Timer,Same as seconds().,FreeText,methodResultID==(receiverObjectClone.seconds())
10,colt,cern.jet.stat.Probability_goal.json,"beta(double a, double b, double x)",beta,cern.jet.stat.Probability,"Returns the area from zero to x under the beta density function.  x - - | (a+b) | | a-1 b-1 P(x) = ---------- | t (1-t) dt - - | | | (a) | (b) - 0  This function is identical to the incomplete beta integral function Gamma.incompleteBeta(a, b, x). The complemented function is 1 - P(1-x) = Gamma.incompleteBeta( b, a, x );",FreeText,"methodResultID==Gamma.incompleteBeta(args[0], args[1], args[2])"
11,colt,hep.aida.IHistogram2D_goal.json,binEntriesX(int indexX),binEntriesX,hep.aida.IHistogram2D,Equivalent to projectionX().binEntries(indexX).,FreeText,methodResultID==(receiverObjectClone.projectionX().binEntries(args[0]))
12,colt,hep.aida.IHistogram2D_goal.json,binEntriesY(int indexY),binEntriesY,hep.aida.IHistogram2D,Equivalent to projectionY().binEntries(indexY).,FreeText,methodResultID==(receiverObjectClone.projectionY().binEntries(args[0]))
13,colt,hep.aida.IHistogram2D_goal.json,binHeightX(int indexX),binHeightX,hep.aida.IHistogram2D,Equivalent to projectionX().binHeight(indexX).,FreeText,methodResultID==(receiverObjectClone.projectionX().binHeight(args[0]))
14,colt,hep.aida.IHistogram2D_goal.json,binHeightY(int indexY),binHeightY,hep.aida.IHistogram2D,Equivalent to projectionY().binHeight(indexY).,FreeText,methodResultID==(receiverObjectClone.projectionY().binHeight(args[0]))
15,colt,hep.aida.IHistogram2D_goal.json,sliceX(int indexY),sliceX,hep.aida.IHistogram2D,"Slice parallel to the Y axis at bin indexY and one bin wide. Equivalent to sliceX(indexY,indexY).",FreeText,"methodResultID.equals(receiverObjectClone.sliceX(args[0],args[0]))"
16,colt,hep.aida.IHistogram2D_goal.json,sliceY(int indexX),sliceY,hep.aida.IHistogram2D,"Slice parallel to the X axis at bin indexX and one bin wide. Equivalent to sliceY(indexX,indexX).",FreeText,"methodResultID.equals(receiverObjectClone.sliceY(args[0],args[0]))"
17,colt,hep.aida.IHistogram3D_goal.json,"fill(double x, double y, double z)",fill,hep.aida.IHistogram3D,"Fill the histogram with weight 1; equivalent to fill(x,y,z,1)..",FreeText,"receiverObjectClone.fill(args[0],args[1],args[2],1);
receiverObjectClone.equals(receiverObjectID)"
18,colt,hep.aida.IHistogram3D_goal.json,sliceXY(int indexZ),sliceXY,hep.aida.IHistogram3D,"Create a slice parallel to the XY plane at bin indexZ and one bin wide. Equivalent to sliceXY(indexZ,indexZ).",FreeText,"methodResultID.equals(receiverObjectClone.sliceXY(args[0],args[0]))"
19,colt,hep.aida.IHistogram3D_goal.json,sliceXZ(int indexY),sliceXZ,hep.aida.IHistogram3D,"Create a slice parallel to the XZ plane at bin indexY and one bin wide. Equivalent to sliceXZ(indexY,indexY).",FreeText,"methodResultID.equals(receiverObjectClone.sliceXZ(args[0],args[0]))"
20,colt,hep.aida.IHistogram3D_goal.json,sliceYZ(int indexX),sliceYZ,hep.aida.IHistogram3D,"Create a slice parallel to the YZ plane at bin indexX and one bin wide. Equivalent to sliceYZ(indexX,indexX).",FreeText,"methodResultID.equals(receiverObjectClone.sliceYZ(args[0],args[0]))"
