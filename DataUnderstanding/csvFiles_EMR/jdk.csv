,library,jsonFileName,signature,name,targetClass,equivalence.comment,equivalence.kind,equivalence.condition
0,jdk,java.awt.geom.AffineTransform_goal.json,"getRotateInstance(double vecx, double vecy, double anchorx, double anchory)",getRotateInstance,java.awt.geom.AffineTransform,"Returns a transform that rotates coordinates around an anchor point according to a rotation vector. All coordinates rotate about the specified anchor coordinates by the same amount. The amount of rotation is such that coordinates along the former positive X axis will subsequently align with the vector pointing from the origin to the specified vector coordinates. If both vecx and vecy are 0.0, an identity transform is returned. This operation is equivalent to calling:  AffineTransform.getRotateInstance(Math.atan2(vecy, vecx), anchorx, anchory);",FreeText,"methodResultID.equals(java.awt.geom.AffineTransform.getRotateInstance(args[0],args[0]))"
1,jdk,java.awt.geom.AffineTransform_goal.json,"rotate(double vecx, double vecy, double anchorx, double anchory)",rotate,java.awt.geom.AffineTransform,"Concatenates this transform with a transform that rotates coordinates around an anchor point according to a rotation vector. All coordinates rotate about the specified anchor coordinates by the same amount. The amount of rotation is such that coordinates along the former positive X axis will subsequently align with the vector pointing from the origin to the specified vector coordinates. If both vecx and vecy are 0.0, the transform is not modified in any way. This method is equivalent to calling:  rotate(Math.atan2(vecy, vecx), anchorx, anchory);",FreeText,"receiverObjectClone.rotate(args[0],args[0]);
receiverObjectClone.equals(receiverObjectID)"
2,jdk,java.awt.geom.AffineTransform_goal.json,"setToRotation(double vecx, double vecy, double anchorx, double anchory)",setToRotation,java.awt.geom.AffineTransform,"Sets this transform to a rotation transformation that rotates coordinates around an anchor point according to a rotation vector. All coordinates rotate about the specified anchor coordinates by the same amount. The amount of rotation is such that coordinates along the former positive X axis will subsequently align with the vector pointing from the origin to the specified vector coordinates. If both vecx and vecy are 0.0, the transform is set to an identity transform. This operation is equivalent to calling:  setToTranslation(Math.atan2(vecy, vecx), anchorx, anchory);",FreeText,"receiverObjectClone.setToTranslation(args[0],args[0]);
receiverObjectClone.equals(receiverObjectID)"
3,jdk,java.awt.Graphics2D_goal.json,"rotate(double theta, double x, double y)",rotate,java.awt.Graphics2D,"Concatenates the current Graphics2D Transform with a translated rotation transform. Subsequent rendering is transformed by a transform which is constructed by translating to the specified location, rotating by the specified radians, and translating back by the same amount as the original translation. This is equivalent to the following sequence of calls:  translate(x, y); rotate(theta); translate(-x, -y);  Rotating with a positive angle theta rotates points on the positive x axis toward the positive y axis.",FreeText,"receiverObjectClone.translate(args[1],args[2]);
receiverObjectClone.equals(receiverObjectID)"
4,jdk,java.awt.image.VolatileImage_goal.json,getSource(),getSource,java.awt.image.VolatileImage,"This returns an ImageProducer for this VolatileImage. Note that the VolatileImage object is optimized for rendering operations and blitting to the screen or other VolatileImage objects, as opposed to reading back the pixels of the image. Therefore, operations such as getSource may not perform as fast as operations that do not rely on reading the pixels. Note also that the pixel values read from the image are current with those in the image only at the time that they are retrieved. This method takes a snapshot of the image at the time the request is made and the ImageProducer object returned works with that static snapshot image, not the original VolatileImage. Calling getSource() is equivalent to calling getSnapshot().getSource().",FreeText,methodResultID.equals(receiverObjectClone.getSnapshot().getSource())
5,jdk,java.io.DataInputStream_goal.json,read(byte[] b),read,java.io.DataInputStream,"Reads some number of bytes from the contained input stream and stores them into the buffer array b. The number of bytes actually read is returned as an integer. This method blocks until input data is available, end of file is detected, or an exception is thrown. If b is null, a NullPointerException is thrown. If the length of b is zero, then no bytes are read and 0 is returned; otherwise, there is an attempt to read at least one byte. If no byte is available because the stream is at end of file, the value -1 is returned; otherwise, at least one byte is read and stored into b. The first byte read is stored into element b[0], the next one into b[1], and so on. The number of bytes read is, at most, equal to the length of b. Let k be the number of bytes actually read; these bytes will be stored in elements b[0] through b[k-1], leaving elements b[k] through b[b.length-1] unaffected. The read(b) method has the same effect as: <pre> read(b, 0, b.length) </pre>",FreeText,"methodResultID == read(args[0], 0, args[0].length)"
6,jdk,java.io.File_goal.json,list(java.io.FilenameFilter filter),list,java.io.File,"Returns an array of strings naming the files and directories in the directory denoted by this abstract pathname that satisfy the specified filter. The behavior of this method is the same as that of the #list() method, except that the strings in the returned array must satisfy the filter. If the given filter is null then all names are accepted. Otherwise, a name satisfies the filter if and only if the value true results when the FilenameFilter#accept FilenameFilter.accept(File,&nbsp;String) method of the filter is invoked on this abstract pathname and the name of a file or directory in the directory that it denotes.",FreeText,"java.util.Arrays.equals(methodResultID, receiverObjectClone.list())"
7,jdk,java.io.File_goal.json,listFiles(java.io.FilenameFilter filter),listFiles,java.io.File,"Returns an array of abstract pathnames denoting the files and directories in the directory denoted by this abstract pathname that satisfy the specified filter. The behavior of this method is the same as that of the #listFiles() method, except that the pathnames in the returned array must satisfy the filter. If the given filter is null then all pathnames are accepted. Otherwise, a pathname satisfies the filter if and only if the value true results when the FilenameFilter#accept FilenameFilter.accept(File,&nbsp;String) method of the filter is invoked on this abstract pathname and the name of a file or directory in the directory that it denotes.",FreeText,"java.util.Arrays.equals(methodResultID, receiverObjectClone.listFiles())"
8,jdk,java.io.File_goal.json,listFiles(java.io.FileFilter filter),listFiles,java.io.File,"Returns an array of abstract pathnames denoting the files and directories in the directory denoted by this abstract pathname that satisfy the specified filter. The behavior of this method is the same as that of the #listFiles() method, except that the pathnames in the returned array must satisfy the filter. If the given filter is null then all pathnames are accepted. Otherwise, a pathname satisfies the filter if and only if the value true results when the FileFilter#accept FileFilter.accept(File) method of the filter is invoked on the pathname.",FreeText,"java.util.Arrays.equals(methodResultID, receiverObjectClone.listFiles())"
9,jdk,java.io.InputStream_goal.json,read(byte[] b),read,java.io.InputStream,"Reads some number of bytes from the input stream and stores them into the buffer array b. The number of bytes actually read is returned as an integer. This method blocks until input data is available, end of file is detected, or an exception is thrown.  If the length of b is zero, then no bytes are read and 0 is returned; otherwise, there is an attempt to read at least one byte. If no byte is available because the stream is at the end of the file, the value -1 is returned; otherwise, at least one byte is read and stored into b.  The first byte read is stored into element b[0], the next one into b[1], and so on. The number of bytes read is, at most, equal to the length of b. Let k be the number of bytes actually read; these bytes will be stored in elements b[0] through b[k-1], leaving elements b[k] through b[b.length-1] unaffected.  The read(b) method for class InputStream has the same effect as:  read(b, 0, b.length)",FreeText,"methodResultID == read(args[0], 0, args[0].length)"
10,jdk,java.lang.Math_goal.json,"floorMod(int x, int y)",floorMod,java.lang.Math,"Returns the floor modulus of the int arguments.  The floor modulus is x - (floorDiv(x, y) * y), has the same sign as the divisor y, and is in the range of -abs(y) < r < +abs(y).  The relationship between floorDiv and floorMod is such that:  <li>floorDiv(x, y) * y + floorMod(x, y) == x   The difference in values between floorMod and the % operator is due to the difference between floorDiv that returns the integer less than or equal to the quotient and the / operator that returns the integer closest to zero.  Examples:  <li>If the signs of the arguments are the same, the results of floorMod and the % operator are the same. <br> <ul> <li>floorMod(4, 3) == 1; &nbsp; and (4 % 3) == 1</li>  If the signs of the arguments are different, the results differ from the % operator.<br> <ul> <li>floorMod(+4, -3) == -2; &nbsp; and (+4 % -3) == +1  floorMod(-4, +3) == +2; &nbsp; and (-4 % +3) == -1  floorMod(-4, -3) == -1; &nbsp; and (-4 % -3) == -1   </ul> </li> </ul>  If the signs of arguments are unknown and a positive modulus is needed it can be computed as (floorMod(x, y) + abs(y)) % abs(y).",FreeText,"methodResultID==( args[0] - java.lang.Math.floorDiv(args[0], args[1]) * args[1] )"
11,jdk,java.lang.Math_goal.json,"floorMod(long x, long y)",floorMod,java.lang.Math,"Returns the floor modulus of the long arguments.  The floor modulus is x - (floorDiv(x, y) * y), has the same sign as the divisor y, and is in the range of -abs(y) < r < +abs(y).  The relationship between floorDiv and floorMod is such that:  <li>floorDiv(x, y) * y + floorMod(x, y) == x   For examples, see #floorMod(int, int).",FreeText,"methodResultID==( args[0] - java.lang.Math.floorDiv(args[0], args[1]) * args[1] )"
12,jdk,java.lang.Math_goal.json,abs(float a),abs,java.lang.Math,"Returns the absolute value of a float value. If the argument is not negative, the argument is returned. If the argument is negative, the negation of the argument is returned. Special cases: <li>If the argument is positive zero or negative zero, the result is positive zero. <li>If the argument is infinite, the result is positive infinity. <li>If the argument is NaN, the result is NaN. In other words, the result is the same as the value of the expression: Float.intBitsToFloat(0x7fffffff & Float.floatToIntBits(a))",FreeText,methodResultID==( Float.intBitsToFloat(0x7fffffff & Float.floatToIntBits(args[0])) )
13,jdk,java.lang.Math_goal.json,nextUp(double d),nextUp,java.lang.Math,"Returns the floating-point value adjacent to d in the direction of positive infinity. This method is semantically equivalent to nextAfter(d, Double.POSITIVE_INFINITY); however, a nextUp implementation may run faster than its equivalent nextAfter call. Special Cases:  <li> If the argument is NaN, the result is NaN. <li> If the argument is positive infinity, the result is positive infinity. <li> If the argument is zero, the result is Double#MIN_VALUE",FreeText,"methodResultID==( java.lang.Math.nextAfter(args[0], Double.POSITIVE_INFINITY) )"
14,jdk,java.lang.Math_goal.json,nextUp(float f),nextUp,java.lang.Math,"Returns the floating-point value adjacent to f in the direction of positive infinity. This method is semantically equivalent to nextAfter(f, Float.POSITIVE_INFINITY); however, a nextUp implementation may run faster than its equivalent nextAfter call. Special Cases:  <li> If the argument is NaN, the result is NaN. <li> If the argument is positive infinity, the result is positive infinity. <li> If the argument is zero, the result is Float#MIN_VALUE",FreeText,"methodResultID==( java.lang.Math.nextAfter(args[0], Float.POSITIVE_INFINITY) )"
15,jdk,java.lang.Math_goal.json,nextDown(double d),nextDown,java.lang.Math,"Returns the floating-point value adjacent to d in the direction of negative infinity. This method is semantically equivalent to nextAfter(d, Double.NEGATIVE_INFINITY); however, a nextDown implementation may run faster than its equivalent nextAfter call. Special Cases:  <li> If the argument is NaN, the result is NaN. <li> If the argument is negative infinity, the result is negative infinity. <li> If the argument is zero, the result is -Double.MIN_VALUE",FreeText,"methodResultID==( java.lang.Math.nextAfter(args[0], Double.NEGATIVE_INFINITY) )"
16,jdk,java.lang.Math_goal.json,nextDown(float f),nextDown,java.lang.Math,"Returns the floating-point value adjacent to f in the direction of negative infinity. This method is semantically equivalent to nextAfter(f, Float.NEGATIVE_INFINITY); however, a nextDown implementation may run faster than its equivalent nextAfter call. Special Cases:  <li> If the argument is NaN, the result is NaN. <li> If the argument is negative infinity, the result is negative infinity. <li> If the argument is zero, the result is -Float.MIN_VALUE",FreeText,"methodResultID==( java.lang.Math.nextAfter(args[0], Float.NEGATIVE_INFINITY) )"
17,jdk,java.lang.String_goal.json,toLowerCase(),toLowerCase,java.lang.String,"Converts all of the characters in this String to lower case using the rules of the default locale. This is equivalent to calling toLowerCase(Locale.getDefault()).  Note: This method is locale sensitive, and may produce unexpected results if used for strings that are intended to be interpreted locale independently. Examples are programming language identifiers, protocol keys, and HTML tags. For instance, ""TITLE"".toLowerCase() in a Turkish locale returns ""t\u005Cu0131tle"", where '\u005Cu0131' is the LATIN SMALL LETTER DOTLESS I character. To obtain correct results for locale insensitive strings, use toLowerCase(Locale.ROOT).",FreeText,methodResultID.equals[receiverObjectClone.toLowerCase(java.util.Locale.getDefault());]
18,jdk,java.lang.String_goal.json,toUpperCase(),toUpperCase,java.lang.String,"Converts all of the characters in this String to upper case using the rules of the default locale. This method is equivalent to toUpperCase(Locale.getDefault()).  Note: This method is locale sensitive, and may produce unexpected results if used for strings that are intended to be interpreted locale independently. Examples are programming language identifiers, protocol keys, and HTML tags. For instance, ""title"".toUpperCase() in a Turkish locale returns ""T\u005Cu0130TLE"", where '\u005Cu0130' is the LATIN CAPITAL LETTER I WITH DOT ABOVE character. To obtain correct results for locale insensitive strings, use toUpperCase(Locale.ROOT).",FreeText,methodResultID.equals[receiverObjectClone.toUpperCase(java.util.Locale.getDefault());]
19,jdk,java.lang.String_goal.json,"copyValueOf(char[] data, int offset, int count)",copyValueOf,java.lang.String,"Equivalent to #valueOf(char[], int, int).",FreeText,"methodResultID.equals(java.lang.String.valueOf(args[0],args[1],args[1]))"
20,jdk,java.lang.String_goal.json,copyValueOf(char[] data),copyValueOf,java.lang.String,Equivalent to #valueOf(char[]).,FreeText,methodResultID.equals(java.lang.String.valueOf(args[0]))
21,jdk,java.lang.System_goal.json,identityHashCode(java.lang.Object x),identityHashCode,java.lang.System,"Returns the same hash code for the given object as would be returned by the default method hashCode(), whether or not the given object's class overrides hashCode(). The hash code for the null reference is zero.",FreeText,methodResultID==(receiverObjectClone.hashCode())
22,jdk,java.time.chrono.IsoChronology_goal.json,"date(int prolepticYear, int month, int dayOfMonth)",date,java.time.chrono.IsoChronology,"Obtains an ISO local date from the proleptic-year, month-of-year and day-of-month fields.  This is equivalent to LocalDate#of(int, int, int).",FreeText,"methodResultID.equals(java.time.LocalDate.of(args[0],args[0],args[0]))"
23,jdk,java.time.chrono.IsoChronology_goal.json,"dateYearDay(int prolepticYear, int dayOfYear)",dateYearDay,java.time.chrono.IsoChronology,"Obtains an ISO local date from the proleptic-year and day-of-year fields.  This is equivalent to LocalDate#ofYearDay(int, int).",FreeText,"methodResultID.equals(java.time.LocalDate.ofYearDay(args[0],args[0]))"
24,jdk,java.time.chrono.IsoChronology_goal.json,dateEpochDay(long epochDay),dateEpochDay,java.time.chrono.IsoChronology,Obtains an ISO local date from the epoch-day.  This is equivalent to LocalDate#ofEpochDay(long).,FreeText,methodResultID.equals(java.time.LocalDate.ofEpochDay(args[0]))
25,jdk,java.time.chrono.IsoChronology_goal.json,date(java.time.temporal.TemporalAccessor temporal),date,java.time.chrono.IsoChronology,Obtains an ISO local date from another date-time object.  This is equivalent to LocalDate#from(TemporalAccessor).,FreeText,methodResultID.equals(java.time.LocalDate.from(args[0]))
26,jdk,java.time.chrono.IsoChronology_goal.json,localDateTime(java.time.temporal.TemporalAccessor temporal),localDateTime,java.time.chrono.IsoChronology,Obtains an ISO local date-time from another date-time object.  This is equivalent to LocalDateTime#from(TemporalAccessor).,FreeText,methodResultID.equals(java.time.LocalDateTime.from(args[0]))
27,jdk,java.time.chrono.IsoChronology_goal.json,zonedDateTime(java.time.temporal.TemporalAccessor temporal),zonedDateTime,java.time.chrono.IsoChronology,Obtains an ISO zoned date-time from another date-time object.  This is equivalent to ZonedDateTime#from(TemporalAccessor).,FreeText,methodResultID.equals(java.time.ZonedDateTime.from(args[0]))
28,jdk,java.time.chrono.IsoChronology_goal.json,"zonedDateTime(java.time.Instant instant, java.time.ZoneId zone)",zonedDateTime,java.time.chrono.IsoChronology,"Obtains an ISO zoned date-time in this chronology from an Instant.  This is equivalent to ZonedDateTime#ofInstant(Instant, ZoneId).",FreeText,"methodResultID.equals(java.time.ZonedDateTime.ofInstant(args[0],args[1]))"
29,jdk,java.time.Clock_goal.json,systemDefaultZone(),systemDefaultZone,java.time.Clock,"Obtains a clock that returns the current instant using the best available system clock, converting to date and time using the default time-zone.  This clock is based on the best available system clock. This may use System#currentTimeMillis(), or a higher resolution clock if one is available.  Using this method hard codes a dependency to the default time-zone into your application. It is recommended to avoid this and use a specific time-zone whenever possible. The #systemUTC() UTC clock should be used when you need the current instant without the date or time.  The returned implementation is immutable, thread-safe and Serializable. It is equivalent to system(ZoneId.systemDefault()).",FreeText,methodResultID.equals( java.time.Clock.system(java.time.ZoneId.systemDefault()) )
30,jdk,java.time.Clock_goal.json,tickSeconds(java.time.ZoneId zone),tickSeconds,java.time.Clock,"Obtains a clock that returns the current instant ticking in whole seconds using best available system clock.  This clock will always have the nano-of-second field set to zero. This ensures that the visible time ticks in whole seconds. The underlying clock is the best available system clock, equivalent to using #system(ZoneId).  Implementations may use a caching strategy for performance reasons. As such, it is possible that the start of the second observed via this clock will be later than that observed directly via the underlying clock.  The returned implementation is immutable, thread-safe and Serializable. It is equivalent to tick(system(zone), Duration.ofSeconds(1)).",FreeText,methodResultID.equals(java.time.Clock.system(args[0]))
31,jdk,java.time.Clock_goal.json,tickMinutes(java.time.ZoneId zone),tickMinutes,java.time.Clock,"Obtains a clock that returns the current instant ticking in whole minutes using best available system clock.  This clock will always have the nano-of-second and second-of-minute fields set to zero. This ensures that the visible time ticks in whole minutes. The underlying clock is the best available system clock, equivalent to using #system(ZoneId).  Implementations may use a caching strategy for performance reasons. As such, it is possible that the start of the minute observed via this clock will be later than that observed directly via the underlying clock.  The returned implementation is immutable, thread-safe and Serializable. It is equivalent to tick(system(zone), Duration.ofMinutes(1)).",FreeText,methodResultID.equals(java.time.Clock.system(args[0]))
32,jdk,java.time.format.DateTimeFormatterBuilder_goal.json,appendOffsetId(),appendOffsetId,java.time.format.DateTimeFormatterBuilder,"Appends the zone offset, such as '+01:00', to the formatter.  This appends an instruction to format/parse the offset ID to the builder. This is equivalent to calling appendOffset(""HH:MM:ss"", ""Z"").",FreeText,"methodResultID.equals(receiverObjectID.appendOffset(""HH:MM:ss"", ""Z""))"
33,jdk,java.time.Instant_goal.json,"minus(long amountToSubtract, java.time.temporal.TemporalUnit unit)",minus,java.time.Instant,"Returns a copy of this instant with the specified amount subtracted.  This returns a Instant, based on this one, with the amount in terms of the unit subtracted. If it is not possible to subtract the amount, because the unit is not supported or for some other reason, an exception is thrown.  This method is equivalent to #plus(long, TemporalUnit) with the amount negated. See that method for a full description of how addition, and thus subtraction, works.  This instance is immutable and unaffected by this method call.",FreeText,"methodResultID.equals(receiverObjectClone.plus(args[0],args[1]))"
34,jdk,java.time.LocalTime_goal.json,"minus(long amountToSubtract, java.time.temporal.TemporalUnit unit)",minus,java.time.LocalTime,"Returns a copy of this time with the specified amount subtracted.  This returns a LocalTime, based on this one, with the amount in terms of the unit subtracted. If it is not possible to subtract the amount, because the unit is not supported or for some other reason, an exception is thrown.  This method is equivalent to #plus(long, TemporalUnit) with the amount negated. See that method for a full description of how addition, and thus subtraction, works.  This instance is immutable and unaffected by this method call.",FreeText,"methodResultID.equals(receiverObjectClone.plus(args[0],args[1]))"
35,jdk,java.time.OffsetDateTime_goal.json,"minus(long amountToSubtract, java.time.temporal.TemporalUnit unit)",minus,java.time.OffsetDateTime,"Returns a copy of this date-time with the specified amount subtracted.  This returns an OffsetDateTime, based on this one, with the amount in terms of the unit subtracted. If it is not possible to subtract the amount, because the unit is not supported or for some other reason, an exception is thrown.  This method is equivalent to #plus(long, TemporalUnit) with the amount negated. See that method for a full description of how addition, and thus subtraction, works.  This instance is immutable and unaffected by this method call.",FreeText,"methodResultID.equals(receiverObjectClone.plus(args[0],args[1]))"
36,jdk,java.time.YearMonth_goal.json,"minus(long amountToSubtract, java.time.temporal.TemporalUnit unit)",minus,java.time.YearMonth,"Returns a copy of this year-month with the specified amount subtracted.  This returns a YearMonth, based on this one, with the amount in terms of the unit subtracted. If it is not possible to subtract the amount, because the unit is not supported or for some other reason, an exception is thrown.  This method is equivalent to #plus(long, TemporalUnit) with the amount negated. See that method for a full description of how addition, and thus subtraction, works.  This instance is immutable and unaffected by this method call.",FreeText,"methodResultID.equals(receiverObjectClone.plus(args[0],args[1]))"
37,jdk,java.time.Year_goal.json,"minus(long amountToSubtract, java.time.temporal.TemporalUnit unit)",minus,java.time.Year,"Returns a copy of this year with the specified amount subtracted.  This returns a Year, based on this one, with the amount in terms of the unit subtracted. If it is not possible to subtract the amount, because the unit is not supported or for some other reason, an exception is thrown.  This method is equivalent to #plus(long, TemporalUnit) with the amount negated. See that method for a full description of how addition, and thus subtraction, works.  This instance is immutable and unaffected by this method call.",FreeText,"methodResultID.equals(receiverObjectClone.plus(args[0],args[1]))"
38,jdk,java.util.AbstractList_goal.json,add(E e),add,java.util.AbstractList,"Appends the specified element to the end of this list (optional operation). Lists that support this operation may place limitations on what elements may be added to this list. In particular, some lists will refuse to add null elements, and others will impose restrictions on the type of elements that may be added. List classes should clearly specify in their documentation any restrictions on what elements may be added. This implementation calls add(size(), e). Note that this implementation throws an UnsupportedOperationException unless add(int, E) is overridden.",FreeText,"methodResultID==receiverObjectID.add(receiverObjectID.size(), args[0])"
39,jdk,java.util.ArrayDeque_goal.json,addLast(E e),addLast,java.util.ArrayDeque,Inserts the specified element at the end of this deque. This method is equivalent to #add.,FreeText,"receiverObjectClone.add(args[0]);
receiverObjectClone.equals(receiverObjectID)"
40,jdk,java.util.ArrayDeque_goal.json,add(E e),add,java.util.ArrayDeque,Inserts the specified element at the end of this deque. This method is equivalent to #addLast.,FreeText,receiverObjectClone.addLast(args[0]);receiverObjectClone.equals(receiverObjectID)
41,jdk,java.util.ArrayDeque_goal.json,offer(E e),offer,java.util.ArrayDeque,Inserts the specified element at the end of this deque. This method is equivalent to #offerLast.,FreeText,methodResultID==(receiverObjectClone.offerLast(args[0]))
42,jdk,java.util.ArrayDeque_goal.json,remove(),remove,java.util.ArrayDeque,Retrieves and removes the head of the queue represented by this deque. This method differs from #poll poll only in that it throws an exception if this deque is empty. This method is equivalent to #removeFirst.,FreeText,methodResultID.equals(receiverObjectClone.removeFirst())
43,jdk,java.util.ArrayDeque_goal.json,poll(),poll,java.util.ArrayDeque,"Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty. This method is equivalent to #pollFirst.",FreeText,methodResultID.equals(receiverObjectClone.pollFirst())
44,jdk,java.util.ArrayDeque_goal.json,peek(),peek,java.util.ArrayDeque,"Retrieves, but does not remove, the head of the queue represented by this deque, or returns null if this deque is empty. This method is equivalent to #peekFirst.",FreeText,methodResultID.equals(receiverObjectClone.peekFirst())
45,jdk,java.util.ArrayDeque_goal.json,push(E e),push,java.util.ArrayDeque,"Pushes an element onto the stack represented by this deque. In other words, inserts the element at the front of this deque. This method is equivalent to #addFirst.",FreeText,"receiverObjectClone.addFirst(args[0]);
receiverObjectClone.equals(receiverObjectID)"
46,jdk,java.util.ArrayDeque_goal.json,pop(),pop,java.util.ArrayDeque,"Pops an element from the stack represented by this deque. In other words, removes and returns the first element of this deque. This method is equivalent to #removeFirst().",FreeText,methodResultID.equals(receiverObjectClone.removeFirst())
47,jdk,java.util.ArrayDeque_goal.json,remove(java.lang.Object o),remove,java.util.ArrayDeque,"Removes a single instance of the specified element from this deque. If the deque does not contain the element, it is unchanged. More formally, removes the first element e such that o.equals(e) (if such an element exists). Returns true if this deque contained the specified element (or equivalently, if this deque changed as a result of the call). This method is equivalent to #removeFirstOccurrence(Object).",FreeText,methodResultID==(receiverObjectClone.removeFirstOccurrence(args[0]))
48,jdk,java.util.concurrent.LinkedBlockingDeque_goal.json,add(E e),add,java.util.concurrent.LinkedBlockingDeque,"Inserts the specified element at the end of this deque unless it would violate capacity restrictions. When using a capacity-restricted deque, it is generally preferable to use method #offer(Object) offer. This method is equivalent to #addLast.",FreeText,receiverObjectClone.addLast(args[0]);receiverObjectClone.equals(receiverObjectID)
49,jdk,java.util.concurrent.LinkedBlockingDeque_goal.json,remove(),remove,java.util.concurrent.LinkedBlockingDeque,Retrieves and removes the head of the queue represented by this deque. This method differs from #poll poll only in that it throws an exception if this deque is empty. This method is equivalent to #removeFirst() removeFirst.,FreeText,methodResultID.equals(receiverObjectClone.removeFirst())
50,jdk,java.util.concurrent.LinkedBlockingDeque_goal.json,element(),element,java.util.concurrent.LinkedBlockingDeque,"Retrieves, but does not remove, the head of the queue represented by this deque. This method differs from #peek peek only in that it throws an exception if this deque is empty. This method is equivalent to #getFirst() getFirst.",FreeText,methodResultID.equals(receiverObjectClone.getFirst())
51,jdk,java.util.concurrent.LinkedBlockingDeque_goal.json,remove(java.lang.Object o),remove,java.util.concurrent.LinkedBlockingDeque,"Removes the first occurrence of the specified element from this deque. If the deque does not contain the element, it is unchanged. More formally, removes the first element e such that o.equals(e) (if such an element exists). Returns true if this deque contained the specified element (or equivalently, if this deque changed as a result of the call). This method is equivalent to #removeFirstOccurrence(Object) removeFirstOccurrence.",FreeText,methodResultID==(receiverObjectClone.removeFirstOccurrence(args[0]))
52,jdk,java.util.Deque_goal.json,addLast(E e),addLast,java.util.Deque,"Inserts the specified element at the end of this deque if it is possible to do so immediately without violating capacity restrictions, throwing an IllegalStateException if no space is currently available. When using a capacity-restricted deque, it is generally preferable to use method #offerLast. This method is equivalent to #add.",FreeText,"receiverObjectClone.add(args[0]);
receiverObjectClone.equals(receiverObjectID)"
53,jdk,java.util.Deque_goal.json,add(E e),add,java.util.Deque,"Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque) if it is possible to do so immediately without violating capacity restrictions, returning true upon success and throwing an IllegalStateException if no space is currently available. When using a capacity-restricted deque, it is generally preferable to use #offer(Object) offer. This method is equivalent to #addLast.",FreeText,receiverObjectClone.addLast(args[0]);receiverObjectClone.equals(receiverObjectID)
54,jdk,java.util.Deque_goal.json,offer(E e),offer,java.util.Deque,"Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque) if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available. When using a capacity-restricted deque, this method is generally preferable to the #add method, which can fail to insert an element only by throwing an exception. This method is equivalent to #offerLast.",FreeText,methodResultID==(receiverObjectClone.offerLast(args[0]))
55,jdk,java.util.Deque_goal.json,remove(),remove,java.util.Deque,"Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque). This method differs from #poll poll only in that it throws an exception if this deque is empty. This method is equivalent to #removeFirst().",FreeText,methodResultID.equals(receiverObjectClone.removeFirst())
56,jdk,java.util.Deque_goal.json,poll(),poll,java.util.Deque,"Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty. This method is equivalent to #pollFirst().",FreeText,methodResultID.equals(receiverObjectClone.pollFirst())
57,jdk,java.util.Deque_goal.json,element(),element,java.util.Deque,"Retrieves, but does not remove, the head of the queue represented by this deque (in other words, the first element of this deque). This method differs from #peek peek only in that it throws an exception if this deque is empty. This method is equivalent to #getFirst().",FreeText,methodResultID.equals(receiverObjectClone.getFirst())
58,jdk,java.util.Deque_goal.json,peek(),peek,java.util.Deque,"Retrieves, but does not remove, the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty. This method is equivalent to #peekFirst().",FreeText,methodResultID.equals(receiverObjectClone.peekFirst())
59,jdk,java.util.Deque_goal.json,push(E e),push,java.util.Deque,"Pushes an element onto the stack represented by this deque (in other words, at the head of this deque) if it is possible to do so immediately without violating capacity restrictions, throwing an IllegalStateException if no space is currently available. This method is equivalent to #addFirst.",FreeText,"receiverObjectClone.addFirst(args[0]);
receiverObjectClone.equals(receiverObjectID)"
60,jdk,java.util.Deque_goal.json,pop(),pop,java.util.Deque,"Pops an element from the stack represented by this deque. In other words, removes and returns the first element of this deque. This method is equivalent to #removeFirst().",FreeText,methodResultID.equals(receiverObjectClone.removeFirst())
61,jdk,java.util.Deque_goal.json,remove(java.lang.Object o),remove,java.util.Deque,"Removes the first occurrence of the specified element from this deque. If the deque does not contain the element, it is unchanged. More formally, removes the first element e such that (o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e)) (if such an element exists). Returns true if this deque contained the specified element (or equivalently, if this deque changed as a result of the call). This method is equivalent to #removeFirstOccurrence(Object).",FreeText,methodResultID==(receiverObjectClone.removeFirstOccurrence(args[0]))
62,jdk,java.util.List_goal.json,toArray(T[] a),toArray,java.util.List,"Returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array. If the list fits in the specified array, it is returned therein. Otherwise, a new array is allocated with the runtime type of the specified array and the size of this list. If the list fits in the specified array with room to spare (i.e., the array has more elements than the list), the element in the array immediately following the end of the list is set to null. (This is useful in determining the length of the list only if the caller knows that the list does not contain any null elements.) Like the #toArray() method, this method acts as bridge between array-based and collection-based APIs. Further, this method allows precise control over the runtime type of the output array, and may, under certain circumstances, be used to save allocation costs. Suppose x is a list known to contain only strings. The following code can be used to dump the list into a newly allocated array of String: String[] y = x.toArray(new String[0]);  Note that toArray(new Object[0]) is identical in function to toArray().",FreeText,receiverObjectID.toArray(new Object[0]).equals(receiverObjectID.toArray())
63,jdk,java.util.SimpleTimeZone_goal.json,"setStartRule(int startMonth, int startDay, int startTime)",setStartRule,java.util.SimpleTimeZone,"Sets the daylight saving time start rule to a fixed date within a month. This method is equivalent to: setStartRule(startMonth, startDay, 0, startTime)",FreeText,"receiverObjectClone.setStartRule(args[0],args[1],0,args[2]);
receiverObjectClone.equals(receiverObjectID)"
64,jdk,java.util.SimpleTimeZone_goal.json,"setEndRule(int endMonth, int endDay, int endTime)",setEndRule,java.util.SimpleTimeZone,"Sets the daylight saving time end rule to a fixed date within a month. This method is equivalent to: setEndRule(endMonth, endDay, 0, endTime)",FreeText,"receiverObjectClone.setEndRule(args[0],args[1],0,args[2]);
receiverObjectClone.equals(receiverObjectID)"
65,jdk,java.util.SimpleTimeZone_goal.json,observesDaylightTime(),observesDaylightTime,java.util.SimpleTimeZone,Returns true if this SimpleTimeZone observes Daylight Saving Time. This method is equivalent to #useDaylightTime().,FreeText,methodResultID==(receiverObjectClone.useDaylightTime())
66,jdk,java.util.Stack_goal.json,push(E item),push,java.util.Stack,Pushes an item onto the top of this stack. This has exactly the same effect as: <pre> addElement(item)</pre>,FreeText,receiverObjectClone.addElement(args[0]); receiverObjectClone.equals(receiverObjectID)
67,jdk,java.util.TimeZone_goal.json,getDisplayName(),getDisplayName,java.util.TimeZone,"Returns a long standard time name of this TimeZone suitable for presentation to the user in the default locale. This method is equivalent to: <pre> getDisplayName(false, #LONG, Locale.getDefault(Locale.Category#DISPLAY)) </pre>",FreeText,"methodResultID == getDisplayName(false, java.util.TimeZone.LONG, Locale.getDefault(Locale.Category#DISPLAY))"
68,jdk,java.util.TimeZone_goal.json,getDisplayName(java.util.Locale locale),getDisplayName,java.util.TimeZone,"Returns a long standard time name of this TimeZone suitable for presentation to the user in the specified locale. This method is equivalent to: <pre> getDisplayName(false, #LONG, locale) </pre>",FreeText,"methodResultID == getDisplayName(false, java.util.TimeZone.LONG, args[0])"
69,jdk,java.util.TimeZone_goal.json,"getDisplayName(boolean daylight, int style)",getDisplayName,java.util.TimeZone,"Returns a name in the specified style of this TimeZone suitable for presentation to the user in the default locale. If the specified daylight is true, a Daylight Saving Time name is returned (even if this TimeZone doesn't observe Daylight Saving Time). Otherwise, a Standard Time name is returned. This method is equivalent to: <pre> getDisplayName(daylight, style, Locale.getDefault(Locale.Category#DISPLAY)) </pre>",FreeText,"methodResultID == getDisplayName(args[0], args[1], Locale.getDefault(Locale.Category#DISPLAY)) "
70,jdk,java.util.Vector_goal.json,"setElementAt(E obj, int index)",setElementAt,java.util.Vector,"Sets the component at the specified index of this vector to be the specified object. The previous component at that position is discarded. The index must be a value greater than or equal to 0 and less than the current size of the vector. This method is identical in functionality to the set(int, E) method (which is part of the List interface). Note that the set method reverses the order of the parameters, to more closely match array usage. Note also that the set method returns the old value that was stored at the specified position.",FreeText,"receiverObjectClone.set(args[1],args[0]); receiverObjectClone.equals(receiverObjectID)"
71,jdk,java.util.Vector_goal.json,removeAllElements(),removeAllElements,java.util.Vector,Removes all components from this vector and sets its size to zero. This method is identical in functionality to the #clear method (which is part of the List interface).,FreeText,receiverObjectClone.clear();receiverObjectClone.equals(receiverObjectID)
72,jdk,java.util.Vector_goal.json,"insertElementAt(E obj, int index)",insertElementAt,java.util.Vector,"Inserts the specified object as a component in this vector at the specified index. Each component in this vector with an index greater or equal to the specified index is shifted upward to have an index one greater than the value it had previously. The index must be a value greater than or equal to 0 and less than or equal to the current size of the vector. (If the index is equal to the current size of the vector, the new element is appended to the Vector.) This method is identical in functionality to the add(int, E) method (which is part of the List interface). Note that the add method reverses the order of the parameters, to more closely match array usage.",FreeText," receiverObjectClone.add(args[1],args[0]); receiverObjectClone.equals(receiverObjectID)"
73,jdk,java.util.Vector_goal.json,addElement(E obj),addElement,java.util.Vector,"Adds the specified component to the end of this vector, increasing its size by one. The capacity of this vector is increased if its size becomes greater than its capacity. This method is identical in functionality to the add(E) method (which is part of the List interface).",FreeText, receiverObjectClone.add(args[0]); receiverObjectClone.equals(receiverObjectID)
74,jdk,java.util.Vector_goal.json,removeElementAt(int index),removeElementAt,java.util.Vector,Deletes the component at the specified index. Each component in this vector with an index greater or equal to the specified index is shifted downward to have an index one smaller than the value it had previously. The size of this vector is decreased by 1. The index must be a value greater than or equal to 0 and less than the current size of the vector. This method is identical in functionality to the #remove(int) method (which is part of the List interface). Note that the remove method returns the old value that was stored at the specified position.,FreeText,receiverObjectClone.remove(args[0]); receiverObjectClone.equals(receiverObjectID)
75,jdk,java.util.Vector_goal.json,removeElement(java.lang.Object obj),removeElement,java.util.Vector,"Removes the first (lowest-indexed) occurrence of the argument from this vector. If the object is found in this vector, each component in the vector with an index greater or equal to the object's index is shifted downward to have an index one smaller than the value it had previously. This method is identical in functionality to the #remove(Object) method (which is part of the List interface).",FreeText,methodResultID==(receiverObjectClone.remove(args[0]))
76,jdk,java.util.Vector_goal.json,elementAt(int index),elementAt,java.util.Vector,Returns the component at the specified index. This method is identical in functionality to the #get(int) method (which is part of the List interface).,FreeText,methodResultID.equals(receiverObjectClone.get(args[0]))
