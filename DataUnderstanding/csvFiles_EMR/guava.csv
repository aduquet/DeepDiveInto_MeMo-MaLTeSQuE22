,library,jsonFileName,signature,name,targetClass,equivalence.comment,equivalence.kind,equivalence.condition
0,guava,com.google.common.base.CharMatcher_goal.json,matchesNoneOf(java.lang.CharSequence sequence),matchesNoneOf,com.google.common.base.CharMatcher,"Returns true if a character sequence contains no matching characters. Equivalent to !matchesAnyOf(sequence). <p>The default implementation iterates over the sequence, invoking matches for each character, until this returns false or the end is reached.",FreeText,methodResultID==(!receiverObjectClone.matchesAnyOf(args[0]))
1,guava,com.google.common.base.CharMatcher_goal.json,matchesAnyOf(java.lang.CharSequence sequence),matchesAnyOf,com.google.common.base.CharMatcher,"Returns true if a character sequence contains at least one matching character. Equivalent to !matchesNoneOf(sequence). <p>The default implementation iterates over the sequence, invoking matches for each character, until this returns true or the end is reached.",FreeText,methodResultID==(!receiverObjectClone.matchesNoneOf(args[0]))
2,guava,com.google.common.base.Splitter_goal.json,trimResults(),trimResults,com.google.common.base.Splitter,"Returns a splitter that behaves equivalently to this splitter, but automatically removes leading and trailing {@linkplain CharMatcher#WHITESPACE whitespace} from each returned substring; equivalent to trimResults(CharMatcher.WHITESPACE). For example, Splitter.on(',').trimResults().split("" a, b ,c "") returns an iterable containing [""a"", ""b"", ""c""].",FreeText,methodResultID.equals(receiverObjectClone.trimResults(com.google.common.base.CharMatcher.WHITESPACE))
3,guava,com.google.common.base.Splitter_goal.json,onPattern(java.lang.String separatorPattern),onPattern,com.google.common.base.Splitter,"Returns a splitter that considers any subsequence matching a given pattern (regular expression) to be a separator. For example, Splitter.onPattern(""\r?\n"").split(entireFile) splits a string into lines whether it uses DOS-style or UNIX-style line terminators. This is equivalent to Splitter.on(Pattern.compile(pattern)).",FreeText,methodResultID.equals(Splitter.on(java.util.regex.Pattern.compile(args[0])))
4,guava,com.google.common.cache.LongAdder_goal.json,decrement(),decrement,com.google.common.cache.LongAdder,Equivalent to add(-1).,FreeText,receiverObjectClone.add(-1); receiverObjectClone.equals(receiverObjectID)
5,guava,com.google.common.cache.LongAdder_goal.json,increment(),increment,com.google.common.cache.LongAdder,Equivalent to add(1).,FreeText, receiverObjectClone.add(1); receiverObjectClone.equals(receiverObjectID)
6,guava,com.google.common.cache.LongAdder_goal.json,longValue(),longValue,com.google.common.cache.LongAdder,Equivalent to sum.,FreeText,methodResultID ==(receiverObjectClone.sum())
7,guava,com.google.common.collect.ArrayTable_goal.json,"set(int rowIndex, int columnIndex, V value)",set,com.google.common.collect.ArrayTable,"Associates value with the specified row and column indices. The logic put(rowKeyList().get(rowIndex), columnKeyList().get(columnIndex), value) has the same behavior, but this method runs more quickly.",FreeText,"methodResultID.equals[receiverObjectClone.put(receiverObjectClone.rowKeyList().get(args[0]), receiverObjectClone.columnKeyList().get(args[1]), args[2]);]"
8,guava,com.google.common.collect.ArrayTable_goal.json,clear(),clear,com.google.common.collect.ArrayTable,Not supported. Use eraseAll instead.,FreeText,receiverObjectClone.eraseAll();receiverObjectClone.equals(receiverObjectID)
9,guava,com.google.common.collect.ArrayTable_goal.json,"erase(java.lang.Object rowKey, java.lang.Object columnKey)",erase,com.google.common.collect.ArrayTable,"Associates the value null with the specified keys, assuming both keys are valid. If either key is null or isn't among the keys provided during construction, this method has no effect. <p>This method is equivalent to put(rowKey, columnKey, null) when both provided keys are valid.",FreeText,"methodResultID.equals(receiverObjectClone.put(args[0],args[1],null))"
10,guava,com.google.common.collect.ArrayTable_goal.json,"remove(java.lang.Object rowKey, java.lang.Object columnKey)",remove,com.google.common.collect.ArrayTable,Not supported. Use erase instead.,FreeText,"methodResultID.equals(receiverObjectClone.erase(args[0],args[1]))"
11,guava,com.google.common.collect.Collections2_goal.json,orderedPermutations(java.lang.Iterable<E> elements),orderedPermutations,com.google.common.collect.Collections2,"Returns a Collection of all the permutations of the specified Iterable. <p>Notes: This is an implementation of the algorithm for Lexicographical Permutations Generation, described in Knuth's ""The Art of Computer Programming"", Volume 4, Chapter 7, Section 7.2.1.2. The iteration order follows the lexicographical order. This means that the first permutation will be in ascending order, and the last will be in descending order. <p>Duplicate elements are considered equal. For example, the list [1, 1] will have only one permutation, instead of two. This is why the elements have to implement Comparable. <p>An empty iterable has only one permutation, which is an empty list. <p>This method is equivalent to Collections2.orderedPermutations(list, Ordering.natural()).",FreeText,"methodResultID.equals(Collections2.orderedPermutations(list, Ordering.natural()))"
12,guava,com.google.common.collect.ContiguousSet_goal.json,range(),range,com.google.common.collect.ContiguousSet,"Returns a range, closed on both ends, whose endpoints are the minimum and maximum values contained in this set. This is equivalent to range(CLOSED, CLOSED).",FreeText,"methodResultID.equals(receiverObjectClone.range(com.google.common.collect.BoundType.CLOSED,com.google.common.collect.BoundType.CLOSED))"
13,guava,com.google.common.collect.ImmutableRangeSet_goal.json,of(com.google.common.collect.Range<C> range),of,com.google.common.collect.ImmutableRangeSet,"Returns an immutable range set containing the specified single range. If range.isEmpty(), this is equivalent to ImmutableRangeSet#of().",FreeText,args[0].isEmpty() ? methodResultID.equals(receiverObjectClone.of())
14,guava,com.google.common.collect.ImmutableTable_goal.json,builder(),builder,com.google.common.collect.ImmutableTable,Returns a new builder. The generated builder is equivalent to the builder created by the Builder#ImmutableTable.Builder() constructor.,FreeText,methodResultID.equals(ImmutableTable.Builder.ImmutableTable.Builder())
15,guava,com.google.common.collect.Iterables_goal.json,cycle(T... elements),cycle,com.google.common.collect.Iterables,"Returns an iterable whose iterators cycle indefinitely over the provided elements. <p>After remove is invoked on a generated iterator, the removed element will no longer appear in either that iterator or any other iterator created from the same source iterable. That is, this method behaves exactly as Iterables.cycle(Lists.newArrayList(elements)). The iterator's hasNext method returns true until all of the original elements have been removed. <p>Warning: Typical uses of the resulting iterator may produce an infinite loop. You should use an explicit break or be certain that you will eventually remove all the elements. <p>To cycle over the elements n times, use the following: Iterables.concat(Collections.nCopies(n, Arrays.asList(elements))).",FreeText,methodResultID.equals(Iterables.cycle(com.google.common.collect.Lists.newArrayList(args[0])))
16,guava,com.google.common.collect.Iterables_goal.json,toString(java.lang.Iterable<?> iterable),toString,com.google.common.collect.Iterables,"Returns a string representation of iterable, with the format [e1, e2, ..., en] (that is, identical to Arrays.toString(Iterables.toArray(iterable))). Note that for most implementations of Collection, collection.toString() also gives the same result, but that behavior is not generally guaranteed.",FreeText,methodResultID.equals(Arrays.toString(Iterables.toArray(args[0]))
17,guava,com.google.common.collect.Iterators_goal.json,"forArray(T[] array, int offset, int length, int index)",forArray,com.google.common.collect.Iterators,"Returns a list iterator containing the elements in the specified range of array in order, starting at the specified index. <p>The Iterable equivalent of this method is Arrays.asList(array).subList(offset, offset + length).listIterator(index).",FreeText,"methodResultID.equals(java.util.Arrays.asList(args[0]).subList(args[1], args[1] + args[2]).listIterator(args[3]))"
18,guava,com.google.common.collect.Iterators_goal.json,forArray(T... array),forArray,com.google.common.collect.Iterators,"Returns an iterator containing the elements of array in order. The returned iterator is a view of the array; subsequent changes to the array will be reflected in the iterator. <p>Note: It is often preferable to represent your data using a collection type, for example using Arrays#asList(Object[]), making this method unnecessary. <p>The Iterable equivalent of this method is either Arrays#asList(Object[]), ImmutableList#copyOf(Object[])}, or ImmutableList#of.",FreeText,methodResultID.equals(java.util.Arrays.asList(args[0])) && methodResultID.equals(ImmutableList#copyOf(args[0])) &&  methodResultID.equals(ImmutableList#of(args[0]))
19,guava,com.google.common.collect.Iterators_goal.json,singletonIterator(T value),singletonIterator,com.google.common.collect.Iterators,Returns an iterator containing only value. <p>The Iterable equivalent of this method is Collections#singleton.,FreeText,methodResultID.equals(java.util.Collections.singleton(args[0]))
20,guava,com.google.common.collect.LinkedHashMultimap_goal.json,"create(com.google.common.collect.Multimap<? extends K, ? extends V> multimap)",create,com.google.common.collect.LinkedHashMultimap,"Constructs a LinkedHashMultimap with the same mappings as the specified multimap. If a key-value mapping appears multiple times in the input multimap, it only appears once in the constructed multimap. The new multimap has the same Multimap#entries() iteration order as the input multimap, except for excluding duplicate mappings.",FreeText,methodResultID.equals(receiverObjectClone.entries())
21,guava,com.google.common.collect.LinkedListMultimap_goal.json,"create(com.google.common.collect.Multimap<? extends K, ? extends V> multimap)",create,com.google.common.collect.LinkedListMultimap,Constructs a LinkedListMultimap with the same mappings as the specified Multimap. The new multimap has the same Multimap#entries() iteration order as the input multimap.,FreeText,methodResultID.equals(receiverObjectClone.entries())
22,guava,com.google.common.collect.LinkedListMultimap_goal.json,entries(),entries,com.google.common.collect.LinkedListMultimap,"{@inheritDoc} The iterator generated by the returned collection traverses the entries in the order they were added to the multimap. Because the entries may have duplicates and follow the insertion ordering, this method returns a List, instead of the Collection specified in the ListMultimap interface. An entry's Entry#getKey method always returns the same key, regardless of what happens subsequently. As long as the corresponding key-value mapping is not removed from the multimap, Entry#getValue returns the value from the multimap, which may change over time, and Entry#setValue modifies that value. Removing the mapping from the multimap does not alter the value returned by getValue(), though a subsequent setValue() call won't update the multimap but will lead to a revised value being returned by getValue().",FreeText,methodResultID.equals(receiverObjectClone.keys())
23,guava,com.google.common.collect.Multimap_goal.json,isEmpty(),isEmpty,com.google.common.collect.Multimap,"Returns true if this multimap contains no key-value pairs. Equivalent to size() == 0, but can in some cases be more efficient.",FreeText,methodResultID == (receiverObjectClone.size() == 0)
24,guava,com.google.common.collect.Multimap_goal.json,"putAll(K key, java.lang.Iterable<? extends V> values)",putAll,com.google.common.collect.Multimap,"Stores a key-value pair in this multimap for each of values, all using the same key, key. Equivalent to (but expected to be more efficient than): for (V value : values) { put(key, value); } <p>In particular, this is a no-op if values is empty.",FreeText,"methodResultID.equals[ for (V value : args[1]) { receiverObjectClone.put(args[0], value);} ]"
25,guava,com.google.common.collect.Multimap_goal.json,"replaceValues(K key, java.lang.Iterable<? extends V> values)",replaceValues,com.google.common.collect.Multimap,"Stores a collection of values with the same key, replacing any existing values for that key. <p>If values is empty, this is equivalent to removeAll(key).",FreeText,if(!args[1].iterator().hasNext()) {methodResultID.equals(receiverObjectClone.removeAll(args[0]))}
26,guava,com.google.common.collect.Multisets_goal.json,"removeOccurrences(com.google.common.collect.Multiset<?> multisetToModify, java.lang.Iterable<?> occurrencesToRemove)",removeOccurrences,com.google.common.collect.Multisets,"For each occurrence of an element e in occurrencesToRemove, removes one occurrence of e in multisetToModify. <p>Equivalently, this method modifies multisetToModify so that multisetToModify.count(e) is set to Math.max(0, multisetToModify.count(e) - Iterables.frequency(occurrencesToRemove, e)). <p>This is not the same as multisetToModify. removeAll(occurrencesToRemove), which removes all occurrences of elements that appear in occurrencesToRemove. However, this operation is equivalent to, albeit sometimes more efficient than, the following: for (E e : occurrencesToRemove) { multisetToModify.remove(e); }.",FreeText,methodResultID.equals[ for (Object e : args[1]) { args[0].remove(e);} ]
27,guava,com.google.common.collect.Multisets_goal.json,"removeOccurrences(com.google.common.collect.Multiset<?> multisetToModify, com.google.common.collect.Multiset<?> occurrencesToRemove)",removeOccurrences,com.google.common.collect.Multisets,"For each occurrence of an element e in occurrencesToRemove, removes one occurrence of e in multisetToModify. <p>Equivalently, this method modifies multisetToModify so that multisetToModify.count(e) is set to Math.max(0, multisetToModify.count(e) - occurrencesToRemove.count(e)). <p>This is not the same as multisetToModify. removeAll(occurrencesToRemove), which removes all occurrences of elements that appear in occurrencesToRemove. However, this operation is equivalent to, albeit sometimes more efficient than, the following: for (E e : occurrencesToRemove) { multisetToModify.remove(e); }.",FreeText,methodResultID.equals[ for (Object e : args[1]) { args[0].remove(e);} ]
28,guava,com.google.common.collect.Multiset_goal.json,"add(E element, int occurrences)",add,com.google.common.collect.Multiset,"Adds a number of occurrences of an element to this multiset. Note that if occurrences == 1, this method has the identical effect to add(Object). This method is functionally equivalent (except in the case of overflow) to the call addAll(Collections.nCopies(element, occurrences)), which would presumably perform much more poorly.",FreeText,"if(args[1] == 1) {receiverObjectClone.add(args[0]); receiverObjectClone.equals(receiverObjectID)} && methodResultID.equals[receiverObjectClone.addAll(java.util.Collections.nCopies( args[1],args[0]));]"
29,guava,com.google.common.collect.Multiset_goal.json,"remove(java.lang.Object element, int occurrences)",remove,com.google.common.collect.Multiset,"Removes a number of occurrences of the specified element from this multiset. If the multiset contains fewer than this number of occurrences to begin with, all occurrences will be removed. Note that if occurrences == 1, this is functionally equivalent to the call remove(element).",FreeText,if(args[1] == 1) {receiverObjectClone.remove(args[0]); receiverObjectClone.equals(receiverObjectID)}
30,guava,com.google.common.collect.Sets_goal.json,complementOf(java.util.Collection<E> collection),complementOf,com.google.common.collect.Sets,"Creates an EnumSet consisting of all enum values that are not in the specified collection. If the collection is an EnumSet, this method has the same behavior as EnumSet#complementOf. Otherwise, the specified collection must contain at least one element, in order to determine the element type. If the collection could be empty, use #complementOf(Collection, Class) instead of this method.",FreeText,if(args[0] instanceof EnumSet) {methodResultID.equals(java.util.EnumSet.complementOf(args[0]))}
31,guava,com.google.common.collect.Sets_goal.json,"complementOf(java.util.Collection<E> collection, java.lang.Class<E> type)",complementOf,com.google.common.collect.Sets,"Creates an EnumSet consisting of all enum values that are not in the specified collection. This is equivalent to EnumSet#complementOf, but can act on any input collection, as long as the elements are of enum type.",FreeText,if(args[0] instanceof EnumSet) {methodResultID.equals(java.util.EnumSet.complementOf(args[0]))}
32,guava,com.google.common.collect.SortedMultiset_goal.json,"subMultiset(E lowerBound, com.google.common.collect.BoundType lowerBoundType, E upperBound, com.google.common.collect.BoundType upperBoundType)",subMultiset,com.google.common.collect.SortedMultiset,"Returns a view of this multiset restricted to the range between lowerBound and upperBound. The returned multiset is a view of this multiset, so changes to one will be reflected in the other. The returned multiset supports all operations that this multiset supports. <p>The returned multiset will throw an IllegalArgumentException on attempts to add elements outside its range. <p>This method is equivalent to tailMultiset(lowerBound, lowerBoundType).headMultiset(upperBound, upperBoundType).",FreeText,"methodResultID.equals[receiverObjectClone.tailMultiset(args[0],args[1]).headMultiset(args[2],args[3]);]"
33,guava,com.google.common.hash.Hasher_goal.json,putDouble(double d),putDouble,com.google.common.hash.Hasher,Equivalent to putLong(Double.doubleToRawLongBits(d)).,FreeText,methodResultID.equals[receiverObjectClone.putLong(Double.doubleToRawLongBits(args[0]));]
34,guava,com.google.common.hash.Hasher_goal.json,putFloat(float f),putFloat,com.google.common.hash.Hasher,Equivalent to putInt(Float.floatToRawIntBits(f)).,FreeText,methodResultID.equals[receiverObjectClone.putInt(Float.floatToRawIntBits(args[0]));]
35,guava,com.google.common.hash.Hasher_goal.json,putBoolean(boolean b),putBoolean,com.google.common.hash.Hasher,Equivalent to putByte(b ? (byte) 1 : (byte) 0).,FreeText,methodResultID.equals(receiverObjectClone.putByte(args[0] ? (byte) 1 : (byte) 0))
36,guava,com.google.common.hash.Hasher_goal.json,"putString(java.lang.CharSequence charSequence, java.nio.charset.Charset charset)",putString,com.google.common.hash.Hasher,Equivalent to putBytes(charSequence.toString().getBytes(charset)).,FreeText,methodResultID.equals[receiverObjectClone.putBytes(args[0].toString().getBytes(args[1]));]
37,guava,com.google.common.io.CharSink_goal.json,writeLines(java.lang.Iterable<? extends java.lang.CharSequence> lines),writeLines,com.google.common.io.CharSink,"Writes the given lines of text to this sink with each line (including the last) terminated with the operating system's default line separator. This method is equivalent to writeLines(lines, System.getProperty(""line.separator"")).",FreeText,"methodResultID.equals(receiverObjectClone.writeLines(args[0], System.getProperty(""line.separator""))"
38,guava,com.google.common.io.Flushables_goal.json,flushQuietly(java.io.Flushable flushable),flushQuietly,com.google.common.io.Flushables,"Equivalent to calling flush(flushable, true), but with no IOException in the signature.",FreeText,"com.google.common.io.Flushables.flush(args[0],true); receiverObjectClone.flushQuietly(args[0]); receiverObjectClone.equals(receiverObjectID)"
39,guava,com.google.common.math.DoubleMath_goal.json,"fuzzyEquals(double a, double b, double tolerance)",fuzzyEquals,com.google.common.math.DoubleMath,"Returns true if a and b are within tolerance of each other. <p>Technically speaking, this is equivalent to Math.abs(a - b) <= tolerance || Double.valueOf(a).equals(Double.valueOf(b)). <p>Notable special cases include: <ul> All NaNs are fuzzily equal. <li>If a == b, then a and b are always fuzzily equal. <li>Positive and negative zero are always fuzzily equal. <li>If tolerance is zero, and neither a nor b is NaN, then a and b are fuzzily equal if and only if a == b. <li>With Double#POSITIVE_INFINITY tolerance, all non-NaN values are fuzzily equal. <li>With finite tolerance, Double.POSITIVE_INFINITY and Double.NEGATIVE_INFINITY are fuzzily equal only to themselves. <p>This is reflexive and symmetric, but not transitive, so it is not an equivalence relation and not suitable for use in Object#equals implementations.",FreeText,methodResultID==(Math.abs(args[0] - args[1]) <= args[2] || Double.valueOf(args[0]).equals(Double.valueOf(args[1])))
40,guava,com.google.common.math.DoubleMath_goal.json,"fuzzyCompare(double a, double b, double tolerance)",fuzzyCompare,com.google.common.math.DoubleMath,"Compares a and b ""fuzzily,"" with a tolerance for nearly-equal values. <p>This method is equivalent to fuzzyEquals(a, b, tolerance) ? 0 : Double.compare(a, b). In particular, like double), it treats all NaN values as equal and greater than all other values (including Double#POSITIVE_INFINITY). <p>This is not a total ordering and is not suitable for use in Comparable#compareTo implementations. In particular, it is not transitive.",FreeText,"methodResultID==(com.google.common.math.DoubleMath.fuzzyEquals(args[0], args[1], args[2]) ? 0 : Double.compare(args[0], args[1]))"
41,guava,com.google.common.math.DoubleMath_goal.json,isMathematicalInteger(double x),isMathematicalInteger,com.google.common.math.DoubleMath,"Returns true if x represents a mathematical integer. <p>This is equivalent to, but not necessarily implemented as, the expression !Double.isNaN(x) && !Double.isInfinite(x) && x == Math.rint(x).",FreeText,methodResultID==(!Double.isNaN(args[0])&&!Double.isInfinite(args[0])&&args[0]==Math.rint(args[0]))
42,guava,com.google.common.primitives.Booleans_goal.json,"compare(boolean a, boolean b)",compare,com.google.common.primitives.Booleans,Compares the two specified boolean values in the standard way (false is considered less than true). The sign of the value returned is the same as that of ((Boolean) a).compareTo(b). <p>Note for Java 7 and later: this method should be treated as deprecated; use the equivalent Boolean#compare method instead.,FreeText,methodResultID==( ((Boolean) args[0]).compareTo(args[1]) )
43,guava,com.google.common.primitives.Booleans_goal.json,asList(boolean... backingArray),asList,com.google.common.primitives.Booleans,"Returns a fixed-size list backed by the specified array, similar to Arrays#asList(Object[]). The list supports Object), but any attempt to set a value to null will result in a NullPointerException. <p>The returned list maintains the values, but not the identities, of Boolean objects written to or read from it. For example, whether list.get(0) == list.get(0) is true for the returned list is unspecified.",FreeText,methodResultID.equals(java.util.Arrays.asList(args[0]))
44,guava,com.google.common.primitives.Booleans_goal.json,hashCode(boolean value),hashCode,com.google.common.primitives.Booleans,Returns a hash code for value; equal to the result of invoking ((Boolean) value).hashCode().,FreeText,methodResultID==(((Boolean) args[0]).hashCode())
45,guava,com.google.common.primitives.Chars_goal.json,"fromBytes(byte b1, byte b2)",fromBytes,com.google.common.primitives.Chars,"Returns the char value whose byte representation is the given 2 bytes, in big-endian order; equivalent to Chars.fromByteArray(new byte[] {b1, b2)}.",FreeText,"methodResultID==(Chars.fromByteArray(new byte[] {args[0], args[1]}))"
46,guava,com.google.common.primitives.Chars_goal.json,"compare(char a, char b)",compare,com.google.common.primitives.Chars,Compares the two specified char values. The sign of the value returned is the same as that of ((Character) a).compareTo(b). <p>Note for Java 7 and later: this method should be treated as deprecated; use the equivalent Character#compare method instead.,FreeText,methodResultID==( ((Character) args[0]).compareTo(args[1]) )
47,guava,com.google.common.primitives.Chars_goal.json,asList(char... backingArray),asList,com.google.common.primitives.Chars,"Returns a fixed-size list backed by the specified array, similar to Arrays#asList(Object[]). The list supports Object), but any attempt to set a value to null will result in a NullPointerException. <p>The returned list maintains the values, but not the identities, of Character objects written to or read from it. For example, whether list.get(0) == list.get(0) is true for the returned list is unspecified.",FreeText,methodResultID.equals(java.util.Arrays.asList(args[0]))
48,guava,com.google.common.primitives.Chars_goal.json,fromByteArray(byte[] bytes),fromByteArray,com.google.common.primitives.Chars,"Returns the char value whose big-endian representation is stored in the first 2 bytes of bytes; equivalent to ByteBuffer.wrap(bytes).getChar(). For example, the input byte array {0x54, 0x32} would yield the char value '\\u5432'. <p>Arguably, it's preferable to use java.nio.ByteBuffer; that library exposes much more flexibility at little cost in readability.",FreeText,methodResultID==(java.nio.ByteBuffer.wrap(args[0]).getChar())
49,guava,com.google.common.primitives.Chars_goal.json,toByteArray(char value),toByteArray,com.google.common.primitives.Chars,"Returns a big-endian representation of value in a 2-element byte array; equivalent to ByteBuffer.allocate(2).putChar(value).array(). For example, the input value '\\u5432' would yield the byte array {0x54, 0x32}. <p>If you need to convert and concatenate several values (possibly even of different types), use a shared java.nio.ByteBuffer instance, or use com.google.common.io.ByteStreams#newDataOutput() to get a growable buffer.",FreeText,"java.util.Arrays.equals(methodResultID, java.nio.ByteBuffer.allocate(2).putChar(args[0]).array())"
50,guava,com.google.common.primitives.Chars_goal.json,hashCode(char value),hashCode,com.google.common.primitives.Chars,Returns a hash code for value; equal to the result of invoking ((Character) value).hashCode().,FreeText,methodResultID==(((Character) args[0]).hashCode())
51,guava,com.google.common.primitives.Doubles_goal.json,asList(double... backingArray),asList,com.google.common.primitives.Doubles,"Returns a fixed-size list backed by the specified array, similar to Arrays#asList(Object[]). The list supports Object), but any attempt to set a value to null will result in a NullPointerException. <p>The returned list maintains the values, but not the identities, of Double objects written to or read from it. For example, whether list.get(0) == list.get(0) is true for the returned list is unspecified. <p>The returned list may have unexpected behavior if it contains NaN, or if NaN is used as a parameter to any of its methods.",FreeText,methodResultID.equals(java.util.Arrays.asList(args[0]))
52,guava,com.google.common.primitives.Doubles_goal.json,isFinite(double value),isFinite,com.google.common.primitives.Doubles,"Returns true if value represents a real number. This is equivalent to, but not necessarily implemented as, !(Double.isInfinite(value) || Double.isNaN(value)).",FreeText,methodResultID==(!(Double.isInfinite(args[0]) || Double.isNaN(args[0])))
53,guava,com.google.common.primitives.Doubles_goal.json,hashCode(double value),hashCode,com.google.common.primitives.Doubles,Returns a hash code for value; equal to the result of invoking ((Double) value).hashCode().,FreeText,methodResultID==(((Double) args[0]).hashCode())
54,guava,com.google.common.primitives.Floats_goal.json,asList(float... backingArray),asList,com.google.common.primitives.Floats,"Returns a fixed-size list backed by the specified array, similar to Arrays#asList(Object[]). The list supports Object), but any attempt to set a value to null will result in a NullPointerException. <p>The returned list maintains the values, but not the identities, of Float objects written to or read from it. For example, whether list.get(0) == list.get(0) is true for the returned list is unspecified. <p>The returned list may have unexpected behavior if it contains NaN, or if NaN is used as a parameter to any of its methods.",FreeText,methodResultID.equals(java.util.Arrays.asList(args[0]))
55,guava,com.google.common.primitives.Floats_goal.json,hashCode(float value),hashCode,com.google.common.primitives.Floats,Returns a hash code for value; equal to the result of invoking ((Float) value).hashCode().,FreeText,methodResultID==(((Float) args[0]).hashCode())
56,guava,com.google.common.primitives.Floats_goal.json,isFinite(float value),isFinite,com.google.common.primitives.Floats,"Returns true if value represents a real number. This is equivalent to, but not necessarily implemented as, !(Float.isInfinite(value) || Float.isNaN(value)).",FreeText,methodResultID==(!(Float.isInfinite(args[0]) || Float.isNaN(args[0])))
57,guava,com.google.common.primitives.Ints_goal.json,toByteArray(int value),toByteArray,com.google.common.primitives.Ints,"Returns a big-endian representation of value in a 4-element byte array; equivalent to ByteBuffer.allocate(4).putInt(value).array(). For example, the input value 0x12131415 would yield the byte array {0x12, 0x13, 0x14, 0x15}. <p>If you need to convert and concatenate several values (possibly even of different types), use a shared java.nio.ByteBuffer instance, or use com.google.common.io.ByteStreams#newDataOutput() to get a growable buffer.",FreeText,"java.util.Arrays.equals(methodResultID, java.nio.ByteBuffer.allocate(4).putInt(args[0]).array())"
58,guava,com.google.common.primitives.Ints_goal.json,"fromBytes(byte b1, byte b2, byte b3, byte b4)",fromBytes,com.google.common.primitives.Ints,"Returns the int value whose byte representation is the given 4 bytes, in big-endian order; equivalent to Ints.fromByteArray(new byte[] {b1, b2, b3, b4)}.",FreeText,"methodResultID==(Ints.fromByteArray(new byte[] {args[0], args[1], args[2], args[3]}))"
59,guava,com.google.common.primitives.Ints_goal.json,hashCode(int value),hashCode,com.google.common.primitives.Ints,Returns a hash code for value; equal to the result of invoking ((Integer) value).hashCode().,FreeText,methodResultID==(((Integer) args[0]).hashCode())
60,guava,com.google.common.primitives.Ints_goal.json,"compare(int a, int b)",compare,com.google.common.primitives.Ints,Compares the two specified int values. The sign of the value returned is the same as that of ((Integer) a).compareTo(b). <p>Note for Java 7 and later: this method should be treated as deprecated; use the equivalent Integer#compare method instead.,FreeText,methodResultID==( ((Integer) args[0]).compareTo(args[1]) )
61,guava,com.google.common.primitives.Ints_goal.json,asList(int... backingArray),asList,com.google.common.primitives.Ints,"Returns a fixed-size list backed by the specified array, similar to Arrays#asList(Object[]). The list supports Object), but any attempt to set a value to null will result in a NullPointerException. <p>The returned list maintains the values, but not the identities, of Integer objects written to or read from it. For example, whether list.get(0) == list.get(0) is true for the returned list is unspecified.",FreeText,methodResultID.equals(java.util.Arrays.asList(args[0]))
62,guava,com.google.common.primitives.Ints_goal.json,fromByteArray(byte[] bytes),fromByteArray,com.google.common.primitives.Ints,"Returns the int value whose big-endian representation is stored in the first 4 bytes of bytes; equivalent to ByteBuffer.wrap(bytes).getInt(). For example, the input byte array {0x12, 0x13, 0x14, 0x15, 0x33} would yield the int value 0x12131415. <p>Arguably, it's preferable to use java.nio.ByteBuffer; that library exposes much more flexibility at little cost in readability.",FreeText,methodResultID==(java.nio.ByteBuffer.wrap(args[0]).getInt())
63,guava,com.google.common.primitives.Longs_goal.json,asList(long... backingArray),asList,com.google.common.primitives.Longs,"Returns a fixed-size list backed by the specified array, similar to Arrays#asList(Object[]). The list supports Object), but any attempt to set a value to null will result in a NullPointerException. <p>The returned list maintains the values, but not the identities, of Long objects written to or read from it. For example, whether list.get(0) == list.get(0) is true for the returned list is unspecified.",FreeText,methodResultID.equals(java.util.Arrays.asList(args[0]))
64,guava,com.google.common.primitives.Longs_goal.json,fromByteArray(byte[] bytes),fromByteArray,com.google.common.primitives.Longs,"Returns the long value whose big-endian representation is stored in the first 8 bytes of bytes; equivalent to ByteBuffer.wrap(bytes).getLong(). For example, the input byte array {0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19} would yield the long value 0x1213141516171819L. <p>Arguably, it's preferable to use java.nio.ByteBuffer; that library exposes much more flexibility at little cost in readability.",FreeText,methodResultID==(java.nio.ByteBuffer.wrap(args[0]).getLong())
65,guava,com.google.common.primitives.Longs_goal.json,"compare(long a, long b)",compare,com.google.common.primitives.Longs,Compares the two specified long values. The sign of the value returned is the same as that of ((Long) a).compareTo(b). <p>Note for Java 7 and later: this method should be treated as deprecated; use the equivalent Long#compare method instead.,FreeText,methodResultID==( ((Long) args[0]).compareTo(args[1]) )
66,guava,com.google.common.primitives.Longs_goal.json,toByteArray(long value),toByteArray,com.google.common.primitives.Longs,"Returns a big-endian representation of value in an 8-element byte array; equivalent to ByteBuffer.allocate(8).putLong(value).array(). For example, the input value 0x1213141516171819L would yield the byte array {0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19}. <p>If you need to convert and concatenate several values (possibly even of different types), use a shared java.nio.ByteBuffer instance, or use com.google.common.io.ByteStreams#newDataOutput() to get a growable buffer.",FreeText,"java.util.Arrays.equals(methodResultID, java.nio.ByteBuffer.allocate(8).putLong(args[0]).array())"
67,guava,com.google.common.primitives.Longs_goal.json,"fromBytes(byte b1, byte b2, byte b3, byte b4, byte b5, byte b6, byte b7, byte b8)",fromBytes,com.google.common.primitives.Longs,"Returns the long value whose byte representation is the given 8 bytes, in big-endian order; equivalent to Longs.fromByteArray(new byte[] {b1, b2, b3, b4, b5, b6, b7, b8)}.",FreeText,"methodResultID==(Longs.fromByteArray(new byte[] {args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]}))"
68,guava,com.google.common.primitives.Longs_goal.json,hashCode(long value),hashCode,com.google.common.primitives.Longs,"Returns a hash code for value; equal to the result of invoking ((Long) value).hashCode(). <p>This method always return the value specified by Long#hashCode() in java, which might be different from ((Long) value).hashCode() in GWT because Long#hashCode() in GWT does not obey the JRE contract.",FreeText,methodResultID==(((Long) args[0]).hashCode())
69,guava,com.google.common.primitives.Shorts_goal.json,fromByteArray(byte[] bytes),fromByteArray,com.google.common.primitives.Shorts,"Returns the short value whose big-endian representation is stored in the first 2 bytes of bytes; equivalent to ByteBuffer.wrap(bytes).getShort(). For example, the input byte array {0x54, 0x32} would yield the short value 0x5432. <p>Arguably, it's preferable to use java.nio.ByteBuffer; that library exposes much more flexibility at little cost in readability.",FreeText,methodResultID==(java.nio.ByteBuffer.wrap(args[0]).getShort())
70,guava,com.google.common.primitives.Shorts_goal.json,"compare(short a, short b)",compare,com.google.common.primitives.Shorts,Compares the two specified short values. The sign of the value returned is the same as that of ((Short) a).compareTo(b). <p>Note for Java 7 and later: this method should be treated as deprecated; use the equivalent Short#compare method instead.,FreeText,methodResultID==( ((Short) args[0]).compareTo(args[1]) )
71,guava,com.google.common.primitives.Shorts_goal.json,hashCode(short value),hashCode,com.google.common.primitives.Shorts,Returns a hash code for value; equal to the result of invoking ((Short) value).hashCode().,FreeText,methodResultID==(((Short) args[0]).hashCode())
72,guava,com.google.common.primitives.Shorts_goal.json,"fromBytes(byte b1, byte b2)",fromBytes,com.google.common.primitives.Shorts,"Returns the short value whose byte representation is the given 2 bytes, in big-endian order; equivalent to Shorts.fromByteArray(new byte[] {b1, b2)}.",FreeText,"methodResultID==(Shorts.fromByteArray(new byte[] {args[0], args[1]}))"
73,guava,com.google.common.primitives.Shorts_goal.json,asList(short... backingArray),asList,com.google.common.primitives.Shorts,"Returns a fixed-size list backed by the specified array, similar to Arrays#asList(Object[]). The list supports Object), but any attempt to set a value to null will result in a NullPointerException. <p>The returned list maintains the values, but not the identities, of Short objects written to or read from it. For example, whether list.get(0) == list.get(0) is true for the returned list is unspecified.",FreeText,methodResultID.equals(java.util.Arrays.asList(args[0]))
74,guava,com.google.common.primitives.Shorts_goal.json,toByteArray(short value),toByteArray,com.google.common.primitives.Shorts,"Returns a big-endian representation of value in a 2-element byte array; equivalent to ByteBuffer.allocate(2).putShort(value).array(). For example, the input value (short) 0x1234 would yield the byte array {0x12, 0x34}. <p>If you need to convert and concatenate several values (possibly even of different types), use a shared java.nio.ByteBuffer instance, or use com.google.common.io.ByteStreams#newDataOutput() to get a growable buffer.",FreeText,"java.util.Arrays.equals(methodResultID, java.nio.ByteBuffer.allocate(2).putShort(args[0]).array())"
75,guava,com.google.common.util.concurrent.CycleDetectingLockFactory_goal.json,newReentrantReadWriteLock(java.lang.String lockName),newReentrantReadWriteLock,com.google.common.util.concurrent.CycleDetectingLockFactory,"Equivalent to newReentrantReadWriteLock(lockName, false).",FreeText,"methodResultID.equals(receiverObjectClone.newReentrantReadWriteLock(args[0],false))"
76,guava,com.google.common.util.concurrent.CycleDetectingLockFactory_goal.json,newReentrantLock(java.lang.String lockName),newReentrantLock,com.google.common.util.concurrent.CycleDetectingLockFactory,"Equivalent to newReentrantLock(lockName, false).",FreeText,"methodResultID.equals(receiverObjectClone.newReentrantLock(args[0],false))"
77,guava,com.google.common.util.concurrent.Monitor_goal.json,com.google.common.util.concurrent.Monitor(),com.google.common.util.concurrent.Monitor,com.google.common.util.concurrent.Monitor,Creates a monitor with a non-fair (but fast) ordering policy. Equivalent to Monitor(false).,FreeText,new Monitor().equals(new Monitor(false))
78,guava,com.google.common.util.concurrent.RateLimiter_goal.json,acquire(),acquire,com.google.common.util.concurrent.RateLimiter,"Acquires a single permit from this RateLimiter, blocking until the request can be granted. Tells the amount of time slept, if any. <p>This method is equivalent to acquire(1).",FreeText,methodResultID==(receiverObjectClone.acquire(1))
79,guava,com.google.common.util.concurrent.RateLimiter_goal.json,tryAcquire(),tryAcquire,com.google.common.util.concurrent.RateLimiter,Acquires a permit from this RateLimiter if it can be acquired immediately without delay. <p> This method is equivalent to tryAcquire(1).,FreeText,methodResultID==(receiverObjectClone.tryAcquire(1))
80,guava,com.google.common.util.concurrent.RateLimiter_goal.json,"tryAcquire(long timeout, java.util.concurrent.TimeUnit unit)",tryAcquire,com.google.common.util.concurrent.RateLimiter,"Acquires a permit from this RateLimiter if it can be obtained without exceeding the specified timeout, or returns false immediately (without waiting) if the permit would not have been granted before the timeout expired. <p>This method is equivalent to tryAcquire(1, timeout, unit).",FreeText,"methodResultID==(receiverObjectClone.tryAcquire(1,args[0],args[1]))"
