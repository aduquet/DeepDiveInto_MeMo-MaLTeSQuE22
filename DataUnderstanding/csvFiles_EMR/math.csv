,library,jsonFileName,signature,name,targetClass,equivalence.comment,equivalence.kind,equivalence.condition
0,math,org.apache.commons.math3.analysis.interpolation.LoessInterpolator_goal.json,"org.apache.commons.math3.analysis.interpolation.LoessInterpolator(double bandwidth, int robustnessIters)",org.apache.commons.math3.analysis.interpolation.LoessInterpolator,org.apache.commons.math3.analysis.interpolation.LoessInterpolator,"Construct a new LoessInterpolator with given bandwidth and number of robustness iterations.  Calling this constructor is equivalent to calling {link #LoessInterpolator(double, int, double) LoessInterpolator(bandwidth, robustnessIters, LoessInterpolator.DEFAULT_ACCURACY)",FreeText,"methodResultID.equals(new LoessInterpolator(args[0], args[1], LoessInterpolator.DEFAULT_ACCURACY))"
1,math,org.apache.commons.math3.fitting.CurveFitter_goal.json,"addObservedPoint(double x, double y)",addObservedPoint,org.apache.commons.math3.fitting.CurveFitter,"Calling this method is equivalent to call addObservedPoint(1.0, x, y).",FreeText,"addObservedPoint(1.0, args[0], args[1])"
2,math,org.apache.commons.math3.fitting.leastsquares.EvaluationRmsChecker_goal.json,org.apache.commons.math3.fitting.leastsquares.EvaluationRmsChecker(double tol),org.apache.commons.math3.fitting.leastsquares.EvaluationRmsChecker,org.apache.commons.math3.fitting.leastsquares.EvaluationRmsChecker,"Create a convergence checker for the RMS with the same relative and absolute tolerance. Convenience constructor for when the relative and absolute tolerances are the same. Same as new EvaluationRmsChecker(tol, tol).",FreeText,"methodResultID.equals(new EvaluationRmsChecker(args[0], args[0])"
3,math,org.apache.commons.math3.fitting.WeightedObservedPoints_goal.json,"add(double x, double y)",add,org.apache.commons.math3.fitting.WeightedObservedPoints,"Adds a point to the sample. Calling this method is equivalent to calling add(1.0, x, y).",FreeText,"add(1.0, args[0], args[1])"
4,math,org.apache.commons.math3.geometry.euclidean.oned.Vector1D_goal.json,"distance(org.apache.commons.math3.geometry.euclidean.oned.Vector1D p1, org.apache.commons.math3.geometry.euclidean.oned.Vector1D p2)",distance,org.apache.commons.math3.geometry.euclidean.oned.Vector1D,Calling this method is equivalent to calling: <code>p1.subtract(p2).getNorm()</code> except that no intermediate vector is built,FreeText,methodResultID==(args[0].subtract(args[1]).getNorm())
5,math,org.apache.commons.math3.geometry.euclidean.oned.Vector1D_goal.json,"distanceInf(org.apache.commons.math3.geometry.euclidean.oned.Vector1D p1, org.apache.commons.math3.geometry.euclidean.oned.Vector1D p2)",distanceInf,org.apache.commons.math3.geometry.euclidean.oned.Vector1D,Calling this method is equivalent to calling: <code>p1.subtract(p2).getNormInf()</code> except that no intermediate vector is built,FreeText,methodResultID==(args[0].subtract(args[1]).getNormInf())
6,math,org.apache.commons.math3.geometry.euclidean.oned.Vector1D_goal.json,"distanceSq(org.apache.commons.math3.geometry.euclidean.oned.Vector1D p1, org.apache.commons.math3.geometry.euclidean.oned.Vector1D p2)",distanceSq,org.apache.commons.math3.geometry.euclidean.oned.Vector1D,Calling this method is equivalent to calling: <code>p1.subtract(p2).getNormSq()</code> except that no intermediate vector is built,FreeText,methodResultID==(args[0].subtract(args[1]).getNormSq())
7,math,org.apache.commons.math3.geometry.euclidean.threed.FieldRotation_goal.json,applyTo(org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> r),applyTo,org.apache.commons.math3.geometry.euclidean.threed.FieldRotation,"Calling this method is equivalent to call #compose(FieldRotation, RotationConvention) compose(r, RotationConvention.VECTOR_OPERATOR).",FreeText,"methodResultID.equals(receiverObjectClone.compose(args[0],org.apache.commons.math3.geometry.euclidean.threed.RotationConvention.VECTOR_OPERATOR))"
8,math,org.apache.commons.math3.geometry.euclidean.threed.FieldRotation_goal.json,applyTo(org.apache.commons.math3.geometry.euclidean.threed.Rotation r),applyTo,org.apache.commons.math3.geometry.euclidean.threed.FieldRotation,"Calling this method is equivalent to call #compose(Rotation, RotationConvention) compose(r, RotationConvention.VECTOR_OPERATOR).",FreeText,"methodResultID.equals(receiverObjectClone.compose(args[0],org.apache.commons.math3.geometry.euclidean.threed.RotationConvention.VECTOR_OPERATOR))"
9,math,org.apache.commons.math3.geometry.euclidean.threed.FieldRotation_goal.json,applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> r),applyInverseTo,org.apache.commons.math3.geometry.euclidean.threed.FieldRotation,"Calling this method is equivalent to call #composeInverse(FieldRotation, RotationConvention) composeInverse(r, RotationConvention.VECTOR_OPERATOR).",FreeText,"methodResultID.equals(receiverObjectClone.composeInverse(args[0],org.apache.commons.math3.geometry.euclidean.threed.RotationConvention.VECTOR_OPERATOR))"
10,math,org.apache.commons.math3.geometry.euclidean.threed.FieldRotation_goal.json,applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Rotation r),applyInverseTo,org.apache.commons.math3.geometry.euclidean.threed.FieldRotation,"Calling this method is equivalent to call #composeInverse(Rotation, RotationConvention) composeInverse(r, RotationConvention.VECTOR_OPERATOR).",FreeText,"methodResultID.equals(receiverObjectClone.composeInverse(args[0],org.apache.commons.math3.geometry.euclidean.threed.RotationConvention.VECTOR_OPERATOR))"
11,math,org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D_goal.json,"distance(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v1, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v2)",distance,org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,Calling this method is equivalent to calling: <code>v1.subtract(v2).getNorm()</code> except that no intermediate vector is built,FreeText,methodResultID.equals(args[0].subtract(args[1]).getNorm())
12,math,org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D_goal.json,"distance(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v1, org.apache.commons.math3.geometry.euclidean.threed.Vector3D v2)",distance,org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,Calling this method is equivalent to calling: <code>v1.subtract(v2).getNorm()</code> except that no intermediate vector is built,FreeText,methodResultID.equals(args[0].subtract(args[1]).getNorm())
13,math,org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D_goal.json,"distanceInf(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v1, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v2)",distanceInf,org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,Calling this method is equivalent to calling: <code>v1.subtract(v2).getNormInf()</code> except that no intermediate vector is built,FreeText,methodResultID.equals(args[0].subtract(args[1]).getNormInf())
14,math,org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D_goal.json,"distanceInf(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v1, org.apache.commons.math3.geometry.euclidean.threed.Vector3D v2)",distanceInf,org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,Calling this method is equivalent to calling: <code>v1.subtract(v2).getNormInf()</code> except that no intermediate vector is built,FreeText,methodResultID.equals(args[0].subtract(args[1]).getNormInf())
15,math,org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D_goal.json,"distance1(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v1, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v2)",distance1,org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,Calling this method is equivalent to calling: <code>v1.subtract(v2).getNorm1()</code> except that no intermediate vector is built,FreeText,methodResultID.equals(args[0].subtract(args[1]).getNorm1())
16,math,org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D_goal.json,"distance1(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v1, org.apache.commons.math3.geometry.euclidean.threed.Vector3D v2)",distance1,org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,Calling this method is equivalent to calling: <code>v1.subtract(v2).getNorm1()</code> except that no intermediate vector is built,FreeText,methodResultID.equals(args[0].subtract(args[1]).getNorm1())
17,math,org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D_goal.json,"distanceSq(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v1, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v2)",distanceSq,org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,Calling this method is equivalent to calling: <code>v1.subtract(v2).getNormSq()</code> except that no intermediate vector is built,FreeText,methodResultID.equals(args[0].subtract(args[1]).getNormSq())
18,math,org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D_goal.json,"distanceSq(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v1, org.apache.commons.math3.geometry.euclidean.threed.Vector3D v2)",distanceSq,org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D,Calling this method is equivalent to calling: <code>v1.subtract(v2).getNormSq()</code> except that no intermediate vector is built,FreeText,methodResultID.equals(args[0].subtract(args[1]).getNormSq())
19,math,org.apache.commons.math3.geometry.euclidean.threed.Rotation_goal.json,applyTo(org.apache.commons.math3.geometry.euclidean.threed.Rotation r),applyTo,org.apache.commons.math3.geometry.euclidean.threed.Rotation,"Calling this method is equivalent to call #compose(Rotation, RotationConvention) compose(r, RotationConvention.VECTOR_OPERATOR).",FreeText,"methodResultID.equals(receiverObjectClone.compose(args[0],org.apache.commons.math3.geometry.euclidean.threed.RotationConvention.VECTOR_OPERATOR))"
20,math,org.apache.commons.math3.geometry.euclidean.threed.Rotation_goal.json,getAngles(org.apache.commons.math3.geometry.euclidean.threed.RotationOrder order),getAngles,org.apache.commons.math3.geometry.euclidean.threed.Rotation,"Calling this method is equivalent to call #getAngles(RotationOrder, RotationConvention) getAngles(order, RotationConvention.VECTOR_OPERATOR)",FreeText,"java.util.Arrays.equals(methodResultID, receiverObjectClone.getAngles(args[0],org.apache.commons.math3.geometry.euclidean.threed.RotationConvention.VECTOR_OPERATOR))"
21,math,org.apache.commons.math3.geometry.euclidean.threed.Rotation_goal.json,applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Rotation r),applyInverseTo,org.apache.commons.math3.geometry.euclidean.threed.Rotation,"Calling this method is equivalent to call #composeInverse(Rotation, RotationConvention) composeInverse(r, RotationConvention.VECTOR_OPERATOR).",FreeText,"methodResultID.equals(receiverObjectClone.composeInverse(args[0],org.apache.commons.math3.geometry.euclidean.threed.RotationConvention.VECTOR_OPERATOR))"
22,math,org.apache.commons.math3.geometry.euclidean.threed.Rotation_goal.json,getAxis(),getAxis,org.apache.commons.math3.geometry.euclidean.threed.Rotation,Calling this method is equivalent to call #getAxis(RotationConvention) getAxis(RotationConvention.VECTOR_OPERATOR),FreeText,methodResultID.equals(receiverObjectClone.getAxis(org.apache.commons.math3.geometry.euclidean.threed.RotationConvention.VECTOR_OPERATOR))
23,math,org.apache.commons.math3.geometry.euclidean.threed.Vector3D_goal.json,"distance1(org.apache.commons.math3.geometry.euclidean.threed.Vector3D v1, org.apache.commons.math3.geometry.euclidean.threed.Vector3D v2)",distance1,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,Calling this method is equivalent to calling: <code>v1.subtract(v2).getNorm1()</code> except that no intermediate vector is built,FreeText,methodResultID==(args[0].subtract(args[1]).getNorm1())
24,math,org.apache.commons.math3.geometry.euclidean.threed.Vector3D_goal.json,"distanceSq(org.apache.commons.math3.geometry.euclidean.threed.Vector3D v1, org.apache.commons.math3.geometry.euclidean.threed.Vector3D v2)",distanceSq,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,Calling this method is equivalent to calling: <code>v1.subtract(v2).getNormSq()</code> except that no intermediate vector is built,FreeText,methodResultID==(args[0].subtract(args[1]).getNormSq())
25,math,org.apache.commons.math3.geometry.euclidean.threed.Vector3D_goal.json,"distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D v1, org.apache.commons.math3.geometry.euclidean.threed.Vector3D v2)",distance,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,Calling this method is equivalent to calling: <code>v1.subtract(v2).getNorm()</code> except that no intermediate vector is built,FreeText,methodResultID==(args[0].subtract(args[1]).getNorm())
26,math,org.apache.commons.math3.geometry.euclidean.threed.Vector3D_goal.json,"distanceInf(org.apache.commons.math3.geometry.euclidean.threed.Vector3D v1, org.apache.commons.math3.geometry.euclidean.threed.Vector3D v2)",distanceInf,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,Calling this method is equivalent to calling: <code>v1.subtract(v2).getNormInf()</code> except that no intermediate vector is built,FreeText,methodResultID==(args[0].subtract(args[1]).getNormInf())
27,math,org.apache.commons.math3.geometry.euclidean.twod.Vector2D_goal.json,"distanceSq(org.apache.commons.math3.geometry.euclidean.twod.Vector2D p1, org.apache.commons.math3.geometry.euclidean.twod.Vector2D p2)",distanceSq,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,Calling this method is equivalent to calling: <code>p1.subtract(p2).getNormSq()</code> except that no intermediate vector is built,FreeText,methodResultID==(args[0].subtract(args[1]).getNormSq())
28,math,org.apache.commons.math3.geometry.euclidean.twod.Vector2D_goal.json,"distance(org.apache.commons.math3.geometry.euclidean.twod.Vector2D p1, org.apache.commons.math3.geometry.euclidean.twod.Vector2D p2)",distance,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,Calling this method is equivalent to calling: <code>p1.subtract(p2).getNorm()</code> except that no intermediate vector is built,FreeText,methodResultID==(args[0].subtract(args[1]).getNorm())
29,math,org.apache.commons.math3.geometry.euclidean.twod.Vector2D_goal.json,"distanceInf(org.apache.commons.math3.geometry.euclidean.twod.Vector2D p1, org.apache.commons.math3.geometry.euclidean.twod.Vector2D p2)",distanceInf,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,Calling this method is equivalent to calling: <code>p1.subtract(p2).getNormInf()</code> except that no intermediate vector is built,FreeText,methodResultID==(args[0].subtract(args[1]).getNormInf())
30,math,org.apache.commons.math3.geometry.spherical.twod.Circle_goal.json,getXAxis(),getXAxis,org.apache.commons.math3.geometry.spherical.twod.Circle,This method returns the same value as #getPointAt(double) getPointAt(0.0) but it does not do any computation and always return the same instance.,FreeText,methodResultID.equals(receiverObjectClone.getPointAt(0.0))
31,math,org.apache.commons.math3.geometry.spherical.twod.Circle_goal.json,getYAxis(),getYAxis,org.apache.commons.math3.geometry.spherical.twod.Circle,This method returns the same value as #getPointAt(double) getPointAt(0.5 * FastMath.PI) but it does not do any computation and always return the same instance.,FreeText,methodResultID.equals(getPointAt(0.5 * FastMath.PI))
32,math,org.apache.commons.math3.linear.RealVector_goal.json,map(org.apache.commons.math3.analysis.UnivariateFunction function),map,org.apache.commons.math3.linear.RealVector,Acts as if implemented as:  return copy().mapToSelf(function);  Returns a new vector. Does not change instance data.,FreeText,methodResultID.equals(copy().mapToSelf(args[0]))
33,math,org.apache.commons.math3.util.Decimal64_goal.json,toString(),toString,org.apache.commons.math3.util.Decimal64,{@inheritDoc} The returned String is equal to Double.toString(this.doubleValue()) @see Double#toString(double),FreeText,methodResultID.equals(Double.toString(this.doubleValue()))
